<channelGroup version="3.9.1">
  <id>92f38083-4bde-4d46-a961-b7931f22593a</id>
  <name>Offline Analisis</name>
  <revision>4</revision>
  <lastModified>
    <time>1702929395562</time>
    <timezone>America/Bogota</timezone>
  </lastModified>
  <description></description>
  <channels>
    <channel version="3.9.1">
      <id>60863a3d-2b00-42fc-aae5-35fd259f5bb2</id>
      <nextMetaDataId>2</nextMetaDataId>
      <name>CSV_to_JSON</name>
      <description></description>
      <revision>50</revision>
      <sourceConnector version="3.9.1">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.file.FileReceiverProperties" version="3.9.1">
          <pluginProperties/>
          <pollConnectorProperties version="3.9.1">
            <pollingType>INTERVAL</pollingType>
            <pollOnStart>true</pollOnStart>
            <pollingFrequency>1000</pollingFrequency>
            <pollingHour>0</pollingHour>
            <pollingMinute>0</pollingMinute>
            <cronJobs/>
            <pollConnectorPropertiesAdvanced>
              <weekly>true</weekly>
              <inactiveDays>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
              </inactiveDays>
              <dayOfMonth>1</dayOfMonth>
              <allDay>true</allDay>
              <startingHour>8</startingHour>
              <startingMinute>0</startingMinute>
              <endingHour>17</endingHour>
              <endingMinute>0</endingMinute>
            </pollConnectorPropertiesAdvanced>
          </pollConnectorProperties>
          <sourceConnectorProperties version="3.9.1">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>true</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
          <scheme>FILE</scheme>
          <host>${CDS_Source_Dir}</host>
          <fileFilter>*</fileFilter>
          <regex>false</regex>
          <directoryRecursion>false</directoryRecursion>
          <ignoreDot>true</ignoreDot>
          <anonymous>true</anonymous>
          <username>anonymous</username>
          <password>anonymous</password>
          <timeout>10000</timeout>
          <secure>true</secure>
          <passive>true</passive>
          <validateConnection>true</validateConnection>
          <afterProcessingAction>MOVE</afterProcessingAction>
          <moveToDirectory>${CDS_Source_Dir}/Archive</moveToDirectory>
          <moveToFileName>${originalFilename}_${SYSTIME}</moveToFileName>
          <errorReadingAction>MOVE</errorReadingAction>
          <errorResponseAction>MOVE</errorResponseAction>
          <errorMoveToDirectory>${CDS_Source_Dir}/Error</errorMoveToDirectory>
          <errorMoveToFileName>${originalFilename}_${SYSTIME}</errorMoveToFileName>
          <checkFileAge>false</checkFileAge>
          <fileAge>1000</fileAge>
          <fileSizeMinimum>0</fileSizeMinimum>
          <fileSizeMaximum></fileSizeMaximum>
          <ignoreFileSizeMaximum>true</ignoreFileSizeMaximum>
          <sortBy>date</sortBy>
          <binary>false</binary>
          <charsetEncoding>UTF-8</charsetEncoding>
        </properties>
        <transformer version="3.9.1">
          <elements>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>OrderID</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>false</enabled>
              <variable>OrderID</variable>
              <mapping>msg[&apos;row&apos;][&apos;Orden&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>NombrePaciente</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>false</enabled>
              <variable>NombrePaciente</variable>
              <mapping>msg[&apos;row&apos;][&apos;Nombre_Paciente&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>PacienteID</name>
              <sequenceNumber>2</sequenceNumber>
              <enabled>false</enabled>
              <variable>PacienteID</variable>
              <mapping>msg[&apos;row&apos;][&apos;Número_Identificación&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>Edad</name>
              <sequenceNumber>3</sequenceNumber>
              <enabled>false</enabled>
              <variable>Edad</variable>
              <mapping>msg[&apos;row&apos;][&apos;Edad&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>Sexo</name>
              <sequenceNumber>4</sequenceNumber>
              <enabled>false</enabled>
              <variable>Sexo</variable>
              <mapping>msg[&apos;row&apos;][&apos;Género&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>TestID</name>
              <sequenceNumber>5</sequenceNumber>
              <enabled>false</enabled>
              <variable>TestID</variable>
              <mapping>msg[&apos;row&apos;][&apos;Parámetro&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>TestValue</name>
              <sequenceNumber>6</sequenceNumber>
              <enabled>false</enabled>
              <variable>TestValue</variable>
              <mapping>msg[&apos;row&apos;][&apos;Resultado&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>RequestDateTime</name>
              <sequenceNumber>7</sequenceNumber>
              <enabled>false</enabled>
              <variable>RequestDateTime</variable>
              <mapping>msg[&apos;row&apos;][&apos;RequestDateTime&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>ValidationDateTime</name>
              <sequenceNumber>8</sequenceNumber>
              <enabled>false</enabled>
              <variable>ValidationDateTime</variable>
              <mapping>msg[&apos;row&apos;][&apos;ValidationDateTime&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>TipoServicio</name>
              <sequenceNumber>9</sequenceNumber>
              <enabled>false</enabled>
              <variable>TipoServicio</variable>
              <mapping>msg[&apos;row&apos;][&apos;Tipo_Servicio&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>CodigoCliente</name>
              <sequenceNumber>10</sequenceNumber>
              <enabled>false</enabled>
              <variable>CodigoCliente</variable>
              <mapping>msg[&apos;row&apos;][&apos;Código_Cliente&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>NombreCliente</name>
              <sequenceNumber>11</sequenceNumber>
              <enabled>false</enabled>
              <variable>NombreCliente</variable>
              <mapping>msg[&apos;row&apos;][&apos;Nombre_Cliente&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>CodigoSede</name>
              <sequenceNumber>12</sequenceNumber>
              <enabled>false</enabled>
              <variable>CodigoSede</variable>
              <mapping>msg[&apos;row&apos;][&apos;Código_Sede&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>NombreSede</name>
              <sequenceNumber>13</sequenceNumber>
              <enabled>false</enabled>
              <variable>NombreSede</variable>
              <mapping>msg[&apos;row&apos;][&apos;Nombre_Sede&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.9.1">
              <name>EpisodeDateTime</name>
              <sequenceNumber>14</sequenceNumber>
              <enabled>false</enabled>
              <script></script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.9.1">
              <sequenceNumber>15</sequenceNumber>
              <enabled>true</enabled>
              <script></script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64">NjQ0MDYwMjAzLEFMRU1BTiBBQ09TVEEgR1JJU0VMREEgTUFSSUEsQ0MgMzQ5NDAzNTQsNjUsQWR1
bHRvIG1heW9yLEYsMzA0MjQwMTk0NSw5MDIyMTAsSEVNLDE1MDAwLEhlbW9ncmFtYSBUaXBvIElW
LExldWNvY2l0b3MsNy42Nyx4MTBeMyAvdUwsNC41MCwxMS4wMCwwNC8xMC8yMDIzIDAwOjAwLDI5
LzExLzIwMjMgMDA6MDAsVU5JREFEIFJFTkFMLDIzMTM2LEZSRVNFTklVUyBQQVFVRVRFIEhEIE1P
TlRFUklBICw4MzAwMDczNTUsRlJFU0VOSVVTIE1FRElDQUwgQ0FSRSBDT0xPTUJJQSBTLkEuLDY0
NCxTWU5MQUIgTU9OVEVSSUEgQlVFTkFWSVNUQSxTWU5MQUIgQ09MT01CSUE=</inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>DELIMITED</inboundDataType>
          <outboundDataType>JSON</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDataTypeProperties" version="3.9.1">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedSerializationProperties" version="3.9.1">
              <columnDelimiter>,</columnDelimiter>
              <recordDelimiter>\n</recordDelimiter>
              <quoteToken>&quot;</quoteToken>
              <escapeWithDoubleQuote>false</escapeWithDoubleQuote>
              <quoteEscapeToken>\</quoteEscapeToken>
              <columnNames>
                <string>Orden</string>
                <string>Nombre_Paciente</string>
                <string>Numero_Identificacion</string>
                <string>Edad</string>
                <string>Grupo</string>
                <string>Genero</string>
                <string>Telefono</string>
                <string>Codigo_CUPS</string>
                <string>Seccion_del_Examen</string>
                <string>Codigo_Examen</string>
                <string>Nombre_Examen</string>
                <string>Parametro</string>
                <string>Resultado</string>
                <string>Unidades</string>
                <string>Val_Ref_1</string>
                <string>Val_Ref_2</string>
                <string>RequestDateTime</string>
                <string>ValidationDateTime</string>
                <string>Tipo_Servicio</string>
                <string>Codigo_Cliente</string>
                <string>Nombre_Cliente</string>
                <string>Codigo_Medico</string>
                <string>Nombre_Medico</string>
                <string>Codigo_Sede</string>
                <string>Nombre_Sede</string>
                <string>Nombre_Entidad</string>
              </columnNames>
              <numberedRows>false</numberedRows>
              <ignoreCR>true</ignoreCR>
            </serializationProperties>
            <deserializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDeserializationProperties" version="3.9.1">
              <columnDelimiter>,</columnDelimiter>
              <recordDelimiter>\n</recordDelimiter>
              <quoteToken>&quot;</quoteToken>
              <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
              <quoteEscapeToken>\</quoteEscapeToken>
            </deserializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedBatchProperties" version="3.9.1">
              <splitType>Grouping_Column</splitType>
              <batchSkipRecords>1</batchSkipRecords>
              <batchMessageDelimiter></batchMessageDelimiter>
              <batchMessageDelimiterIncluded>false</batchMessageDelimiterIncluded>
              <batchGroupingColumn>Numero_Identificacion</batchGroupingColumn>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.9.1">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.9.1">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="3.9.1">
          <elements/>
        </filter>
        <transportName>File Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="3.9.1">
          <metaDataId>1</metaDataId>
          <name>Destination 1</name>
          <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="3.9.1">
            <pluginProperties/>
            <destinationConnectorProperties version="3.9.1">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <host>http://localhost:9023/rdr/interpreter/query?kbcode=FRES</host>
            <useProxyServer>false</useProxyServer>
            <proxyAddress></proxyAddress>
            <proxyPort></proxyPort>
            <method>post</method>
            <headers class="linked-hash-map"/>
            <parameters class="linked-hash-map"/>
            <useHeadersVariable>false</useHeadersVariable>
            <headersVariable></headersVariable>
            <useParametersVariable>false</useParametersVariable>
            <parametersVariable></parametersVariable>
            <responseXmlBody>false</responseXmlBody>
            <responseParseMultipart>true</responseParseMultipart>
            <responseIncludeMetadata>false</responseIncludeMetadata>
            <responseBinaryMimeTypes>application/.*(?&lt;!json|xml)$|image/.*|video/.*|audio/.*</responseBinaryMimeTypes>
            <responseBinaryMimeTypesRegex>true</responseBinaryMimeTypesRegex>
            <multipart>false</multipart>
            <useAuthentication>false</useAuthentication>
            <authenticationType>Basic</authenticationType>
            <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
            <username></username>
            <password></password>
            <content>${message.encodedData}</content>
            <contentType>application/json</contentType>
            <dataTypeBinary>false</dataTypeBinary>
            <charset>UTF-8</charset>
            <socketTimeout>30000</socketTimeout>
          </properties>
          <transformer version="3.9.1">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.9.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.9.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.9.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.9.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.9.1">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.9.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.9.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.9.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.9.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.9.1">
            <elements/>
          </filter>
          <transportName>HTTP Sender</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="3.9.1">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>PRODUCTION</messageStorageMode>
        <encryptData>false</encryptData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="3.9.1">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>false</enabled>
          <lastModified>
            <time>1702989793874</time>
            <timezone>America/Bogota</timezone>
          </lastModified>
          <pruningSettings>
            <pruneMetaDataDays>1</pruneMetaDataDays>
            <pruneContentDays>1</pruneContentDays>
            <archiveEnabled>false</archiveEnabled>
          </pruningSettings>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="3.9.1">
            <id>14edb524-2418-43b8-a793-a6cd4834125f</id>
            <name>CDSLibrary</name>
            <revision>2</revision>
            <lastModified>
              <time>1702919075456</time>
              <timezone>America/Bogota</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>77ab9cc6-2ecd-44c0-b42b-12d7d0d9f189</string>
              <string>1d1c2f3f-7b43-4a08-aac9-3406457df838</string>
              <string>747034d1-3b67-4648-b61d-97569079ec4f</string>
              <string>8c353129-1ddc-49ad-8b83-3ad2afe7a40c</string>
              <string>8744071f-c37e-4836-91e5-09c33fc3fc6c</string>
              <string>433ad4fa-bc93-47c1-a845-5efea1c1072e</string>
              <string>7fe17d45-0d9c-4e3b-84e5-1ca99bbed1b0</string>
              <string>c493d457-70a0-4f4c-a937-0488ff6a4535</string>
              <string>1badc74d-d04c-406b-877f-d31701e3e635</string>
              <string>84789e18-d176-4c56-b440-2e0f2e95a99a</string>
              <string>d399041c-db53-4cb3-bc90-de88541ad78f</string>
              <string>eb46a988-ef28-438f-85a8-79ff448dbfa8</string>
              <string>76c3a018-7fc4-4fa9-a233-ae85c317f616</string>
              <string>55980407-140c-48e7-bc35-175c21f68fcb</string>
              <string>278077bd-06c4-4367-8e98-793b88f53108</string>
              <string>fc376d9e-a4a0-42b9-8945-c643c00a0048</string>
              <string>18a8bfe5-6fbf-40b0-ac5e-d1e0b34316b3</string>
              <string>b0a96d01-1c22-4c23-bce1-5536abe79f78</string>
              <string>6e154ddd-fa94-48d0-8d51-099d4b18dc7e</string>
              <string>0c4728b1-b0fa-4d99-9d0b-640e73a77e22</string>
              <string>b713e9b5-f29f-420c-8767-347c4cc59235</string>
              <string>73de28ab-9b76-43f5-a589-933aca189633</string>
              <string>0ee1b38b-9693-49cc-a93f-d83c2162abea</string>
              <string>c103919f-4f02-4ebb-b5fc-c74d70f9d984</string>
              <string>7323ba37-7876-4329-bd17-6e8f63f70320</string>
              <string>f4c513ef-f1ab-470a-bff5-d505363dd0cb</string>
              <string>4a11b6f9-2a70-45a4-85ef-7949937ff063</string>
              <string>698319a5-6a40-439f-a2fc-77968f8fd8b0</string>
              <string>1dc78376-5e82-488e-8b61-844d9c9201f6</string>
              <string>824a47e1-d27d-4c70-b613-87b22a06b30f</string>
              <string>73fcebb7-1fac-4550-8bcf-cd90553c8706</string>
              <string>dfaea744-4c0c-4e3e-974f-2714feb84b6a</string>
              <string>4c30d333-07c7-4608-90fb-f209480945f9</string>
              <string>a34ca889-a825-42c2-b8d2-eade79050a7b</string>
              <string>65fd27b3-2550-4fc6-a077-3b700f624801</string>
              <string>e28b6034-657f-44fe-bdfb-2eb08f6b8b9d</string>
              <string>8bf57726-afe4-4bf2-ab11-a811a2a90173</string>
              <string>92a2401a-38b2-4332-ae9c-382eeff9fed9</string>
              <string>ec42f2b5-da91-422d-8e84-ca8fce839ca9</string>
              <string>f9e9b002-0d75-4d07-9829-9a936107fa64</string>
              <string>3e3fa50e-bf1f-4040-94e8-e534f59f1aca</string>
              <string>44fa8b92-bea5-4ca9-bc34-fba837df1f3e</string>
              <string>9a05a6d3-f67e-4e8d-a5c8-eeddecacea4f</string>
              <string>7b43fb86-dd49-4f24-8e63-2921f65835a7</string>
              <string>1ef6c048-d7a7-4702-a9fa-88c3929f28d7</string>
              <string>e5ac2e27-f193-4738-b6e4-fa77ccdb8210</string>
              <string>5d6a3192-30a4-4b5d-9e42-ce67cc86d815</string>
              <string>a769de5d-f56c-4603-bcbc-3d2459213531</string>
              <string>bfe36ced-a6f7-44e7-af45-5837f11b3bad</string>
              <string>d1e3a6bf-f2ad-4395-aa42-5a39ca3e671d</string>
              <string>a0372fd7-10c0-4832-adb3-80afede56081</string>
              <string>1bc4cc73-cce0-43f1-98af-52d3072840e1</string>
              <string>1e3cb27c-ab1a-4edd-837b-baa3d7a7b1e4</string>
              <string>8be4a05a-d1fb-452f-bdbc-dc149574753f</string>
              <string>9d321038-d32a-41be-b3a2-abd7434dff69</string>
              <string>799b2a4c-6925-4ea7-8470-0d0fc00df393</string>
              <string>5dffbd4e-833e-4a91-9497-740ad95fc4e1</string>
              <string>03226d36-9fd4-49ce-a918-28b4fb9517b3</string>
              <string>7a35a369-f78d-4e11-b045-c84d87d26355</string>
              <string>b1b9fd9d-0be2-4a67-87a8-38f405b2c3bb</string>
              <string>84ce7656-7580-4d1d-9d81-e81e325089fd</string>
              <string>b13045bc-2898-4fc1-b952-5ea29cf70720</string>
              <string>750017ad-a990-4ed0-9a1f-75c94531aba4</string>
              <string>54694f01-6c22-44db-a7e5-ebc9ae829740</string>
              <string>b5bdf4f0-81b3-4c53-b885-c0c670db3d57</string>
              <string>8f69e69c-327c-4275-8aca-f2cda426dab5</string>
              <string>3b2dd6b0-68c1-4392-b655-087abacd766d</string>
              <string>01ea1ce1-60ff-42c5-b059-a15a77275267</string>
              <string>cb9377d3-e95b-4b0b-bbb2-5e84fb106556</string>
              <string>a036bb2a-a192-455b-b3f3-14ab0fd5cbac</string>
              <string>110bc202-af08-4bfe-b641-887703d741f0</string>
              <string>0d1732eb-79c8-47b1-a829-58be289cee1f</string>
              <string>4b6f419b-3fbf-4371-b1fe-c51ecd5a05aa</string>
              <string>23b63fb2-743f-481a-9726-99430365b127</string>
              <string>d459da66-c436-4ae0-a5ec-d153d2d891a5</string>
              <string>37586608-d3c6-4465-953a-dce98ee13a2c</string>
              <string>ed36555d-bab4-476d-9887-ac2727f94e40</string>
              <string>2472b206-9949-4ada-acbb-64b14eae1b78</string>
              <string>a849d594-1242-4840-8d17-634abf7a9e66</string>
              <string>b5b3ad88-a0a7-4110-8813-19f68dc7b136</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.9.1">
                <id>68af7e0a-a2a5-438d-bb24-fd55642929a2</id>
                <name>createAttribute</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597480447</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function createAttribute(name ,value){
	var attributeObject = {};
  attributeObject.externalName = name;
  attributeObject.value =	value;	
  return attributeObject
	}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.9.1">
                <id>06ef2d18-82b1-4402-9113-6f4a8d472361</id>
                <name>createExtendedAttribute</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597481876</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function createExtendedAttribute(externalName,value,units,range)
{
	var attributeObject = {};
	if(validateValues(value))
	{ 
		
	  	attributeObject.externalName  = externalName;
	  	attributeObject.value =value;
	  	attributeObject.units =units;
	  	
	  	if (validateRange(range)){
	 		attributeObject.range=range ;
	  	}
	 	
		
	}else 
	{attributeObject.externalName  = externalName;}
	return  attributeObject;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.9.1">
                <id>0bf4aa5b-5d2c-467e-a47a-8c05e137f6a3</id>
                <name>Get_Informix_Connection</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597480091</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
JavaScript function to centralise creation of a database connection. The
connection won&apos;t be open, the caller still needs to do this but all constants
will be instantiated here

@return dbConn returns an instance of a returns a new DatabaseConnection object
*/
function Get_Informix_Connection() {

var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;com.informix.jdbc.IfxDriver&apos;, &apos;jdbc:informix-sqli://10.192.176.57:1526/orion_clinic:INFORMIXSERVER=dboc&apos;, &apos;consultaocli&apos;, &apos;hdrsanjuan&apos;);

return dbConn;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.9.1">
                <id>aff2785a-9d8b-44e1-8667-21a23f632eb6</id>
                <name>validateRange</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597480657</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function validateRange(ReferenceRange)
{
	if(ReferenceRange != null &amp;&amp; ReferenceRange.toString().trim().indexOf(&apos;-&apos;) &gt;=0 )
	{
	return true;
	}
	else { return false;}
	}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.9.1">
                <id>e5be0fe3-40ff-4738-9e29-19199e8e10aa</id>
                <name>validateValues</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597481349</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function validateValues(labvalue)
{
	if (  labvalue == null || labvalue == &quot;Nil&quot;  )
	{return false;}
	else
	return true;
	};
	</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.9.1">
            <id>0e6800ae-6d84-4245-9e09-2c1a2f28d8fc</id>
            <name>Common</name>
            <revision>2</revision>
            <lastModified>
              <time>1702919075449</time>
              <timezone>America/Bogota</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>0c4728b1-b0fa-4d99-9d0b-640e73a77e22</string>
              <string>0ee1b38b-9693-49cc-a93f-d83c2162abea</string>
              <string>f4c513ef-f1ab-470a-bff5-d505363dd0cb</string>
              <string>698319a5-6a40-439f-a2fc-77968f8fd8b0</string>
              <string>747034d1-3b67-4648-b61d-97569079ec4f</string>
              <string>a34ca889-a825-42c2-b8d2-eade79050a7b</string>
              <string>e28b6034-657f-44fe-bdfb-2eb08f6b8b9d</string>
              <string>8bf57726-afe4-4bf2-ab11-a811a2a90173</string>
              <string>8744071f-c37e-4836-91e5-09c33fc3fc6c</string>
              <string>c33e2ab9-4947-4a9c-a086-f94a0ab6331f</string>
              <string>f3853b12-9d89-4103-a29b-8b938c30466f</string>
              <string>03226d36-9fd4-49ce-a918-28b4fb9517b3</string>
              <string>278077bd-06c4-4367-8e98-793b88f53108</string>
              <string>dd2306fc-2fd7-4a27-a082-5f8c481ec5c6</string>
              <string>1ef6c048-d7a7-4702-a9fa-88c3929f28d7</string>
              <string>6471c495-addd-4cf4-a834-e7f9eb93045a</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.9.1">
                <id>43f73dbc-f73d-4178-9aa0-b451c05922e2</id>
                <name>Check if String contains</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597480368</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	To verify if one string (source) contains another string (target).

	@param {String} arg1 - target string to lookup in the source string
	@return {String} return true if the source string contains the target string
*/
String.prototype.contains = function(arg1) {
	
	return this.indexOf(arg1) &gt; -1;
		
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.9.1">
                <id>6a420042-a38d-4d6b-8567-d0290086256a</id>
                <name>Check if String contains HTTP code</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597479785</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	To verify if the given string contains HTTP status code.

	@param - no parameter
	@return {String} return true if the string contains the HTTP status code, false otherwise
*/

function isHttpCode2xx(arg1) {
	var code2xx = [&apos;200&apos;,&apos;201&apos;,&apos;202&apos;,&apos;203&apos;,&apos;204&apos;,&apos;205&apos;,&apos;206&apos;,&apos;207&apos;,&apos;208&apos;];	
	var length = code2xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code2xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}

function isHttpCode4xx(arg1) {
	var code4xx = [&apos;400&apos;,&apos;401&apos;,&apos;402&apos;,&apos;403&apos;,&apos;404&apos;,&apos;405&apos;,&apos;406&apos;,&apos;407&apos;,&apos;408&apos;,&apos;409&apos;,&apos;410&apos;,&apos;411&apos;,&apos;412&apos;,&apos;413&apos;,&apos;414&apos;,&apos;415&apos;,&apos;416&apos;,&apos;417&apos;,&apos;429&apos;,&apos;431&apos;,&apos;451&apos;];	
	var length = code4xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code4xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}

function isHttpCode5xx(arg1) {
	var code5xx = [&apos;500&apos;,&apos;501&apos;,&apos;502&apos;,&apos;503&apos;,&apos;504&apos;,&apos;505&apos;,&apos;506&apos;,&apos;510&apos;,&apos;511&apos;];	
	var length = code5xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code5xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.9.1">
                <id>42dbc1c3-72e4-4ece-a6b8-5cd188446027</id>
                <name>Convert JSON date to HL7v2 date</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597481529</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	To convert JSON date/time format to HL7v2 date only format.

	@param {String} datetime - JSON date/time (yyyy-MM-ddThh:mm:ss.sss-00:00) or (yyyy-MM-dd)
	@return {String} return HL7v2 date (yyyyMMdd)
*/
function convertToHL7v2Date(datetime) { 

	var date = datetime.toString().match(/\d{4}\-\d{2}\-\d{2}/);
	return ((date.length &gt; 0) ? date[0].replace(/\-/g,&apos;&apos;) : date.replace(/\-/g,&apos;&apos;));
	
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.9.1">
                <id>5b60cf28-571b-4aa8-94fe-d3cdf069471b</id>
                <name>Convert JSON datetime to HL7v2 datetime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597479424</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	To convert JSON date/time format to HL7v2 date only format.
	Possible formats:
	&quot;2016-01-01T00:00:00.000Z&quot;	JavaScript built-in JSON object
	&quot;2016-01-01T00:00:00-00:00&quot;	ISO 8601

	@param {String} datetime - JSON date/time with offset (yyyy-MM-ddThh:mm:ss.sss-/+00:00) or (yyyy-MM-dd)
	@return {String} return HL7v2 DTM date type
*/
function convertToHL7v2DateTime(datetime) { 

	var date = [];
	var hl7Date = &quot;&quot;;
	var timeZome = &quot;&quot;;

	if (datetime.indexOf(&quot;T&quot;) &gt; -1) {

		var zone = datetime.toString().slice(datetime.indexOf(&quot;T&quot;) + 1);
		if (zone.indexOf(&quot;+&quot;) &gt; 0) timeZone = &quot;+&quot;;
		if (zone.indexOf(&quot;-&quot;) &gt; 0) timeZone = &quot;-&quot;;

		if (datetime.indexOf(&quot;Z&quot;) &gt; 0) {
			date = datetime.toString().split(/\-|\+|T|:|\./g);
		} else {
			date = datetime.toString().split(/\-|\+|T|:/g);
		}
		
		for (var i=0; i &lt; 6; i++) {			
			hl7Date += date[i]; 
		}
		
		var offset = date.slice(6);
		for (var i=0; i &lt; offset.length; i++) {
			timeZone += offset[i];
		}

		return hl7Date + timeZone;

	} else {
		return convertToHL7v2Date(datetime);
	}
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.9.1">
                <id>d014f2fc-cf80-47ad-9de8-6c84807e2f70</id>
                <name>Extract JSON node data</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597479521</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Validates if node is not NULL or &quot;undefined&quot;. If the given node is an array, return a string of values.

	@param {String} node - node to extract the data from
	@return {String} return given node value or empty string if such node does not exist
*/
function extract(node) {

	try {
		var result = &quot;&quot;;

		if (null == node) return result;
		
		if ((typeof node) !== &quot;undefined&quot;) {

			if (Object.prototype.toString.call(node) === &apos;[object Array]&apos;) {
				result = org.apache.commons.lang3.StringUtils.join(node, &quot; &quot;)
			} else 
				result = node;
		}
	} finally {
		return result.toString().trim();
	}
}

</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.9.1">
                <id>a3f85cc2-9b95-45a9-9cb1-937197e09cdc</id>
                <name>Verify JSON node for existance</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597479695</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Verify if the given node exists.

	@param {String} node - node to verify for existance
	@return {String} return true if the given node exists, false otherwise
*/
function keyExists(node) {
	return ( ((typeof node) !== &quot;undefined&quot;) &amp;&amp; ((typeof node) !== null) );
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.9.1">
            <id>394664c0-d536-4310-970e-181dc03ee7da</id>
            <name>Conversions</name>
            <revision>1</revision>
            <lastModified>
              <time>1682597479338</time>
              <timezone>America/Bogota</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>0c4728b1-b0fa-4d99-9d0b-640e73a77e22</string>
              <string>0ee1b38b-9693-49cc-a93f-d83c2162abea</string>
              <string>f4c513ef-f1ab-470a-bff5-d505363dd0cb</string>
              <string>698319a5-6a40-439f-a2fc-77968f8fd8b0</string>
              <string>747034d1-3b67-4648-b61d-97569079ec4f</string>
              <string>a34ca889-a825-42c2-b8d2-eade79050a7b</string>
              <string>e28b6034-657f-44fe-bdfb-2eb08f6b8b9d</string>
              <string>8bf57726-afe4-4bf2-ab11-a811a2a90173</string>
              <string>8744071f-c37e-4836-91e5-09c33fc3fc6c</string>
              <string>c33e2ab9-4947-4a9c-a086-f94a0ab6331f</string>
              <string>f3853b12-9d89-4103-a29b-8b938c30466f</string>
              <string>03226d36-9fd4-49ce-a918-28b4fb9517b3</string>
              <string>278077bd-06c4-4367-8e98-793b88f53108</string>
              <string>dd2306fc-2fd7-4a27-a082-5f8c481ec5c6</string>
              <string>1ef6c048-d7a7-4702-a9fa-88c3929f28d7</string>
              <string>6471c495-addd-4cf4-a834-e7f9eb93045a</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.9.1">
                <id>3a388aa0-c0ba-460c-b790-1c42c081c84d</id>
                <name>Convert FHIR codes to HL7v2 codes</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597480735</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Map FHIR codes to corresponding HL7v2.6 codes using the Table number.

	@param {String} FhirCode - FHIR code
	@param {String} tableName - HL7v2.6 Table Name	
	@return {String} return corresponsing HL7v2.6 code if known or &quot;Unknown&quot; result
*/
function convertToHL7v2Table(FhirCode,tableNumber) {

	var code = &apos;&apos;;
	if (&apos;undefined&apos; !== typeof FhirCode &amp;&amp; null !== FhirCode) {
		code = FhirCode.toString().toLowerCase();	
	}
	

	switch(tableNumber) {
		case &quot;0001&quot;:
			if (&apos;female&apos; == code || &apos;f&apos; == code) return &apos;F&apos;; else
			if (&apos;male&apos; == code || &apos;m&apos; == code) return &apos;M&apos;; else
			if (&apos;other&apos; == code) return &apos;O&apos;; else
			return &apos;U&apos;; 			
		break;

		case &quot;0004&quot;:
			// http://hl7.org/fhir/encounter-class
			if (&apos;emergency&apos; == code) return &apos;E&apos;; else				
			if (&apos;inpatient&apos; == code) return &apos;I&apos;; else
			if (&apos;outpatient&apos; == code) return &apos;O&apos;; else
			return &quot;U&quot;;
		break;

		case &quot;0190&quot;:
			// http://hl7.org/fhir/ValueSet/address-type
			if (&apos;postal&apos; == code) return &apos;H&apos;; else				
			if (&apos;physical&apos; == code) return &apos;P&apos;; else
			if (&apos;both&apos; == code) return &apos;H&apos;; else
			return &quot;M&quot;;
		break;		

		case &quot;0201&quot;:
			// http://hl7.org/fhir/ValueSet/contact-point-use
			if (&apos;home&apos; == code) return &apos;PRN&apos;; else				
			if (&apos;work&apos; == code) return &apos;WPN&apos;; else
			if (&apos;mobile&apos; == code) return &apos;PRS&apos;; else
			if (&apos;temp&apos; == code) return &apos;TMP&apos;; else			
			if (&apos;old&apos; == code) return &apos;OLD&apos;; else
			return &quot;PRN&quot;;
		break;	

		case &quot;0202&quot;:
			// http://hl7.org/fhir/contact-point-system
			if (&apos;phone&apos; == code) return &apos;PH&apos;; else				
			if (&apos;fax&apos; == code) return &apos;FX&apos;; else
			if (&apos;pager&apos; == code) return &apos;BP&apos;; else
			if (&apos;email&apos; == code) return &apos;Internet&apos;; else
			return &quot;PH&quot;;
		break;	

		case &quot;0063&quot;:
			// http://hl7.org/fhir/ValueSet/patient-contact-relationship
			// (SN) Partial list
			if (&apos;parent&apos; == code) return &apos;PAR&apos;; else
			if (&apos;MTH&apos; == code) return &apos;MTH&apos;; else
			if (&apos;FTH&apos; == code) return &apos;FTH&apos;; else	
			if (&apos;caregiver&apos; == code) return &apos;CGV&apos;; else
			if (&apos;SPS&apos; == code) return &apos;SPO&apos;; else
			if (&apos;CHILD&apos; == code) return &apos;CHD&apos;; else
			if (&apos;GRNDCHILD&apos; == code) return &apos;GCH&apos;; else
			if (&apos;GRPRN&apos; == code) return &apos;GRP&apos;; else
			if (&apos;SIB&apos; == code) return &apos;SIB&apos;; else
			if (&apos;BRO&apos; == code) return &apos;BRO&apos;; else
			if (&apos;SIS&apos; == code) return &apos;SIS&apos;; else
			if (&apos;friend&apos; == code) return &apos;FND&apos;; else
			if (&apos;ONESELF&apos; == code) return &apos;SEL&apos;; else
			if (&apos;emergency&apos; == code) return &apos;EMC&apos;; else
			return &apos;UNK&apos;;		
		break;
		default:
			return &apos;U&apos;;
	}


}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.9.1">
            <id>fc481186-afaa-447b-822c-f0ba6980e3b2</id>
            <name>Database</name>
            <revision>1</revision>
            <lastModified>
              <time>1682597479385</time>
              <timezone>America/Bogota</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>0c4728b1-b0fa-4d99-9d0b-640e73a77e22</string>
              <string>feecaa3a-dba6-468b-a5b7-7379e6965d53</string>
              <string>bfe36ced-a6f7-44e7-af45-5837f11b3bad</string>
              <string>4a11b6f9-2a70-45a4-85ef-7949937ff063</string>
              <string>f4c513ef-f1ab-470a-bff5-d505363dd0cb</string>
              <string>a34ca889-a825-42c2-b8d2-eade79050a7b</string>
              <string>e28b6034-657f-44fe-bdfb-2eb08f6b8b9d</string>
              <string>8bf57726-afe4-4bf2-ab11-a811a2a90173</string>
              <string>8744071f-c37e-4836-91e5-09c33fc3fc6c</string>
              <string>138c30fb-34bf-4b61-b178-41a23b895682</string>
              <string>48871745-b660-4892-a5d6-d0a07002ee34</string>
              <string>c493d457-70a0-4f4c-a937-0488ff6a4535</string>
              <string>44fa8b92-bea5-4ca9-bc34-fba837df1f3e</string>
              <string>9a05a6d3-f67e-4e8d-a5c8-eeddecacea4f</string>
              <string>03226d36-9fd4-49ce-a918-28b4fb9517b3</string>
              <string>1ef6c048-d7a7-4702-a9fa-88c3929f28d7</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>1e31ed90-0f2c-4950-8183-3d297d3a02a7</string>
              <string>53ad5032-6ea6-475f-b483-c26cedbc43f2</string>
              <string>bf34b389-a73d-441f-9590-7d7f243ad5b5</string>
              <string>698319a5-6a40-439f-a2fc-77968f8fd8b0</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.9.1">
                <id>f2b08362-f366-4e5d-8c62-4b9d2977a71a</id>
                <name>Get_Informix_Connection</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597480996</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
JavaScript function to centralise creation of a database connection. The
connection won&apos;t be open, the caller still needs to do this but all constants
will be instantiated here

@return dbConn returns an instance of a returns a new DatabaseConnection object
*/
function Get_Informix_Connection() {

var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;com.informix.jdbc.IfxDriver&apos;, &apos;jdbc:informix-sqli://10.192.176.57:1526/orion_clinic:INFORMIXSERVER=dboc&apos;, &apos;consultaocli&apos;, &apos;hdrsanjuan&apos;);

return dbConn;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.9.1">
            <id>0db3684b-ca1c-42a3-b4ac-5979f6d90156</id>
            <name>DateLibrary</name>
            <revision>1</revision>
            <lastModified>
              <time>1682597479357</time>
              <timezone>America/Bogota</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>20771cf2-84cd-48f7-b644-387ca3be7286</string>
              <string>95542362-d5fa-4ab6-9bad-ec1b8e7158c3</string>
              <string>747034d1-3b67-4648-b61d-97569079ec4f</string>
              <string>8744071f-c37e-4836-91e5-09c33fc3fc6c</string>
              <string>2c39ba37-5558-4b03-8572-9d598615d6f5</string>
              <string>f0b5344f-fef0-492d-aa30-343d586964cd</string>
              <string>eb46a988-ef28-438f-85a8-79ff448dbfa8</string>
              <string>03226d36-9fd4-49ce-a918-28b4fb9517b3</string>
              <string>278077bd-06c4-4367-8e98-793b88f53108</string>
              <string>dd2306fc-2fd7-4a27-a082-5f8c481ec5c6</string>
              <string>7976a968-87c0-4231-9d07-d96b7000f9ab</string>
              <string>d0c614a3-7f92-4fcd-ae3e-a875f29df996</string>
              <string>db202450-62ae-4257-b9d1-c482a5ec516b</string>
              <string>fb12c5ab-a29f-434c-9849-957ffb52b0fb</string>
              <string>0c4728b1-b0fa-4d99-9d0b-640e73a77e22</string>
              <string>20accf86-8a52-47c2-b436-974981161d93</string>
              <string>0ee1b38b-9693-49cc-a93f-d83c2162abea</string>
              <string>0d1732eb-79c8-47b1-a829-58be289cee1f</string>
              <string>f4c513ef-f1ab-470a-bff5-d505363dd0cb</string>
              <string>049fa85e-9f9b-4f3a-8ccf-f970405e2ff5</string>
              <string>698319a5-6a40-439f-a2fc-77968f8fd8b0</string>
              <string>cbd38b8f-9f4f-45d0-842b-f7953d49a9e9</string>
              <string>a34ca889-a825-42c2-b8d2-eade79050a7b</string>
              <string>e28b6034-657f-44fe-bdfb-2eb08f6b8b9d</string>
              <string>8bf57726-afe4-4bf2-ab11-a811a2a90173</string>
              <string>7f99cb7e-9df9-4f60-9035-692e83174470</string>
              <string>342b2c7f-9e89-4e32-bcd5-2b3df76c5368</string>
              <string>57123153-b415-4444-899e-5fb7f5fbe722</string>
              <string>1ef6c048-d7a7-4702-a9fa-88c3929f28d7</string>
              <string>83e1c3c5-b377-47cf-89d5-71d6251deee4</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.9.1">
                <id>5aca6564-b2be-480e-8f40-9f99e811ad34</id>
                <name>DateFHIRToHl7</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597480587</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
// HL7 formate yyyy/MM/ddTHH:mm:ss
function DateFHIRToHl7(dateInFhir) {

	channelMap.put(&apos;dateInFhir&apos;,dateInFhir);
	channelMap.put(&apos;year&apos;,dateInFhir.substring(0,4));
	channelMap.put(&apos;MM&apos;,dateInFhir.substring(5,7));
	channelMap.put(&apos;dd&apos;,dateInFhir.substring(8,10));
	channelMap.put(&apos;HH&apos;,dateInFhir.substring(11,13));
	channelMap.put(&apos;mm&apos;,dateInFhir.substring(14,16));
	channelMap.put(&apos;ss&apos;,dateInFhir.substring(17,19));
	
	
	var HL7date =new Date(dateInFhir.substring(0,4),
	dateInFhir.substring(5,7),
	dateInFhir.substring(8,10),
	dateInFhir.substring(11,13),
	dateInFhir.substring(14,16),
	dateInFhir.substring(17,19)).getTime();
    

    return HL7date;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.9.1">
                <id>606eef4c-b703-4a5b-8cc0-aa68be7294c0</id>
                <name>DateHL7ToFHIR</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597479605</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
// HL7 formate yyyyMMddHHmmss
function DateHL7ToFHIR(DateHL7) {
	
	var FHIRdate = &apos;&apos;;
    FHIRdate += DateHL7.substring(0,4) + &apos;/&apos;;
    FHIRdate += DateHL7.substring(4,6) + &apos;/&apos;;
   FHIRdate += DateHL7.substring(6,8) + &apos;T&apos;;
   
   if(DateHL7.substring(8,10)){
   FHIRdate += DateHL7.substring(8,10) + &apos;:&apos;;
   }else {FHIRdate +=&apos;00:&apos;;}

     if(DateHL7.substring(10,12)){
   FHIRdate += DateHL7.substring(8,10) + &apos;:&apos;;
   }else {FHIRdate +=&apos;00:&apos;;}

   
     if(DateHL7.substring(12,14)){
   FHIRdate += DateHL7.substring(8,10) + &apos;:&apos;;
   }else {FHIRdate +=&apos;00&apos;;}
   

   
    FHIRdate += &apos;+GMT&apos;;
    return FHIRdate;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.9.1">
            <id>f77712da-d430-4a36-88e2-815d59b91885</id>
            <name>HL7_Limbach_DEV</name>
            <revision>1</revision>
            <lastModified>
              <time>1682597479366</time>
              <timezone>America/Bogota</timezone>
            </lastModified>
            <description>HL7</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>0c4728b1-b0fa-4d99-9d0b-640e73a77e22</string>
              <string>0ee1b38b-9693-49cc-a93f-d83c2162abea</string>
              <string>f4c513ef-f1ab-470a-bff5-d505363dd0cb</string>
              <string>698319a5-6a40-439f-a2fc-77968f8fd8b0</string>
              <string>747034d1-3b67-4648-b61d-97569079ec4f</string>
              <string>a34ca889-a825-42c2-b8d2-eade79050a7b</string>
              <string>e28b6034-657f-44fe-bdfb-2eb08f6b8b9d</string>
              <string>8bf57726-afe4-4bf2-ab11-a811a2a90173</string>
              <string>8744071f-c37e-4836-91e5-09c33fc3fc6c</string>
              <string>03226d36-9fd4-49ce-a918-28b4fb9517b3</string>
              <string>278077bd-06c4-4367-8e98-793b88f53108</string>
              <string>dd2306fc-2fd7-4a27-a082-5f8c481ec5c6</string>
              <string>1ef6c048-d7a7-4702-a9fa-88c3929f28d7</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.9.1">
                <id>8c993702-d5a3-47d5-ad5d-3a24f76fc080</id>
                <name>Update Response from RD to FireBird DB</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597481968</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function processRDResponse(senderRefReceived){
	var endingPosOfHeadId = senderRefReceived.indexOf(&quot;episodeId:&quot;);
	var headIdForSenderReference = senderRefReceived.substring(7, endingPosOfHeadId);
	var endingPosOfEpisodeId = senderRefReceived.indexOf(&quot;originalMessage:&quot;);
	var episodeIdForSenderReference = senderRefReceived.substring(endingPosOfHeadId+10, endingPosOfEpisodeId);
	var senderReferenceOrg = senderRefReceived.substring(endingPosOfEpisodeId+16);
	logger.debug(&quot;Channel 6 and Poll : Episode ID:  &quot;+episodeIdForSenderReference);	
	var text = getTEXTFromBEFUND_TEXTE(headIdForSenderReference, episodeIdForSenderReference, &quot;KB&quot;);
	if(!(input.report == &quot;&quot; || input.report == null)){
		text = text +&quot;\n&quot;+ input.report;
		logger.debug(&quot;Channel 6_D text from BEFUND_TEXTE: &quot;+text);
		updateTEXTInBEFUND_TEXTE(headIdForSenderReference, episodeIdForSenderReference, text, &quot;KB&quot;); //Shoudl be KB
		updateDetailsBEFUND_KOPF(headIdForSenderReference, episodeIdForSenderReference, &quot;CM&quot;);		
	}
	
}


/*
	The function updateDetailsBEFUND_KOPF updates the table BEFUND_KOPF
*/
function updateDetailsBEFUND_KOPF(headId, episodeId, befundStatus){
	logger.debug(&quot;Channel 6 and Poll : function updateDetailsBEFUND_KOPF headId:&quot;+headId+&quot; episodeId:&quot;+episodeId+&quot; befundStatus:&quot;+befundStatus);
	var DBCONToUpdateTEXT = getFireBirdConnection();
	try{
		var DBCONToUpdateTEXT = getFireBirdConnection();
		var SQLToUpdateTEXT = &quot;Update BEFUND_KOPF set STATUS_DRUCK=&apos;&apos;, STATUS_DATEI=&apos;N&apos; where LABOR_NUMMER=&quot;+episodeId+&quot; and ID=&quot;+headId+&quot; and BEFUND_STATUS=&apos;&quot;+befundStatus+&quot;&apos;;&quot;;
		logger.debug(&quot;Channel 6 and Poll : Query executed to update the BEFUND_KOPF: &quot;+SQLToUpdateTEXT);
		var res_TEXT_List = DBCONToUpdateTEXT.executeUpdate(SQLToUpdateTEXT);
		DBCONToUpdateTEXT.close();
	}catch(ex){
		logger.error(&quot;Error in executing the update statement:&quot;+SQLToUpdateTEXT);
		DBCONToUpdateTEXT.close();
		throw ex;
	}
}

/*
	The function updateTEXTInBEFUND_TEXTE updates the table BEFUND_TEXTE or insert&apos;s a new row to it.
*/
function updateTEXTInBEFUND_TEXTE(headId, episodeId, text, text_art){
	var DBCONToUpdateTEXT = getFireBirdConnection();
	try{
		var DBCONToUpdateTEXT = getFireBirdConnection();
		var SQLToUpdateTEXT = &quot;update BEFUND_TEXTE set TEXT = &apos;&quot;+text+&quot;&apos; where LABOR_NUMMER=&quot;+episodeId+&quot; and BEFKOPFID=&quot;+headId+&quot; and TEXT_ART=&apos;&quot;+text_art+&quot;&apos;;&quot;;
		logger.debug(&quot;Channel 6 and Poll : Query executed to update the updateTEXTInBEFUND_TEXTE: &quot;+SQLToUpdateTEXT);
		var resOfUpdateTEXT = DBCONToUpdateTEXT.executeUpdate(SQLToUpdateTEXT);
		logger.debug(&quot;Channel 6 and Poll : Value of the result s&quot;+resOfUpdateTEXT);
		DBCONToUpdateTEXT.close();	
		DBCONToUpdateTEXT = getFireBirdConnection();
		if(resOfUpdateTEXT == 0){ 
			var SQLToInsertTEXT = &quot;INSERT INTO BEFUND_TEXTE (BEFKOPFID, LABOR_NUMMER, LFDNR_AUFTRAG, PROBE_ID, TEXT_ART, TEXT) VALUES (&quot;+headId+&quot;,&quot;+episodeId+&quot;, Null , Null, &apos;KB&apos;, &apos;&quot;+text+&quot;&apos;);&quot;;
			logger.debug(&quot;Channel 6 and Poll : Query executed to update the Insert into BEFUND_TEXTE: &quot;+SQLToInsertTEXT);
			var resOfInserteTEXT = DBCONToUpdateTEXT.executeUpdate(SQLToInsertTEXT);
			logger.debug(&quot;Channel 6 and Poll : Value of the result s&quot;+resOfInserteTEXT);	
		}
		DBCONToUpdateTEXT.close();	
		
	}catch(ex){
		logger.error(&quot; Error in executing the update statement:&quot;+SQLToUpdateTEXT);
		DBCONToUpdateTEXT.close();
		throw ex;
	}
}

/*
	Generic function to get a new FireBird Connection. 
*/
function getFireBirdConnection(){
	var FbDriver =  configurationMap.get(&quot;FbDriver&quot;);
	var FbUrl  = configurationMap.get(&quot;FbUrl&quot;);
	var FbUsername = configurationMap.get(&quot;FbUsername&quot;);
	var FbPw  = configurationMap.get(&quot;FbPw&quot;);

	var DBCON = DatabaseConnectionFactory.createDatabaseConnection(FbDriver,FbUrl,FbUsername,FbPw); 
	return DBCON;
}

/*
	The function getTEXTFromBEFUND_TEXTE gets the value of TEXT from the table BEFUND_TEXTE.
*/
function getTEXTFromBEFUND_TEXTE(headId, episodeId, text_art){
	var text = &quot;&quot;;
	var DBCONToGetTEXT = getFireBirdConnection();
	try{
		var SQLToGetTEXT = &quot;select TEXT from BEFUND_TEXTE where LABOR_NUMMER=&quot;+episodeId+&quot; and BEFKOPFID=&quot;+headId+&quot; and TEXT_ART=&apos;&quot;+text_art+&quot;&apos;;&quot;;
		logger.debug(&quot;Channel 6 and Poll : Query executed to get the TEXT: &quot;+SQLToGetTEXT);
		var res_TEXT_List = DBCONToGetTEXT.executeCachedQuery(SQLToGetTEXT);
		var size_TEXT_List = res_TEXT_List.size();
		if (size_TEXT_List &gt;0){
			for(var i = 0;i&lt;size_TEXT_List;i++){
				res_TEXT_List.next();
				text = res_TEXT_List.getString(&quot;TEXT&quot;);
			}
		}
		DBCONToGetTEXT.close();	
	}catch(ex){
		logger.error(&quot;Error in executing the get TEXT statement:&quot;+SQLToGetTEXT);
		DBCONToGetTEXT.close();	
		throw ex;
	}
	return text;	
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.9.1">
            <id>833c5444-6415-4d62-a76b-caa39589c2fa</id>
            <name>Mirth</name>
            <revision>1</revision>
            <lastModified>
              <time>1682597479347</time>
              <timezone>America/Bogota</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>0c4728b1-b0fa-4d99-9d0b-640e73a77e22</string>
              <string>0ee1b38b-9693-49cc-a93f-d83c2162abea</string>
              <string>f4c513ef-f1ab-470a-bff5-d505363dd0cb</string>
              <string>698319a5-6a40-439f-a2fc-77968f8fd8b0</string>
              <string>747034d1-3b67-4648-b61d-97569079ec4f</string>
              <string>a34ca889-a825-42c2-b8d2-eade79050a7b</string>
              <string>e28b6034-657f-44fe-bdfb-2eb08f6b8b9d</string>
              <string>8bf57726-afe4-4bf2-ab11-a811a2a90173</string>
              <string>8744071f-c37e-4836-91e5-09c33fc3fc6c</string>
              <string>03226d36-9fd4-49ce-a918-28b4fb9517b3</string>
              <string>278077bd-06c4-4367-8e98-793b88f53108</string>
              <string>dd2306fc-2fd7-4a27-a082-5f8c481ec5c6</string>
              <string>1ef6c048-d7a7-4702-a9fa-88c3929f28d7</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.9.1">
                <id>b9eceb1d-8abb-4931-8247-209d70519f99</id>
                <name>Fix HL7v2 Node Order</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597479881</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*

	See issue: http://www.mirthcorp.com/community/issues/browse/MIRTH-625

	Author: Nick Rupley
	Date Modified: 4/18/2012

	fixHL7NodeOrder: Returns a new E4X node where the order of all siblings and descendants have been fixed as per the Mirth HL7 dot notation convention.

	Arguments
	---------
		Required
		--------
		node: The node to be fixed. 
*/
function fixHL7NodeOrder(node) {
	// Create output node
	var newNode = new XML();
	// In case the node is an XMLList of multiple siblings, loop through each sibling
	for each (sibling in node) {
		// Create new sibling node
		var newSibling = new XML(&apos;&lt;&apos;+sibling.name().toString()+&apos;/&gt;&apos;);
		// Iterate through each child node
		for each (child in sibling.children())
			// If the child has its own children, then recursively fix the node order of the child
			if (child.hasComplexContent())
				newSibling.appendChild(fixHL7NodeOrder(child));
			// If the child doesn&apos;t have its own children, then just add the child to the new sibling node
			else
				newSibling.appendChild(child);
		// After recursively fixing all of the child nodes, now we&apos;ll fix the current node
		newNode += sortHL7Node(newSibling);
	}
	// Return the fixed node
	return newNode;
}

function sortHL7Node(node) {
	// If the node has no children, then there&apos;s nothing to sort
	if (node.hasSimpleContent())
		return node;
	// Create new output node
	var newNode = new XML(&apos;&lt;&apos;+node.name().toString()+&apos;/&gt;&apos;);
	// Iterate through each child in the node
	for each (child in node.children()) {
		// If the child has a QName, then we can sort on it
		if (child.name()) {
			// Get the current &quot;index&quot; of the child. Id est, if the QName is PID.3.1, then the index is 1
			curChildIndex = parseInt(child.name().toString().substring(child.name().toString().lastIndexOf(&apos;.&apos;)+1),10);
			// Boolean placeholder
			var inserted = false;
			// Iterate through each child currently in the NEW node
			for (var i = 0; i &lt;= newNode.children().length()-1; i++) {
				// Get the index of the child of the new node
				loopChildIndex = parseInt(newNode.child(i).name().toString().substring(newNode.child(i).name().toString().lastIndexOf(&apos;.&apos;)+1),10);
				// If the child we want to insert has a lower index then the current child of the new node, then we&apos;re going to insert the child 
				// right before the current newNode child
				if (curChildIndex &lt; loopChildIndex) {
					// Insert the child
					newNode.insertChildBefore(newNode.children()[i],child);
					// Set our flag, indicating that an insertion was made
					inserted = true;
					// No need to continue iteration
					break;
				}
			}
			// If no insertion was made, then the index of the child we want to insert is greater than or equal to all of the
			// indices of the children that have already been inserted in newNode. So, we&apos;ll just append the child to the end.
			if (!inserted)
				newNode.appendChild(child);
		}
	}
	// Return the sorted HL7 node
	return newNode;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
      </exportData>
    </channel>
    <channel version="3.9.1">
      <id>6df4f01c-e2ee-400b-8f23-547df6db1358</id>
      <nextMetaDataId>10</nextMetaDataId>
      <name>File Reader</name>
      <description>File reader for offline analysis data</description>
      <revision>2</revision>
      <sourceConnector version="3.9.1">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.file.FileReceiverProperties" version="3.9.1">
          <pluginProperties/>
          <pollConnectorProperties version="3.9.1">
            <pollingType>INTERVAL</pollingType>
            <pollOnStart>true</pollOnStart>
            <pollingFrequency>300000</pollingFrequency>
            <pollingHour>0</pollingHour>
            <pollingMinute>0</pollingMinute>
            <cronJobs/>
            <pollConnectorPropertiesAdvanced>
              <weekly>true</weekly>
              <inactiveDays>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
              </inactiveDays>
              <dayOfMonth>1</dayOfMonth>
              <allDay>false</allDay>
              <startingHour>8</startingHour>
              <startingMinute>0</startingMinute>
              <endingHour>12</endingHour>
              <endingMinute>0</endingMinute>
            </pollConnectorPropertiesAdvanced>
          </pollConnectorProperties>
          <sourceConnectorProperties version="3.9.1">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>true</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
          <scheme>FILE</scheme>
          <host>${CDS_Source_Dir}</host>
          <fileFilter>*</fileFilter>
          <regex>false</regex>
          <directoryRecursion>false</directoryRecursion>
          <ignoreDot>true</ignoreDot>
          <anonymous>true</anonymous>
          <username>anonymous</username>
          <password>anonymous</password>
          <timeout>10000</timeout>
          <secure>true</secure>
          <passive>true</passive>
          <validateConnection>true</validateConnection>
          <afterProcessingAction>MOVE</afterProcessingAction>
          <moveToDirectory>${CDS_Source_Dir}/processed</moveToDirectory>
          <moveToFileName>${originalFilename}</moveToFileName>
          <errorReadingAction>MOVE</errorReadingAction>
          <errorResponseAction>MOVE</errorResponseAction>
          <errorMoveToDirectory>${CDS_Source_Dir}/error</errorMoveToDirectory>
          <errorMoveToFileName>${originalFilename}</errorMoveToFileName>
          <checkFileAge>false</checkFileAge>
          <fileAge>1000</fileAge>
          <fileSizeMinimum>0</fileSizeMinimum>
          <fileSizeMaximum></fileSizeMaximum>
          <ignoreFileSizeMaximum>true</ignoreFileSizeMaximum>
          <sortBy>date</sortBy>
          <binary>false</binary>
          <charsetEncoding>UTF-8</charsetEncoding>
        </properties>
        <transformer version="3.9.1">
          <elements>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>BIS PatientID</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <variable>BIS PatientID</variable>
              <mapping>msg[&apos;row&apos;][&apos;column1&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>CDS PatientFamilyName</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>true</enabled>
              <variable>CDS PatientFamilyName</variable>
              <mapping>msg[&apos;row&apos;][&apos;column2&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>CDS PatientGivenName</name>
              <sequenceNumber>2</sequenceNumber>
              <enabled>true</enabled>
              <variable>CDS PatientGivenName</variable>
              <mapping>msg[&apos;row&apos;][&apos;column3&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>CDS PatientTitle</name>
              <sequenceNumber>3</sequenceNumber>
              <enabled>true</enabled>
              <variable>CDS PatientTitle</variable>
              <mapping>msg[&apos;row&apos;][&apos;column4&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.9.1">
              <name>CDS PatientDOB</name>
              <sequenceNumber>4</sequenceNumber>
              <enabled>true</enabled>
              <script>var CDS_PatientDOB = msg[&apos;row&apos;][&apos;column5&apos;].toString();

if (CDS_PatientDOB != null &amp;&amp; CDS_PatientDOB != &apos;&apos; &amp;&amp; CDS_PatientDOB != &quot;Deleted&quot;) {
  CDS_PatientDOB = DateUtil.convertDate($(&apos;CDS_Date_Format&apos;), &quot;yyyy-MM-dd&quot;, CDS_PatientDOB);
} else if (CDS_PatientDOB == &quot;Deleted&quot;) {
  CDS_PatientDOB = CDS_PatientDOB;
} else {
  CDS_PatientDOB = null;
}

channelMap.put(&apos;CDS PatientDOB&apos;,CDS_PatientDOB);</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>CDS PatientSex</name>
              <sequenceNumber>5</sequenceNumber>
              <enabled>true</enabled>
              <variable>CDS PatientSex</variable>
              <mapping>msg[&apos;row&apos;][&apos;column6&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>CDS PatientStreetAddress</name>
              <sequenceNumber>6</sequenceNumber>
              <enabled>true</enabled>
              <variable>CDS PatientStreetAddress</variable>
              <mapping>msg[&apos;row&apos;][&apos;column7&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>CDS PatientCity</name>
              <sequenceNumber>7</sequenceNumber>
              <enabled>true</enabled>
              <variable>CDS PatientCity</variable>
              <mapping>msg[&apos;row&apos;][&apos;column8&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>CDS PatientPostalCode</name>
              <sequenceNumber>8</sequenceNumber>
              <enabled>true</enabled>
              <variable>CDS PatientPostalCode</variable>
              <mapping>msg[&apos;row&apos;][&apos;column9&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>CDS PatientState</name>
              <sequenceNumber>9</sequenceNumber>
              <enabled>true</enabled>
              <variable>CDS PatientState</variable>
              <mapping>msg[&apos;row&apos;][&apos;column10&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>CDS PatientCountry</name>
              <sequenceNumber>10</sequenceNumber>
              <enabled>true</enabled>
              <variable>CDS PatientCountry</variable>
              <mapping>msg[&apos;row&apos;][&apos;column11&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>CDS PatientStatus</name>
              <sequenceNumber>11</sequenceNumber>
              <enabled>true</enabled>
              <variable>CDS PatientStatus</variable>
              <mapping>msg[&apos;row&apos;][&apos;column12&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>CDS PatientPregnancyFlag</name>
              <sequenceNumber>12</sequenceNumber>
              <enabled>true</enabled>
              <variable>CDS PatientPregnancyFlag</variable>
              <mapping>msg[&apos;row&apos;][&apos;column13&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>CDS PatientFastingFlag</name>
              <sequenceNumber>13</sequenceNumber>
              <enabled>true</enabled>
              <variable>CDS PatientFastingFlag</variable>
              <mapping>msg[&apos;row&apos;][&apos;column14&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>CDS EpisodeID</name>
              <sequenceNumber>14</sequenceNumber>
              <enabled>true</enabled>
              <variable>CDS EpisodeID</variable>
              <mapping>msg[&apos;row&apos;][&apos;column15&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>CDS EpisodeOrderedTests</name>
              <sequenceNumber>15</sequenceNumber>
              <enabled>true</enabled>
              <variable>CDS EpisodeOrderedTests</variable>
              <mapping>msg[&apos;row&apos;][&apos;column16&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>CDS EpisodeClinicalNotes</name>
              <sequenceNumber>16</sequenceNumber>
              <enabled>true</enabled>
              <variable>CDS EpisodeClinicalNotes</variable>
              <mapping>msg[&apos;row&apos;][&apos;column17&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>CDS AccountType</name>
              <sequenceNumber>17</sequenceNumber>
              <enabled>true</enabled>
              <variable>CDS AccountType</variable>
              <mapping>msg[&apos;row&apos;][&apos;column18&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>CDS AccountClass</name>
              <sequenceNumber>18</sequenceNumber>
              <enabled>true</enabled>
              <variable>CDS AccountClass</variable>
              <mapping>msg[&apos;row&apos;][&apos;column19&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>CDS BillTo</name>
              <sequenceNumber>19</sequenceNumber>
              <enabled>true</enabled>
              <variable>CDS BillTo</variable>
              <mapping>msg[&apos;row&apos;][&apos;column20&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>CDS BillingAddress</name>
              <sequenceNumber>20</sequenceNumber>
              <enabled>true</enabled>
              <variable>CDS BillingAddress</variable>
              <mapping>msg[&apos;row&apos;][&apos;column21&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>CDS PatientPublicHealthIdentifier</name>
              <sequenceNumber>21</sequenceNumber>
              <enabled>true</enabled>
              <variable>CDS PatientPublicHealthIdentifier</variable>
              <mapping>msg[&apos;row&apos;][&apos;column22&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>CDS EpisodePublicScheduleCode</name>
              <sequenceNumber>22</sequenceNumber>
              <enabled>true</enabled>
              <variable>CDS EpisodePublicScheduleCode</variable>
              <mapping>msg[&apos;row&apos;][&apos;column23&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>CDS PatientPrivateHealthFundName</name>
              <sequenceNumber>23</sequenceNumber>
              <enabled>true</enabled>
              <variable>CDS PatientPrivateHealthFundName</variable>
              <mapping>msg[&apos;row&apos;][&apos;column24&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>CDS PatientPrivateHealthFundID</name>
              <sequenceNumber>24</sequenceNumber>
              <enabled>true</enabled>
              <variable>CDS PatientPrivateHealthFundID</variable>
              <mapping>msg[&apos;row&apos;][&apos;column25&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>CDS ReqPhysicianID</name>
              <sequenceNumber>25</sequenceNumber>
              <enabled>true</enabled>
              <variable>CDS ReqPhysicianID</variable>
              <mapping>msg[&apos;row&apos;][&apos;column26&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>CDS ReqPhysicianName</name>
              <sequenceNumber>26</sequenceNumber>
              <enabled>true</enabled>
              <variable>CDS ReqPhysicianName</variable>
              <mapping>msg[&apos;row&apos;][&apos;column27&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>CDS ReqPhysicianSpeciality</name>
              <sequenceNumber>27</sequenceNumber>
              <enabled>true</enabled>
              <variable>CDS ReqPhysicianSpeciality</variable>
              <mapping>msg[&apos;row&apos;][&apos;column28&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>CDS ReqPhysicianDeliveryAddress</name>
              <sequenceNumber>28</sequenceNumber>
              <enabled>true</enabled>
              <variable>CDS ReqPhysicianDeliveryAddress</variable>
              <mapping>msg[&apos;row&apos;][&apos;column29&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>CDS SugeryName</name>
              <sequenceNumber>29</sequenceNumber>
              <enabled>true</enabled>
              <variable>CDS SugeryName</variable>
              <mapping>msg[&apos;row&apos;][&apos;column30&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>CDS SurgeryCode</name>
              <sequenceNumber>30</sequenceNumber>
              <enabled>true</enabled>
              <variable>CDS SurgeryCode</variable>
              <mapping>msg[&apos;row&apos;][&apos;column31&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>CDS SurgeryAddress</name>
              <sequenceNumber>31</sequenceNumber>
              <enabled>true</enabled>
              <variable>CDS SurgeryAddress</variable>
              <mapping>msg[&apos;row&apos;][&apos;column32&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>CDS SurgeryPostalCode</name>
              <sequenceNumber>32</sequenceNumber>
              <enabled>true</enabled>
              <variable>CDS SurgeryPostalCode</variable>
              <mapping>msg[&apos;row&apos;][&apos;column33&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>CDS CopyPhysicianIDList</name>
              <sequenceNumber>33</sequenceNumber>
              <enabled>true</enabled>
              <variable>CDS CopyPhysicianIDList</variable>
              <mapping>msg[&apos;row&apos;][&apos;column34&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>CDS CopyPhysicianNameList</name>
              <sequenceNumber>34</sequenceNumber>
              <enabled>true</enabled>
              <variable>CDS CopyPhysicianNameList</variable>
              <mapping>msg[&apos;row&apos;][&apos;column35&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>CDS PanelIndicator</name>
              <sequenceNumber>35</sequenceNumber>
              <enabled>true</enabled>
              <variable>CDS PanelIndicator</variable>
              <mapping>msg[&apos;row&apos;][&apos;column36&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>CDS PanelID</name>
              <sequenceNumber>36</sequenceNumber>
              <enabled>true</enabled>
              <variable>CDS PanelID</variable>
              <mapping>msg[&apos;row&apos;][&apos;column37&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>CDS PanelName</name>
              <sequenceNumber>37</sequenceNumber>
              <enabled>true</enabled>
              <variable>CDS PanelName</variable>
              <mapping>msg[&apos;row&apos;][&apos;column38&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>BIS SampleID</name>
              <sequenceNumber>38</sequenceNumber>
              <enabled>true</enabled>
              <variable>BIS SampleID</variable>
              <mapping>msg[&apos;row&apos;][&apos;column39&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>CDS SampleFluidType</name>
              <sequenceNumber>39</sequenceNumber>
              <enabled>true</enabled>
              <variable>CDS SampleFluidType</variable>
              <mapping>msg[&apos;row&apos;][&apos;column40&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>BIS SampleOriginLocation</name>
              <sequenceNumber>40</sequenceNumber>
              <enabled>true</enabled>
              <variable>BIS SampleOriginLocation</variable>
              <mapping>msg[&apos;row&apos;][&apos;column41&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>CDS SampleOriginSubLocation</name>
              <sequenceNumber>41</sequenceNumber>
              <enabled>true</enabled>
              <variable>CDS SampleOriginSubLocation</variable>
              <mapping>msg[&apos;row&apos;][&apos;column42&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.9.1">
              <name>CDS SampleCollectionDateTime</name>
              <sequenceNumber>42</sequenceNumber>
              <enabled>true</enabled>
              <script>var SampleCollectionDateTime = msg[&apos;row&apos;][&apos;column43&apos;].toString();

if (SampleCollectionDateTime != null &amp;&amp; SampleCollectionDateTime != &apos;&apos;) {
	SampleCollectionDateTime = DateUtil.convertDate($(&apos;CDS_Datetime_Format&apos;), &quot;yyyy-MM-dd HH:mm:ss&quot;, SampleCollectionDateTime);
}
channelMap.put(&quot;CDS SampleCollectionDateTime&quot;, SampleCollectionDateTime);</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>CDS SampleCollectionMethod</name>
              <sequenceNumber>43</sequenceNumber>
              <enabled>true</enabled>
              <variable>CDS SampleCollectionMethod</variable>
              <mapping>msg[&apos;row&apos;][&apos;column44&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.9.1">
              <name>BIS TestSiteSampleReceivedDateTime</name>
              <sequenceNumber>44</sequenceNumber>
              <enabled>true</enabled>
              <script>var TestSiteSampleReceivedDateTime = msg[&apos;row&apos;][&apos;column45&apos;].toString();

if (TestSiteSampleReceivedDateTime != null &amp;&amp; TestSiteSampleReceivedDateTime != &apos;&apos;) {
    TestSiteSampleReceivedDateTime = DateUtil.convertDate($(&apos;CDS_Datetime_Format&apos;), &quot;yyyy-MM-dd HH:mm:ss&quot;, TestSiteSampleReceivedDateTime);
}
channelMap.put(&quot;BIS TestSiteSampleReceivedDateTime&quot;, TestSiteSampleReceivedDateTime);</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>BIS TestLISCode</name>
              <sequenceNumber>45</sequenceNumber>
              <enabled>true</enabled>
              <variable>BIS TestLISCode</variable>
              <mapping>msg[&apos;row&apos;][&apos;column46&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>BIS TestLISName</name>
              <sequenceNumber>46</sequenceNumber>
              <enabled>true</enabled>
              <variable>BIS TestLISName</variable>
              <mapping>msg[&apos;row&apos;][&apos;column47&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.9.1">
              <name>CDS TestValue</name>
              <sequenceNumber>47</sequenceNumber>
              <enabled>true</enabled>
              <script>var CDSTestValue =msg[&apos;row&apos;][&apos;column48&apos;].toString()

channelMap.put(&quot;CDS TestValue&quot;, transformTestValue(CDSTestValue));</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.9.1">
              <name>CDS TestNormalRange</name>
              <sequenceNumber>48</sequenceNumber>
              <enabled>true</enabled>
              <script>var CDSTestNormalRange = msg[&apos;row&apos;][&apos;column49&apos;].toString();

channelMap.put(&quot;CDS TestNormalRange&quot;, transformRange(CDSTestNormalRange));</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>CDS TestUnits</name>
              <sequenceNumber>49</sequenceNumber>
              <enabled>true</enabled>
              <variable>CDS TestUnits</variable>
              <mapping>msg[&apos;row&apos;][&apos;column50&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>BIS TestPriority</name>
              <sequenceNumber>50</sequenceNumber>
              <enabled>true</enabled>
              <variable>BIS TestPriority</variable>
              <mapping>msg[&apos;row&apos;][&apos;column51&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>CDS TestDepartment</name>
              <sequenceNumber>51</sequenceNumber>
              <enabled>true</enabled>
              <variable>CDS TestDepartment</variable>
              <mapping>msg[&apos;row&apos;][&apos;column52&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>BIS TestInstrument</name>
              <sequenceNumber>52</sequenceNumber>
              <enabled>true</enabled>
              <variable>BIS TestInstrument</variable>
              <mapping>msg[&apos;row&apos;][&apos;column53&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>CDS TestRequestSite</name>
              <sequenceNumber>53</sequenceNumber>
              <enabled>true</enabled>
              <variable>CDS TestRequestSite</variable>
              <mapping>msg[&apos;row&apos;][&apos;column54&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>BIS TestSite</name>
              <sequenceNumber>54</sequenceNumber>
              <enabled>true</enabled>
              <variable>BIS TestSite</variable>
              <mapping>msg[&apos;row&apos;][&apos;column55&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>BIS TestType</name>
              <sequenceNumber>55</sequenceNumber>
              <enabled>true</enabled>
              <variable>BIS TestType</variable>
              <mapping>msg[&apos;row&apos;][&apos;column56&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.9.1">
              <name>CDS AbnormalFlag</name>
              <sequenceNumber>56</sequenceNumber>
              <enabled>true</enabled>
              <variable>CDS AbnormalFlag</variable>
              <mapping>msg[&apos;row&apos;][&apos;column57&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.9.1">
              <name>BIS TestOrderedDateTime</name>
              <sequenceNumber>57</sequenceNumber>
              <enabled>true</enabled>
              <script>var TestOrderedDateTime = msg[&apos;row&apos;][&apos;column58&apos;].toString();

if (TestOrderedDateTime &amp;&amp; TestOrderedDateTime != &apos;&apos;) {
	TestOrderedDateTime= DateUtil.convertDate($(&apos;CDS_Datetime_Format&apos;), &quot;yyyy-MM-dd HH:mm:ss&quot;, TestOrderedDateTime);
}
channelMap.put(&quot;BIS TestOrderedDateTime&quot;, TestOrderedDateTime);</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.9.1">
              <name>BIS TestAnalyzerCompletionDateTime</name>
              <sequenceNumber>58</sequenceNumber>
              <enabled>true</enabled>
              <script>var TestAnalyzerCompletionDateTime = msg[&apos;row&apos;][&apos;column59&apos;].toString();

if (TestAnalyzerCompletionDateTime != null &amp;&amp; TestAnalyzerCompletionDateTime != &apos;&apos;) {
    TestAnalyzerCompletionDateTime= DateUtil.convertDate($(&apos;CDS_Datetime_Format&apos;), &quot;yyyy-MM-dd HH:mm:ss&quot;, TestAnalyzerCompletionDateTime);
}

channelMap.put(&quot;BIS TestAnalyzerCompletionDateTime&quot;, TestAnalyzerCompletionDateTime);</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.9.1">
              <name>BIS TestResultFirstReviewedDateTime</name>
              <sequenceNumber>59</sequenceNumber>
              <enabled>true</enabled>
              <script>var TestResultFirstReviewedDateTime= msg[&apos;row&apos;][&apos;column60&apos;].toString();

if (TestResultFirstReviewedDateTime != null &amp;&amp; TestResultFirstReviewedDateTime != &apos;&apos;) {
    TestResultFirstReviewedDateTime= DateUtil.convertDate($(&apos;CDS_Datetime_Format&apos;), &quot;yyyy-MM-dd HH:mm:ss&quot;, TestResultFirstReviewedDateTime);
}

channelMap.put(&quot;BIS TestResultFirstReviewedDateTime&quot;, TestResultFirstReviewedDateTime);</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.9.1">
              <name>BIS TestResultReleasedDateTime</name>
              <sequenceNumber>60</sequenceNumber>
              <enabled>true</enabled>
              <script>var TestResultReleasedDateTime = msg[&apos;row&apos;][&apos;column61&apos;].toString();

if (TestResultReleasedDateTime != null &amp;&amp; TestResultReleasedDateTime != &apos;&apos;) {
    TestResultReleasedDateTime = DateUtil.convertDate($(&apos;CDS_Datetime_Format&apos;), &quot;yyyy-MM-dd HH:mm:ss&quot;, TestResultReleasedDateTime);
}

channelMap.put(&quot;BIS TestResultReleasedDateTime&quot;, TestResultReleasedDateTime);</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.9.1">
              <name>EpisodeDateTime</name>
              <sequenceNumber>61</sequenceNumber>
              <enabled>true</enabled>
              <script>var SampleCollectionDateTime = msg[&apos;row&apos;][&apos;column43&apos;].toString();

if (SampleCollectionDateTime != null &amp;&amp; SampleCollectionDateTime != &apos;&apos;) {
    SampleCollectionDateTime = DateUtil.convertDate($(&apos;CDS_Datetime_Format&apos;), &quot;yyyy-MM-dd HH:mm:ss&quot;, SampleCollectionDateTime);
}

channelMap.put(&quot;EpisodeDateTime&quot;, SampleCollectionDateTime);</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.9.1">
              <name>Generate BIS Filename</name>
              <sequenceNumber>62</sequenceNumber>
              <enabled>true</enabled>
              <script>var batchSequenceId = sourceMap.get(&apos;batchSequenceId&apos;);
if (batchSequenceId == 1) {
	globalMap.put(&quot;BISFileName&quot;, &quot;BIS_&quot; + DateUtil.getCurrentDate(&quot;yyyy-MM-dd-hh-mm-ss_&quot;) + sourceMap.get(&quot;batchId&quot;) + &quot;.tsv&quot;);
}</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.9.1">
              <name>Generate UM Filename</name>
              <sequenceNumber>63</sequenceNumber>
              <enabled>true</enabled>
              <script>var batchSequenceId = sourceMap.get(&apos;batchSequenceId&apos;);
if (batchSequenceId == 1) {
	globalMap.put(&quot;UMFileName&quot;, &quot;UM_&quot; + DateUtil.getCurrentDate(&quot;yyyy-MM-dd-hh-mm-ss_&quot;) + sourceMap.get(&quot;batchId&quot;) + &quot;.tsv&quot;);
}</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64">MjMzMjM3OAlGRUhXQwlXS0xJSkNQCQkxMy8wOC8xOTYxCU0JODFFIENBS05ZS05TRFAgVEVPSF5e
Q09XUUFNV15eMjY4MgkJCQkJCQkJMTA2MzE2MDkJTklERE0JCQkJCQkJCQlUSEFLMQlCaiBNbWdh
cnJzcXFzYiBaaXZuYXFxY2h4CUdQCQkJCQkJCQkwCQkJMTA2MzE2MDkJCQkJMzEvMDUvMjAxMiAx
MToxMDowMAkJCUhiQTFjCUhiQTFjCTUuNwlORUdBVElWCSUJCQkJT1NCCU9TQgkJCTMxLzA1LzIw
MTIgMTE6MTA6MDAJCQk=</inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>DELIMITED</inboundDataType>
          <outboundDataType>DELIMITED</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDataTypeProperties" version="3.9.1">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedSerializationProperties" version="3.9.1">
              <columnDelimiter>\t</columnDelimiter>
              <recordDelimiter>\r</recordDelimiter>
              <quoteToken>&quot;</quoteToken>
              <escapeWithDoubleQuote>false</escapeWithDoubleQuote>
              <quoteEscapeToken>\</quoteEscapeToken>
              <numberedRows>false</numberedRows>
              <ignoreCR>false</ignoreCR>
            </serializationProperties>
            <deserializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDeserializationProperties" version="3.9.1">
              <columnDelimiter>,</columnDelimiter>
              <recordDelimiter>\n</recordDelimiter>
              <quoteToken>&quot;</quoteToken>
              <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
              <quoteEscapeToken>\</quoteEscapeToken>
            </deserializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedBatchProperties" version="3.9.1">
              <splitType>Record</splitType>
              <batchSkipRecords>1</batchSkipRecords>
              <batchMessageDelimiter></batchMessageDelimiter>
              <batchMessageDelimiterIncluded>false</batchMessageDelimiterIncluded>
              <batchGroupingColumn></batchGroupingColumn>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDataTypeProperties" version="3.9.1">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedSerializationProperties" version="3.9.1">
              <columnDelimiter>,</columnDelimiter>
              <recordDelimiter>\n</recordDelimiter>
              <quoteToken>&quot;</quoteToken>
              <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
              <quoteEscapeToken>\</quoteEscapeToken>
              <numberedRows>false</numberedRows>
              <ignoreCR>true</ignoreCR>
            </serializationProperties>
            <deserializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDeserializationProperties" version="3.9.1">
              <columnDelimiter>,</columnDelimiter>
              <recordDelimiter>\n</recordDelimiter>
              <quoteToken>&quot;</quoteToken>
              <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
              <quoteEscapeToken>\</quoteEscapeToken>
            </deserializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedBatchProperties" version="3.9.1">
              <splitType>Record</splitType>
              <batchSkipRecords>0</batchSkipRecords>
              <batchMessageDelimiter></batchMessageDelimiter>
              <batchMessageDelimiterIncluded>false</batchMessageDelimiterIncluded>
              <batchGroupingColumn></batchGroupingColumn>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="3.9.1">
          <elements/>
        </filter>
        <transportName>File Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="3.9.1">
          <metaDataId>6</metaDataId>
          <name>BIS file header</name>
          <properties class="com.mirth.connect.connectors.file.FileDispatcherProperties" version="3.9.1">
            <pluginProperties/>
            <destinationConnectorProperties version="3.9.1">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <scheme>FILE</scheme>
            <host>${CDS_Dest_Dir}</host>
            <outputPattern>${BISFileName}</outputPattern>
            <anonymous>true</anonymous>
            <username>anonymous</username>
            <password>anonymous</password>
            <timeout>10000</timeout>
            <keepConnectionOpen>true</keepConnectionOpen>
            <maxIdleTime>0</maxIdleTime>
            <secure>true</secure>
            <passive>true</passive>
            <validateConnection>true</validateConnection>
            <outputAppend>false</outputAppend>
            <errorOnExists>false</errorOnExists>
            <temporary>false</temporary>
            <binary>false</binary>
            <charsetEncoding>UTF-8</charsetEncoding>
            <template>PatientID	SampleID	SampleOriginLocation	TestPriority	TestOrderedDateTime	TestInstrument	TestLISCode	TestLISName	TestResultFirstReviewedDateTime	TestResultReleasedDateTime	TestSite	TestType	TestAnalyzerCompletionDateTime	TestSiteSampleReceivedDateTime
</template>
          </properties>
          <transformer version="3.9.1">
            <elements/>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>DELIMITED</inboundDataType>
            <outboundDataType>DELIMITED</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDataTypeProperties" version="3.9.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedSerializationProperties" version="3.9.1">
                <columnDelimiter>,</columnDelimiter>
                <recordDelimiter>\n</recordDelimiter>
                <quoteToken>&quot;</quoteToken>
                <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
                <quoteEscapeToken>\</quoteEscapeToken>
                <numberedRows>false</numberedRows>
                <ignoreCR>true</ignoreCR>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDeserializationProperties" version="3.9.1">
                <columnDelimiter>,</columnDelimiter>
                <recordDelimiter>\n</recordDelimiter>
                <quoteToken>&quot;</quoteToken>
                <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
                <quoteEscapeToken>\</quoteEscapeToken>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedBatchProperties" version="3.9.1">
                <splitType>Record</splitType>
                <batchSkipRecords>0</batchSkipRecords>
                <batchMessageDelimiter></batchMessageDelimiter>
                <batchMessageDelimiterIncluded>false</batchMessageDelimiterIncluded>
                <batchGroupingColumn></batchGroupingColumn>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDataTypeProperties" version="3.9.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedSerializationProperties" version="3.9.1">
                <columnDelimiter>,</columnDelimiter>
                <recordDelimiter>\n</recordDelimiter>
                <quoteToken>&quot;</quoteToken>
                <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
                <quoteEscapeToken>\</quoteEscapeToken>
                <numberedRows>false</numberedRows>
                <ignoreCR>true</ignoreCR>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDeserializationProperties" version="3.9.1">
                <columnDelimiter>,</columnDelimiter>
                <recordDelimiter>\n</recordDelimiter>
                <quoteToken>&quot;</quoteToken>
                <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
                <quoteEscapeToken>\</quoteEscapeToken>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedBatchProperties" version="3.9.1">
                <splitType>Record</splitType>
                <batchSkipRecords>0</batchSkipRecords>
                <batchMessageDelimiter></batchMessageDelimiter>
                <batchMessageDelimiterIncluded>false</batchMessageDelimiterIncluded>
                <batchGroupingColumn></batchGroupingColumn>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.9.1">
            <elements/>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>DELIMITED</inboundDataType>
            <outboundDataType>DELIMITED</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDataTypeProperties" version="3.9.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedSerializationProperties" version="3.9.1">
                <columnDelimiter>,</columnDelimiter>
                <recordDelimiter>\n</recordDelimiter>
                <quoteToken>&quot;</quoteToken>
                <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
                <quoteEscapeToken>\</quoteEscapeToken>
                <numberedRows>false</numberedRows>
                <ignoreCR>true</ignoreCR>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDeserializationProperties" version="3.9.1">
                <columnDelimiter>,</columnDelimiter>
                <recordDelimiter>\n</recordDelimiter>
                <quoteToken>&quot;</quoteToken>
                <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
                <quoteEscapeToken>\</quoteEscapeToken>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedBatchProperties" version="3.9.1">
                <splitType>Record</splitType>
                <batchSkipRecords>0</batchSkipRecords>
                <batchMessageDelimiter></batchMessageDelimiter>
                <batchMessageDelimiterIncluded>false</batchMessageDelimiterIncluded>
                <batchGroupingColumn></batchGroupingColumn>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDataTypeProperties" version="3.9.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedSerializationProperties" version="3.9.1">
                <columnDelimiter>,</columnDelimiter>
                <recordDelimiter>\n</recordDelimiter>
                <quoteToken>&quot;</quoteToken>
                <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
                <quoteEscapeToken>\</quoteEscapeToken>
                <numberedRows>false</numberedRows>
                <ignoreCR>true</ignoreCR>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDeserializationProperties" version="3.9.1">
                <columnDelimiter>,</columnDelimiter>
                <recordDelimiter>\n</recordDelimiter>
                <quoteToken>&quot;</quoteToken>
                <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
                <quoteEscapeToken>\</quoteEscapeToken>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedBatchProperties" version="3.9.1">
                <splitType>Record</splitType>
                <batchSkipRecords>0</batchSkipRecords>
                <batchMessageDelimiter></batchMessageDelimiter>
                <batchMessageDelimiterIncluded>false</batchMessageDelimiterIncluded>
                <batchGroupingColumn></batchGroupingColumn>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.9.1">
            <elements>
              <com.mirth.connect.plugins.javascriptrule.JavaScriptRule version="3.9.1">
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>var batchSequenceId = sourceMap.get(&apos;batchSequenceId&apos;);
return batchSequenceId == 1;</script>
              </com.mirth.connect.plugins.javascriptrule.JavaScriptRule>
            </elements>
          </filter>
          <transportName>File Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>false</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
        <connector version="3.9.1">
          <metaDataId>3</metaDataId>
          <name>BIS file generation</name>
          <properties class="com.mirth.connect.connectors.file.FileDispatcherProperties" version="3.9.1">
            <pluginProperties/>
            <destinationConnectorProperties version="3.9.1">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <scheme>FILE</scheme>
            <host>${CDS_Dest_Dir}</host>
            <outputPattern>${BISFileName}</outputPattern>
            <anonymous>true</anonymous>
            <username>anonymous</username>
            <password>anonymous</password>
            <timeout>10000</timeout>
            <keepConnectionOpen>true</keepConnectionOpen>
            <maxIdleTime>0</maxIdleTime>
            <secure>true</secure>
            <passive>true</passive>
            <validateConnection>true</validateConnection>
            <outputAppend>true</outputAppend>
            <errorOnExists>false</errorOnExists>
            <temporary>false</temporary>
            <binary>false</binary>
            <charsetEncoding>UTF-8</charsetEncoding>
            <template>${maps.get(&apos;BIS PatientID&apos;)}	${maps.get(&apos;BIS SampleID&apos;)}	${maps.get(&apos;BIS SampleOriginLocation&apos;)}	${maps.get(&apos;BIS TestPriority&apos;)}	${maps.get(&apos;BIS TestOrderedDateTime&apos;)}	${maps.get(&apos;BIS TestInstrument&apos;)}	${maps.get(&apos;BIS TestLISCode&apos;)}	${maps.get(&apos;BIS TestLISName&apos;)}	${maps.get(&apos;BIS TestResultFirstReviewedDateTime&apos;)}	${maps.get(&apos;BIS TestResultReleasedDateTime&apos;)}	${maps.get(&apos;BIS TestSite&apos;)}	${maps.get(&apos;BIS TestType&apos;)}	${maps.get(&apos;BIS TestAnalyzerCompletionDateTime&apos;)}	${maps.get(&apos;BIS TestSiteSampleReceivedDateTime&apos;)}
</template>
          </properties>
          <transformer version="3.9.1">
            <elements/>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>DELIMITED</inboundDataType>
            <outboundDataType>DELIMITED</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDataTypeProperties" version="3.9.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedSerializationProperties" version="3.9.1">
                <columnDelimiter>\t</columnDelimiter>
                <recordDelimiter>\n</recordDelimiter>
                <quoteToken>&quot;</quoteToken>
                <escapeWithDoubleQuote>false</escapeWithDoubleQuote>
                <quoteEscapeToken>\</quoteEscapeToken>
                <numberedRows>false</numberedRows>
                <ignoreCR>true</ignoreCR>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDeserializationProperties" version="3.9.1">
                <columnDelimiter>,</columnDelimiter>
                <recordDelimiter>\n</recordDelimiter>
                <quoteToken>&quot;</quoteToken>
                <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
                <quoteEscapeToken>\</quoteEscapeToken>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedBatchProperties" version="3.9.1">
                <splitType>Record</splitType>
                <batchSkipRecords>0</batchSkipRecords>
                <batchMessageDelimiter></batchMessageDelimiter>
                <batchMessageDelimiterIncluded>false</batchMessageDelimiterIncluded>
                <batchGroupingColumn></batchGroupingColumn>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDataTypeProperties" version="3.9.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedSerializationProperties" version="3.9.1">
                <columnDelimiter>,</columnDelimiter>
                <recordDelimiter>\n</recordDelimiter>
                <quoteToken>&quot;</quoteToken>
                <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
                <quoteEscapeToken>\</quoteEscapeToken>
                <numberedRows>false</numberedRows>
                <ignoreCR>true</ignoreCR>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDeserializationProperties" version="3.9.1">
                <columnDelimiter>,</columnDelimiter>
                <recordDelimiter>\n</recordDelimiter>
                <quoteToken>&quot;</quoteToken>
                <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
                <quoteEscapeToken>\</quoteEscapeToken>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedBatchProperties" version="3.9.1">
                <splitType>Record</splitType>
                <batchSkipRecords>0</batchSkipRecords>
                <batchMessageDelimiter></batchMessageDelimiter>
                <batchMessageDelimiterIncluded>false</batchMessageDelimiterIncluded>
                <batchGroupingColumn></batchGroupingColumn>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.9.1">
            <elements/>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>DELIMITED</inboundDataType>
            <outboundDataType>DELIMITED</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDataTypeProperties" version="3.9.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedSerializationProperties" version="3.9.1">
                <columnDelimiter>,</columnDelimiter>
                <recordDelimiter>\n</recordDelimiter>
                <quoteToken>&quot;</quoteToken>
                <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
                <quoteEscapeToken>\</quoteEscapeToken>
                <numberedRows>false</numberedRows>
                <ignoreCR>true</ignoreCR>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDeserializationProperties" version="3.9.1">
                <columnDelimiter>,</columnDelimiter>
                <recordDelimiter>\n</recordDelimiter>
                <quoteToken>&quot;</quoteToken>
                <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
                <quoteEscapeToken>\</quoteEscapeToken>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedBatchProperties" version="3.9.1">
                <splitType>Record</splitType>
                <batchSkipRecords>0</batchSkipRecords>
                <batchMessageDelimiter></batchMessageDelimiter>
                <batchMessageDelimiterIncluded>false</batchMessageDelimiterIncluded>
                <batchGroupingColumn></batchGroupingColumn>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDataTypeProperties" version="3.9.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedSerializationProperties" version="3.9.1">
                <columnDelimiter>,</columnDelimiter>
                <recordDelimiter>\n</recordDelimiter>
                <quoteToken>&quot;</quoteToken>
                <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
                <quoteEscapeToken>\</quoteEscapeToken>
                <numberedRows>false</numberedRows>
                <ignoreCR>true</ignoreCR>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDeserializationProperties" version="3.9.1">
                <columnDelimiter>,</columnDelimiter>
                <recordDelimiter>\n</recordDelimiter>
                <quoteToken>&quot;</quoteToken>
                <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
                <quoteEscapeToken>\</quoteEscapeToken>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedBatchProperties" version="3.9.1">
                <splitType>Record</splitType>
                <batchSkipRecords>0</batchSkipRecords>
                <batchMessageDelimiter></batchMessageDelimiter>
                <batchMessageDelimiterIncluded>false</batchMessageDelimiterIncluded>
                <batchGroupingColumn></batchGroupingColumn>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.9.1">
            <elements/>
          </filter>
          <transportName>File Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>false</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
        <connector version="3.9.1">
          <metaDataId>8</metaDataId>
          <name>UM file header</name>
          <properties class="com.mirth.connect.connectors.file.FileDispatcherProperties" version="3.9.1">
            <pluginProperties/>
            <destinationConnectorProperties version="3.9.1">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <scheme>FILE</scheme>
            <host>${CDS_Dest_Dir}</host>
            <outputPattern>${UMFileName}</outputPattern>
            <anonymous>true</anonymous>
            <username>anonymous</username>
            <password>anonymous</password>
            <timeout>10000</timeout>
            <keepConnectionOpen>true</keepConnectionOpen>
            <maxIdleTime>0</maxIdleTime>
            <secure>true</secure>
            <passive>true</passive>
            <validateConnection>true</validateConnection>
            <outputAppend>false</outputAppend>
            <errorOnExists>false</errorOnExists>
            <temporary>false</temporary>
            <binary>false</binary>
            <charsetEncoding>UTF-8</charsetEncoding>
            <template>PatientID	PatientDOB	PatientSex	ReqPhysicianID	ReqPhysicianSpeciality	PanelIndcator	TestLISCode	TestSite	AbnormalFlag	TestOrderdDateTime
</template>
          </properties>
          <transformer version="3.9.1">
            <elements/>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>DELIMITED</inboundDataType>
            <outboundDataType>DELIMITED</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDataTypeProperties" version="3.9.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedSerializationProperties" version="3.9.1">
                <columnDelimiter>,</columnDelimiter>
                <recordDelimiter>\n</recordDelimiter>
                <quoteToken>&quot;</quoteToken>
                <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
                <quoteEscapeToken>\</quoteEscapeToken>
                <numberedRows>false</numberedRows>
                <ignoreCR>true</ignoreCR>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDeserializationProperties" version="3.9.1">
                <columnDelimiter>,</columnDelimiter>
                <recordDelimiter>\n</recordDelimiter>
                <quoteToken>&quot;</quoteToken>
                <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
                <quoteEscapeToken>\</quoteEscapeToken>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedBatchProperties" version="3.9.1">
                <splitType>Record</splitType>
                <batchSkipRecords>0</batchSkipRecords>
                <batchMessageDelimiter></batchMessageDelimiter>
                <batchMessageDelimiterIncluded>false</batchMessageDelimiterIncluded>
                <batchGroupingColumn></batchGroupingColumn>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDataTypeProperties" version="3.9.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedSerializationProperties" version="3.9.1">
                <columnDelimiter>,</columnDelimiter>
                <recordDelimiter>\n</recordDelimiter>
                <quoteToken>&quot;</quoteToken>
                <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
                <quoteEscapeToken>\</quoteEscapeToken>
                <numberedRows>false</numberedRows>
                <ignoreCR>true</ignoreCR>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDeserializationProperties" version="3.9.1">
                <columnDelimiter>,</columnDelimiter>
                <recordDelimiter>\n</recordDelimiter>
                <quoteToken>&quot;</quoteToken>
                <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
                <quoteEscapeToken>\</quoteEscapeToken>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedBatchProperties" version="3.9.1">
                <splitType>Record</splitType>
                <batchSkipRecords>0</batchSkipRecords>
                <batchMessageDelimiter></batchMessageDelimiter>
                <batchMessageDelimiterIncluded>false</batchMessageDelimiterIncluded>
                <batchGroupingColumn></batchGroupingColumn>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.9.1">
            <elements/>
            <inboundDataType>DELIMITED</inboundDataType>
            <outboundDataType>DELIMITED</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDataTypeProperties" version="3.9.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedSerializationProperties" version="3.9.1">
                <columnDelimiter>,</columnDelimiter>
                <recordDelimiter>\n</recordDelimiter>
                <quoteToken>&quot;</quoteToken>
                <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
                <quoteEscapeToken>\</quoteEscapeToken>
                <numberedRows>false</numberedRows>
                <ignoreCR>true</ignoreCR>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDeserializationProperties" version="3.9.1">
                <columnDelimiter>,</columnDelimiter>
                <recordDelimiter>\n</recordDelimiter>
                <quoteToken>&quot;</quoteToken>
                <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
                <quoteEscapeToken>\</quoteEscapeToken>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedBatchProperties" version="3.9.1">
                <splitType>Record</splitType>
                <batchSkipRecords>0</batchSkipRecords>
                <batchMessageDelimiter></batchMessageDelimiter>
                <batchMessageDelimiterIncluded>false</batchMessageDelimiterIncluded>
                <batchGroupingColumn></batchGroupingColumn>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDataTypeProperties" version="3.9.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedSerializationProperties" version="3.9.1">
                <columnDelimiter>,</columnDelimiter>
                <recordDelimiter>\n</recordDelimiter>
                <quoteToken>&quot;</quoteToken>
                <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
                <quoteEscapeToken>\</quoteEscapeToken>
                <numberedRows>false</numberedRows>
                <ignoreCR>true</ignoreCR>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDeserializationProperties" version="3.9.1">
                <columnDelimiter>,</columnDelimiter>
                <recordDelimiter>\n</recordDelimiter>
                <quoteToken>&quot;</quoteToken>
                <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
                <quoteEscapeToken>\</quoteEscapeToken>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedBatchProperties" version="3.9.1">
                <splitType>Record</splitType>
                <batchSkipRecords>0</batchSkipRecords>
                <batchMessageDelimiter></batchMessageDelimiter>
                <batchMessageDelimiterIncluded>false</batchMessageDelimiterIncluded>
                <batchGroupingColumn></batchGroupingColumn>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.9.1">
            <elements>
              <com.mirth.connect.plugins.javascriptrule.JavaScriptRule version="3.9.1">
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>var batchSequenceId = sourceMap.get(&apos;batchSequenceId&apos;);
return batchSequenceId == 1;</script>
              </com.mirth.connect.plugins.javascriptrule.JavaScriptRule>
            </elements>
          </filter>
          <transportName>File Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>false</enabled>
          <waitForPrevious>false</waitForPrevious>
        </connector>
        <connector version="3.9.1">
          <metaDataId>7</metaDataId>
          <name>UM file generation</name>
          <properties class="com.mirth.connect.connectors.file.FileDispatcherProperties" version="3.9.1">
            <pluginProperties/>
            <destinationConnectorProperties version="3.9.1">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <scheme>FILE</scheme>
            <host>${CDS_Dest_Dir}</host>
            <outputPattern>${UMFileName}</outputPattern>
            <anonymous>true</anonymous>
            <username>anonymous</username>
            <password>anonymous</password>
            <timeout>10000</timeout>
            <keepConnectionOpen>true</keepConnectionOpen>
            <maxIdleTime>0</maxIdleTime>
            <secure>true</secure>
            <passive>true</passive>
            <validateConnection>true</validateConnection>
            <outputAppend>true</outputAppend>
            <errorOnExists>false</errorOnExists>
            <temporary>false</temporary>
            <binary>false</binary>
            <charsetEncoding>UTF-8</charsetEncoding>
            <template>${maps.get(&apos;BIS PatientID&apos;)}	${maps.get(&apos;CDS PatientDOB&apos;)}	${maps.get(&apos;CDS PatientSex&apos;)}	${maps.get(&apos;CDS ReqPhysicianID&apos;)}	${maps.get(&apos;CDS ReqPhysicianSpeciality&apos;)}	${maps.get(&apos;CDS PanelIndicator&apos;)}	${maps.get(&apos;BIS TestLISCode&apos;)}	${maps.get(&apos;BIS TestSite&apos;)}	${maps.get(&apos;CDS AbnormalFlag&apos;)}	${maps.get(&apos;BIS TestOrderedDateTime&apos;)}
</template>
          </properties>
          <transformer version="3.9.1">
            <elements/>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>DELIMITED</inboundDataType>
            <outboundDataType>DELIMITED</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDataTypeProperties" version="3.9.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedSerializationProperties" version="3.9.1">
                <columnDelimiter>\t</columnDelimiter>
                <recordDelimiter>\n</recordDelimiter>
                <quoteToken>&quot;</quoteToken>
                <escapeWithDoubleQuote>false</escapeWithDoubleQuote>
                <quoteEscapeToken>\</quoteEscapeToken>
                <numberedRows>false</numberedRows>
                <ignoreCR>true</ignoreCR>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDeserializationProperties" version="3.9.1">
                <columnDelimiter>,</columnDelimiter>
                <recordDelimiter>\n</recordDelimiter>
                <quoteToken>&quot;</quoteToken>
                <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
                <quoteEscapeToken>\</quoteEscapeToken>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedBatchProperties" version="3.9.1">
                <splitType>Record</splitType>
                <batchSkipRecords>0</batchSkipRecords>
                <batchMessageDelimiter></batchMessageDelimiter>
                <batchMessageDelimiterIncluded>false</batchMessageDelimiterIncluded>
                <batchGroupingColumn></batchGroupingColumn>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDataTypeProperties" version="3.9.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedSerializationProperties" version="3.9.1">
                <columnDelimiter>,</columnDelimiter>
                <recordDelimiter>\n</recordDelimiter>
                <quoteToken>&quot;</quoteToken>
                <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
                <quoteEscapeToken>\</quoteEscapeToken>
                <numberedRows>false</numberedRows>
                <ignoreCR>true</ignoreCR>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDeserializationProperties" version="3.9.1">
                <columnDelimiter>,</columnDelimiter>
                <recordDelimiter>\n</recordDelimiter>
                <quoteToken>&quot;</quoteToken>
                <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
                <quoteEscapeToken>\</quoteEscapeToken>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedBatchProperties" version="3.9.1">
                <splitType>Record</splitType>
                <batchSkipRecords>0</batchSkipRecords>
                <batchMessageDelimiter></batchMessageDelimiter>
                <batchMessageDelimiterIncluded>false</batchMessageDelimiterIncluded>
                <batchGroupingColumn></batchGroupingColumn>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.9.1">
            <elements/>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>DELIMITED</inboundDataType>
            <outboundDataType>DELIMITED</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDataTypeProperties" version="3.9.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedSerializationProperties" version="3.9.1">
                <columnDelimiter>,</columnDelimiter>
                <recordDelimiter>\n</recordDelimiter>
                <quoteToken>&quot;</quoteToken>
                <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
                <quoteEscapeToken>\</quoteEscapeToken>
                <numberedRows>false</numberedRows>
                <ignoreCR>true</ignoreCR>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDeserializationProperties" version="3.9.1">
                <columnDelimiter>,</columnDelimiter>
                <recordDelimiter>\n</recordDelimiter>
                <quoteToken>&quot;</quoteToken>
                <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
                <quoteEscapeToken>\</quoteEscapeToken>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedBatchProperties" version="3.9.1">
                <splitType>Record</splitType>
                <batchSkipRecords>0</batchSkipRecords>
                <batchMessageDelimiter></batchMessageDelimiter>
                <batchMessageDelimiterIncluded>false</batchMessageDelimiterIncluded>
                <batchGroupingColumn></batchGroupingColumn>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDataTypeProperties" version="3.9.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedSerializationProperties" version="3.9.1">
                <columnDelimiter>,</columnDelimiter>
                <recordDelimiter>\n</recordDelimiter>
                <quoteToken>&quot;</quoteToken>
                <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
                <quoteEscapeToken>\</quoteEscapeToken>
                <numberedRows>false</numberedRows>
                <ignoreCR>true</ignoreCR>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDeserializationProperties" version="3.9.1">
                <columnDelimiter>,</columnDelimiter>
                <recordDelimiter>\n</recordDelimiter>
                <quoteToken>&quot;</quoteToken>
                <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
                <quoteEscapeToken>\</quoteEscapeToken>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedBatchProperties" version="3.9.1">
                <splitType>Record</splitType>
                <batchSkipRecords>0</batchSkipRecords>
                <batchMessageDelimiter></batchMessageDelimiter>
                <batchMessageDelimiterIncluded>false</batchMessageDelimiterIncluded>
                <batchGroupingColumn></batchGroupingColumn>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.9.1">
            <elements/>
          </filter>
          <transportName>File Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>false</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
        <connector version="3.9.1">
          <metaDataId>2</metaDataId>
          <name>Insert into MySQL staging db</name>
          <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.9.1">
            <pluginProperties/>
            <destinationConnectorProperties version="3.9.1">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <script>//  Declare and Set Variables

//var MESSAGE_ID;
//var Message_ID = &apos;1&apos;;
var Processed_YN = &apos;N&apos;;
var PatientID = Escape_String(channelMap.get(&apos;BIS PatientID&apos;));
var PatientFamilyName = Escape_String(channelMap.get(&apos;CDS PatientFamilyName&apos;));
var PatientGivenName = Escape_String(channelMap.get(&apos;CDS PatientGivenName&apos;));
var PatientTitle = Escape_String(channelMap.get(&apos;CDS PatientTitle&apos;));
var PatientDOB = Escape_String(channelMap.get(&apos;CDS PatientDOB&apos;));
var PatientSex = Escape_String(channelMap.get(&apos;CDS PatientSex&apos;));
var PatientStreetAddress = Escape_String(channelMap.get(&apos;CDS PatientStreetAddress&apos;));
var PatientCity = Escape_String(channelMap.get(&apos;CDS PatientCity&apos;));
var PatientPostalCode = Escape_String(channelMap.get(&apos;CDS PatientPostalCode&apos;));
var PatientState = Escape_String(channelMap.get(&apos;CDS PatientState&apos;));
var PatientCountry = Escape_String(channelMap.get(&apos;CDS PatientCountry&apos;));
var PatientStatus = Escape_String(channelMap.get(&apos;CDS PatientStatus&apos;));
var PatientPregnancyFlag = Escape_String(channelMap.get(&apos;CDS PatientPregnancyFlag&apos;));
var PatientFastingFlag = Escape_String(channelMap.get(&apos;CDS PatientFastingFlag&apos;));
var EpisodeID = Escape_String(channelMap.get(&apos;CDS EpisodeID&apos;));
var EpisodeOrderedTests = Escape_String(channelMap.get(&apos;CDS EpisodeOrderedTests&apos;));
var EpisodeClinicalNotes = Escape_String(channelMap.get(&apos;CDS EpisodeClinicalNotes&apos;));
var AccountType = Escape_String(channelMap.get(&apos;CDS AccountType&apos;));
var AccountClass = Escape_String(channelMap.get(&apos;CDS AccountClass&apos;));
var BillTo = Escape_String(channelMap.get(&apos;CDS BillTo&apos;));
var BillingAddress = Escape_String(channelMap.get(&apos;CDS BillingAddress&apos;));
var PatientPublicHealthIdentifier = Escape_String(channelMap.get(&apos;CDS PatientPublicHealthIdentifier&apos;));
var EpisodePublicScheduleCode = Escape_String(channelMap.get(&apos;CDS EpisodePublicScheduleCode&apos;));
var PatientPrivateHealthFundName = Escape_String(channelMap.get(&apos;CDS PatientPrivateHealthFundName&apos;));
var PatientPrivateHealthFundID = Escape_String(channelMap.get(&apos;CDS PatientPrivateHealthFundID&apos;));
var ReqPhysicianID = Escape_String(channelMap.get(&apos;CDS ReqPhysicianID&apos;));
var ReqPhysicianName = Escape_String(channelMap.get(&apos;CDS ReqPhysicianName&apos;));
var ReqPhysicianSpeciality = Escape_String(channelMap.get(&apos;CDS ReqPhysicianSpeciality&apos;));
var ReqPhysicianDeliveryAddress = Escape_String(channelMap.get(&apos;CDS ReqPhysicianDeliveryAddress&apos;));
var SugeryName = Escape_String(channelMap.get(&apos;CDS SugeryName&apos;));
var SurgeryCode = Escape_String(channelMap.get(&apos;CDS SurgeryCode&apos;));
var SurgeryAddress = Escape_String(channelMap.get(&apos;CDS SurgeryAddress&apos;));
var SurgeryPostalCode = Escape_String(channelMap.get(&apos;CDS SurgeryPostalCode&apos;));
var CopyPhysicianIDList = Escape_String(channelMap.get(&apos;CDS CopyPhysicianIDList&apos;));
var CopyPhysicianNameList = Escape_String(channelMap.get(&apos;CDS CopyPhysicianNameList&apos;));
var PanelIndicator = Escape_String(channelMap.get(&apos;CDS PanelIndicator&apos;));
var PanelID = Escape_String(channelMap.get(&apos;CDS PanelID&apos;));
var PanelName = Escape_String(channelMap.get(&apos;CDS PanelName&apos;));
var SampleID = Escape_String(channelMap.get(&apos;BIS SampleID&apos;));
var SampleFluidType = Escape_String(channelMap.get(&apos;CDS SampleFluidType&apos;));
var SampleOriginLocation = Escape_String(channelMap.get(&apos;BIS SampleOriginLocation&apos;));
var SampleOriginSubLocation = Escape_String(channelMap.get(&apos;CDS SampleOriginSubLocation&apos;));
var SampleCollectionDateTime = Escape_String(channelMap.get(&apos;CDS SampleCollectionDateTime&apos;));
var SampleCollectionMethod = Escape_String(channelMap.get(&apos;CDS SampleCollectionMethod&apos;));
var TestSiteSampleReceivedDateTime = Escape_String(channelMap.get(&apos;BIS TestSiteSampleReceivedDateTime&apos;));
var TestLISCode = Escape_String(channelMap.get(&apos;BIS TestLISCode&apos;));
var TestLISName = Escape_String(channelMap.get(&apos;BIS TestLISName&apos;));
var TestValue = Escape_String(channelMap.get(&apos;CDS TestValue&apos;));
var TestNormalRange = Escape_String(channelMap.get(&apos;CDS TestNormalRange&apos;));
var TestUnits = Escape_String(channelMap.get(&apos;CDS TestUnits&apos;));
var TestPriority = Escape_String(channelMap.get(&apos;BIS TestPriority&apos;));
var TestDepartment = Escape_String(channelMap.get(&apos;CDS TestDepartment&apos;));
var TestInstrument = Escape_String(channelMap.get(&apos;BIS TestInstrument&apos;));
var TestRequestSite = Escape_String(channelMap.get(&apos;CDS TestRequestSite&apos;));
var TestSite = Escape_String(channelMap.get(&apos;BIS TestSite&apos;));
var TestType = Escape_String(channelMap.get(&apos;BIS TestType&apos;));
var AbnormalFlag = Escape_String(channelMap.get(&apos;CDS AbnormalFlag&apos;));
var TestOrderedDateTime = channelMap.get(&apos;BIS TestOrderedDateTime&apos;);
var TestAnalyzerCompletionDateTime = channelMap.get(&apos;BIS TestAnalyzerCompletionDateTime&apos;);
var TestResultFirstReviewedDateTime = channelMap.get(&apos;BIS TestResultFirstReviewedDateTime&apos;);
var TestResultReleasedDateTime = channelMap.get(&apos;BIS TestResultReleasedDateTime&apos;);
var EpisodeDateTime = channelMap.get(&apos;EpisodeDateTime&apos;);
// call Mirth template

	var result = Insert_CDS_Data(PatientID,PatientFamilyName,PatientGivenName,PatientTitle,PatientDOB,PatientSex,PatientStreetAddress,PatientCity,PatientPostalCode,PatientState,PatientCountry,PatientStatus,PatientPregnancyFlag,PatientFastingFlag,EpisodeID,EpisodeOrderedTests, EpisodeDateTime, EpisodeClinicalNotes,AccountType,AccountClass,BillTo,BillingAddress,PatientPublicHealthIdentifier,EpisodePublicScheduleCode,PatientPrivateHealthFundName,PatientPrivateHealthFundID,ReqPhysicianID,ReqPhysicianName,ReqPhysicianSpeciality,ReqPhysicianDeliveryAddress,SugeryName,SurgeryCode,SurgeryAddress,SurgeryPostalCode,CopyPhysicianIDList,CopyPhysicianNameList,PanelIndicator,PanelID,PanelName,SampleID,SampleFluidType,SampleOriginLocation,SampleOriginSubLocation,SampleCollectionDateTime,SampleCollectionMethod,TestSiteSampleReceivedDateTime,TestLISCode,TestLISName,TestValue,TestNormalRange,TestUnits,TestPriority,TestDepartment,TestInstrument,TestRequestSite,TestSite,TestType,AbnormalFlag,TestOrderedDateTime,TestAnalyzerCompletionDateTime,TestResultFirstReviewedDateTime,TestResultReleasedDateTime);</script>
          </properties>
          <transformer version="3.9.1">
            <elements/>
            <inboundTemplate encoding="base64">UGF0aWVudElECVNhbXBsZUlECVNhbXBsZUZsdWlkVHlwZQlTYW1wbGVPcmlnaW5Mb2NhdGlvbglU
ZXN0TElTQ29kZQlUZXN0TElTTmFtZQlUZXN0UHJpb3JpdHkJVGVzdERlcGFydG1lbnQJVGVzdElu
c3RydW1lbnQJVGVzdFNpdGUJVGVzdFR5cGUJVGVzdEFuYWx5emVyQ29tcGxldGlvbkRhdGVUaW1l
CVRlc3RTaXRlU2FtcGxlUmVjZWl2ZWREYXRlVGltZQlUZXN0T3JkZXJlZERhdGVUaW1lCVRlc3RS
ZXN1bHRGaXJzdFJldmlld2VkRGF0ZVRpbWUJVGVzdFJlc3VsdFJlbGVhc2VkRGF0ZVRpbWU=</inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>DELIMITED</inboundDataType>
            <outboundDataType>DELIMITED</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDataTypeProperties" version="3.9.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedSerializationProperties" version="3.9.1">
                <columnDelimiter>\t</columnDelimiter>
                <recordDelimiter>\n</recordDelimiter>
                <quoteToken>&quot;</quoteToken>
                <escapeWithDoubleQuote>false</escapeWithDoubleQuote>
                <quoteEscapeToken>\</quoteEscapeToken>
                <numberedRows>false</numberedRows>
                <ignoreCR>true</ignoreCR>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDeserializationProperties" version="3.9.1">
                <columnDelimiter>,</columnDelimiter>
                <recordDelimiter>\n</recordDelimiter>
                <quoteToken>&quot;</quoteToken>
                <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
                <quoteEscapeToken>\</quoteEscapeToken>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedBatchProperties" version="3.9.1">
                <splitType>Record</splitType>
                <batchSkipRecords>0</batchSkipRecords>
                <batchMessageDelimiter></batchMessageDelimiter>
                <batchMessageDelimiterIncluded>false</batchMessageDelimiterIncluded>
                <batchGroupingColumn></batchGroupingColumn>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDataTypeProperties" version="3.9.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedSerializationProperties" version="3.9.1">
                <columnDelimiter>,</columnDelimiter>
                <recordDelimiter>\n</recordDelimiter>
                <quoteToken>&quot;</quoteToken>
                <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
                <quoteEscapeToken>\</quoteEscapeToken>
                <numberedRows>false</numberedRows>
                <ignoreCR>true</ignoreCR>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDeserializationProperties" version="3.9.1">
                <columnDelimiter>,</columnDelimiter>
                <recordDelimiter>\n</recordDelimiter>
                <quoteToken>&quot;</quoteToken>
                <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
                <quoteEscapeToken>\</quoteEscapeToken>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedBatchProperties" version="3.9.1">
                <splitType>Record</splitType>
                <batchSkipRecords>0</batchSkipRecords>
                <batchMessageDelimiter></batchMessageDelimiter>
                <batchMessageDelimiterIncluded>false</batchMessageDelimiterIncluded>
                <batchGroupingColumn></batchGroupingColumn>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.9.1">
            <elements/>
            <inboundDataType>DELIMITED</inboundDataType>
            <outboundDataType>DELIMITED</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDataTypeProperties" version="3.9.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedSerializationProperties" version="3.9.1">
                <columnDelimiter>,</columnDelimiter>
                <recordDelimiter>\n</recordDelimiter>
                <quoteToken>&quot;</quoteToken>
                <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
                <quoteEscapeToken>\</quoteEscapeToken>
                <numberedRows>false</numberedRows>
                <ignoreCR>true</ignoreCR>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDeserializationProperties" version="3.9.1">
                <columnDelimiter>,</columnDelimiter>
                <recordDelimiter>\n</recordDelimiter>
                <quoteToken>&quot;</quoteToken>
                <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
                <quoteEscapeToken>\</quoteEscapeToken>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedBatchProperties" version="3.9.1">
                <splitType>Record</splitType>
                <batchSkipRecords>0</batchSkipRecords>
                <batchMessageDelimiter></batchMessageDelimiter>
                <batchMessageDelimiterIncluded>false</batchMessageDelimiterIncluded>
                <batchGroupingColumn></batchGroupingColumn>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDataTypeProperties" version="3.9.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedSerializationProperties" version="3.9.1">
                <columnDelimiter>,</columnDelimiter>
                <recordDelimiter>\n</recordDelimiter>
                <quoteToken>&quot;</quoteToken>
                <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
                <quoteEscapeToken>\</quoteEscapeToken>
                <numberedRows>false</numberedRows>
                <ignoreCR>true</ignoreCR>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDeserializationProperties" version="3.9.1">
                <columnDelimiter>,</columnDelimiter>
                <recordDelimiter>\n</recordDelimiter>
                <quoteToken>&quot;</quoteToken>
                <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
                <quoteEscapeToken>\</quoteEscapeToken>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedBatchProperties" version="3.9.1">
                <splitType>Record</splitType>
                <batchSkipRecords>0</batchSkipRecords>
                <batchMessageDelimiter></batchMessageDelimiter>
                <batchMessageDelimiterIncluded>false</batchMessageDelimiterIncluded>
                <batchGroupingColumn></batchGroupingColumn>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.9.1">
            <elements/>
          </filter>
          <transportName>JavaScript Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>false</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map

return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="3.9.1">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="3.9.1">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>false</enabled>
          <lastModified>
            <time>1702933856391</time>
            <timezone>America/Bogota</timezone>
          </lastModified>
          <pruningSettings>
            <pruneMetaDataDays>1</pruneMetaDataDays>
            <pruneContentDays>1</pruneContentDays>
            <archiveEnabled>false</archiveEnabled>
          </pruningSettings>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="3.9.1">
            <id>14edb524-2418-43b8-a793-a6cd4834125f</id>
            <name>CDSLibrary</name>
            <revision>2</revision>
            <lastModified>
              <time>1702919075456</time>
              <timezone>America/Bogota</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>77ab9cc6-2ecd-44c0-b42b-12d7d0d9f189</string>
              <string>1d1c2f3f-7b43-4a08-aac9-3406457df838</string>
              <string>747034d1-3b67-4648-b61d-97569079ec4f</string>
              <string>8c353129-1ddc-49ad-8b83-3ad2afe7a40c</string>
              <string>8744071f-c37e-4836-91e5-09c33fc3fc6c</string>
              <string>433ad4fa-bc93-47c1-a845-5efea1c1072e</string>
              <string>7fe17d45-0d9c-4e3b-84e5-1ca99bbed1b0</string>
              <string>c493d457-70a0-4f4c-a937-0488ff6a4535</string>
              <string>1badc74d-d04c-406b-877f-d31701e3e635</string>
              <string>84789e18-d176-4c56-b440-2e0f2e95a99a</string>
              <string>d399041c-db53-4cb3-bc90-de88541ad78f</string>
              <string>eb46a988-ef28-438f-85a8-79ff448dbfa8</string>
              <string>76c3a018-7fc4-4fa9-a233-ae85c317f616</string>
              <string>55980407-140c-48e7-bc35-175c21f68fcb</string>
              <string>278077bd-06c4-4367-8e98-793b88f53108</string>
              <string>fc376d9e-a4a0-42b9-8945-c643c00a0048</string>
              <string>18a8bfe5-6fbf-40b0-ac5e-d1e0b34316b3</string>
              <string>b0a96d01-1c22-4c23-bce1-5536abe79f78</string>
              <string>6e154ddd-fa94-48d0-8d51-099d4b18dc7e</string>
              <string>0c4728b1-b0fa-4d99-9d0b-640e73a77e22</string>
              <string>b713e9b5-f29f-420c-8767-347c4cc59235</string>
              <string>73de28ab-9b76-43f5-a589-933aca189633</string>
              <string>0ee1b38b-9693-49cc-a93f-d83c2162abea</string>
              <string>c103919f-4f02-4ebb-b5fc-c74d70f9d984</string>
              <string>7323ba37-7876-4329-bd17-6e8f63f70320</string>
              <string>f4c513ef-f1ab-470a-bff5-d505363dd0cb</string>
              <string>4a11b6f9-2a70-45a4-85ef-7949937ff063</string>
              <string>698319a5-6a40-439f-a2fc-77968f8fd8b0</string>
              <string>1dc78376-5e82-488e-8b61-844d9c9201f6</string>
              <string>824a47e1-d27d-4c70-b613-87b22a06b30f</string>
              <string>73fcebb7-1fac-4550-8bcf-cd90553c8706</string>
              <string>dfaea744-4c0c-4e3e-974f-2714feb84b6a</string>
              <string>4c30d333-07c7-4608-90fb-f209480945f9</string>
              <string>a34ca889-a825-42c2-b8d2-eade79050a7b</string>
              <string>65fd27b3-2550-4fc6-a077-3b700f624801</string>
              <string>e28b6034-657f-44fe-bdfb-2eb08f6b8b9d</string>
              <string>8bf57726-afe4-4bf2-ab11-a811a2a90173</string>
              <string>92a2401a-38b2-4332-ae9c-382eeff9fed9</string>
              <string>ec42f2b5-da91-422d-8e84-ca8fce839ca9</string>
              <string>f9e9b002-0d75-4d07-9829-9a936107fa64</string>
              <string>3e3fa50e-bf1f-4040-94e8-e534f59f1aca</string>
              <string>44fa8b92-bea5-4ca9-bc34-fba837df1f3e</string>
              <string>9a05a6d3-f67e-4e8d-a5c8-eeddecacea4f</string>
              <string>7b43fb86-dd49-4f24-8e63-2921f65835a7</string>
              <string>1ef6c048-d7a7-4702-a9fa-88c3929f28d7</string>
              <string>e5ac2e27-f193-4738-b6e4-fa77ccdb8210</string>
              <string>5d6a3192-30a4-4b5d-9e42-ce67cc86d815</string>
              <string>a769de5d-f56c-4603-bcbc-3d2459213531</string>
              <string>bfe36ced-a6f7-44e7-af45-5837f11b3bad</string>
              <string>d1e3a6bf-f2ad-4395-aa42-5a39ca3e671d</string>
              <string>a0372fd7-10c0-4832-adb3-80afede56081</string>
              <string>1bc4cc73-cce0-43f1-98af-52d3072840e1</string>
              <string>1e3cb27c-ab1a-4edd-837b-baa3d7a7b1e4</string>
              <string>8be4a05a-d1fb-452f-bdbc-dc149574753f</string>
              <string>9d321038-d32a-41be-b3a2-abd7434dff69</string>
              <string>799b2a4c-6925-4ea7-8470-0d0fc00df393</string>
              <string>5dffbd4e-833e-4a91-9497-740ad95fc4e1</string>
              <string>03226d36-9fd4-49ce-a918-28b4fb9517b3</string>
              <string>7a35a369-f78d-4e11-b045-c84d87d26355</string>
              <string>b1b9fd9d-0be2-4a67-87a8-38f405b2c3bb</string>
              <string>84ce7656-7580-4d1d-9d81-e81e325089fd</string>
              <string>b13045bc-2898-4fc1-b952-5ea29cf70720</string>
              <string>750017ad-a990-4ed0-9a1f-75c94531aba4</string>
              <string>54694f01-6c22-44db-a7e5-ebc9ae829740</string>
              <string>b5bdf4f0-81b3-4c53-b885-c0c670db3d57</string>
              <string>8f69e69c-327c-4275-8aca-f2cda426dab5</string>
              <string>3b2dd6b0-68c1-4392-b655-087abacd766d</string>
              <string>01ea1ce1-60ff-42c5-b059-a15a77275267</string>
              <string>cb9377d3-e95b-4b0b-bbb2-5e84fb106556</string>
              <string>a036bb2a-a192-455b-b3f3-14ab0fd5cbac</string>
              <string>110bc202-af08-4bfe-b641-887703d741f0</string>
              <string>0d1732eb-79c8-47b1-a829-58be289cee1f</string>
              <string>4b6f419b-3fbf-4371-b1fe-c51ecd5a05aa</string>
              <string>23b63fb2-743f-481a-9726-99430365b127</string>
              <string>d459da66-c436-4ae0-a5ec-d153d2d891a5</string>
              <string>37586608-d3c6-4465-953a-dce98ee13a2c</string>
              <string>ed36555d-bab4-476d-9887-ac2727f94e40</string>
              <string>2472b206-9949-4ada-acbb-64b14eae1b78</string>
              <string>a849d594-1242-4840-8d17-634abf7a9e66</string>
              <string>b5b3ad88-a0a7-4110-8813-19f68dc7b136</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.9.1">
                <id>68af7e0a-a2a5-438d-bb24-fd55642929a2</id>
                <name>createAttribute</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597480447</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function createAttribute(name ,value){
	var attributeObject = {};
  attributeObject.externalName = name;
  attributeObject.value =	value;	
  return attributeObject
	}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.9.1">
                <id>06ef2d18-82b1-4402-9113-6f4a8d472361</id>
                <name>createExtendedAttribute</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597481876</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function createExtendedAttribute(externalName,value,units,range)
{
	var attributeObject = {};
	if(validateValues(value))
	{ 
		
	  	attributeObject.externalName  = externalName;
	  	attributeObject.value =value;
	  	attributeObject.units =units;
	  	
	  	if (validateRange(range)){
	 		attributeObject.range=range ;
	  	}
	 	
		
	}else 
	{attributeObject.externalName  = externalName;}
	return  attributeObject;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.9.1">
                <id>0bf4aa5b-5d2c-467e-a47a-8c05e137f6a3</id>
                <name>Get_Informix_Connection</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597480091</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
JavaScript function to centralise creation of a database connection. The
connection won&apos;t be open, the caller still needs to do this but all constants
will be instantiated here

@return dbConn returns an instance of a returns a new DatabaseConnection object
*/
function Get_Informix_Connection() {

var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;com.informix.jdbc.IfxDriver&apos;, &apos;jdbc:informix-sqli://10.192.176.57:1526/orion_clinic:INFORMIXSERVER=dboc&apos;, &apos;consultaocli&apos;, &apos;hdrsanjuan&apos;);

return dbConn;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.9.1">
                <id>aff2785a-9d8b-44e1-8667-21a23f632eb6</id>
                <name>validateRange</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597480657</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function validateRange(ReferenceRange)
{
	if(ReferenceRange != null &amp;&amp; ReferenceRange.toString().trim().indexOf(&apos;-&apos;) &gt;=0 )
	{
	return true;
	}
	else { return false;}
	}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.9.1">
                <id>e5be0fe3-40ff-4738-9e29-19199e8e10aa</id>
                <name>validateValues</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597481349</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function validateValues(labvalue)
{
	if (  labvalue == null || labvalue == &quot;Nil&quot;  )
	{return false;}
	else
	return true;
	};
	</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.9.1">
            <id>0e6800ae-6d84-4245-9e09-2c1a2f28d8fc</id>
            <name>Common</name>
            <revision>2</revision>
            <lastModified>
              <time>1702919075449</time>
              <timezone>America/Bogota</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>0c4728b1-b0fa-4d99-9d0b-640e73a77e22</string>
              <string>0ee1b38b-9693-49cc-a93f-d83c2162abea</string>
              <string>f4c513ef-f1ab-470a-bff5-d505363dd0cb</string>
              <string>698319a5-6a40-439f-a2fc-77968f8fd8b0</string>
              <string>747034d1-3b67-4648-b61d-97569079ec4f</string>
              <string>a34ca889-a825-42c2-b8d2-eade79050a7b</string>
              <string>e28b6034-657f-44fe-bdfb-2eb08f6b8b9d</string>
              <string>8bf57726-afe4-4bf2-ab11-a811a2a90173</string>
              <string>8744071f-c37e-4836-91e5-09c33fc3fc6c</string>
              <string>c33e2ab9-4947-4a9c-a086-f94a0ab6331f</string>
              <string>f3853b12-9d89-4103-a29b-8b938c30466f</string>
              <string>03226d36-9fd4-49ce-a918-28b4fb9517b3</string>
              <string>278077bd-06c4-4367-8e98-793b88f53108</string>
              <string>dd2306fc-2fd7-4a27-a082-5f8c481ec5c6</string>
              <string>1ef6c048-d7a7-4702-a9fa-88c3929f28d7</string>
              <string>6471c495-addd-4cf4-a834-e7f9eb93045a</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.9.1">
                <id>43f73dbc-f73d-4178-9aa0-b451c05922e2</id>
                <name>Check if String contains</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597480368</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	To verify if one string (source) contains another string (target).

	@param {String} arg1 - target string to lookup in the source string
	@return {String} return true if the source string contains the target string
*/
String.prototype.contains = function(arg1) {
	
	return this.indexOf(arg1) &gt; -1;
		
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.9.1">
                <id>6a420042-a38d-4d6b-8567-d0290086256a</id>
                <name>Check if String contains HTTP code</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597479785</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	To verify if the given string contains HTTP status code.

	@param - no parameter
	@return {String} return true if the string contains the HTTP status code, false otherwise
*/

function isHttpCode2xx(arg1) {
	var code2xx = [&apos;200&apos;,&apos;201&apos;,&apos;202&apos;,&apos;203&apos;,&apos;204&apos;,&apos;205&apos;,&apos;206&apos;,&apos;207&apos;,&apos;208&apos;];	
	var length = code2xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code2xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}

function isHttpCode4xx(arg1) {
	var code4xx = [&apos;400&apos;,&apos;401&apos;,&apos;402&apos;,&apos;403&apos;,&apos;404&apos;,&apos;405&apos;,&apos;406&apos;,&apos;407&apos;,&apos;408&apos;,&apos;409&apos;,&apos;410&apos;,&apos;411&apos;,&apos;412&apos;,&apos;413&apos;,&apos;414&apos;,&apos;415&apos;,&apos;416&apos;,&apos;417&apos;,&apos;429&apos;,&apos;431&apos;,&apos;451&apos;];	
	var length = code4xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code4xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}

function isHttpCode5xx(arg1) {
	var code5xx = [&apos;500&apos;,&apos;501&apos;,&apos;502&apos;,&apos;503&apos;,&apos;504&apos;,&apos;505&apos;,&apos;506&apos;,&apos;510&apos;,&apos;511&apos;];	
	var length = code5xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code5xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.9.1">
                <id>42dbc1c3-72e4-4ece-a6b8-5cd188446027</id>
                <name>Convert JSON date to HL7v2 date</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597481529</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	To convert JSON date/time format to HL7v2 date only format.

	@param {String} datetime - JSON date/time (yyyy-MM-ddThh:mm:ss.sss-00:00) or (yyyy-MM-dd)
	@return {String} return HL7v2 date (yyyyMMdd)
*/
function convertToHL7v2Date(datetime) { 

	var date = datetime.toString().match(/\d{4}\-\d{2}\-\d{2}/);
	return ((date.length &gt; 0) ? date[0].replace(/\-/g,&apos;&apos;) : date.replace(/\-/g,&apos;&apos;));
	
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.9.1">
                <id>5b60cf28-571b-4aa8-94fe-d3cdf069471b</id>
                <name>Convert JSON datetime to HL7v2 datetime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597479424</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	To convert JSON date/time format to HL7v2 date only format.
	Possible formats:
	&quot;2016-01-01T00:00:00.000Z&quot;	JavaScript built-in JSON object
	&quot;2016-01-01T00:00:00-00:00&quot;	ISO 8601

	@param {String} datetime - JSON date/time with offset (yyyy-MM-ddThh:mm:ss.sss-/+00:00) or (yyyy-MM-dd)
	@return {String} return HL7v2 DTM date type
*/
function convertToHL7v2DateTime(datetime) { 

	var date = [];
	var hl7Date = &quot;&quot;;
	var timeZome = &quot;&quot;;

	if (datetime.indexOf(&quot;T&quot;) &gt; -1) {

		var zone = datetime.toString().slice(datetime.indexOf(&quot;T&quot;) + 1);
		if (zone.indexOf(&quot;+&quot;) &gt; 0) timeZone = &quot;+&quot;;
		if (zone.indexOf(&quot;-&quot;) &gt; 0) timeZone = &quot;-&quot;;

		if (datetime.indexOf(&quot;Z&quot;) &gt; 0) {
			date = datetime.toString().split(/\-|\+|T|:|\./g);
		} else {
			date = datetime.toString().split(/\-|\+|T|:/g);
		}
		
		for (var i=0; i &lt; 6; i++) {			
			hl7Date += date[i]; 
		}
		
		var offset = date.slice(6);
		for (var i=0; i &lt; offset.length; i++) {
			timeZone += offset[i];
		}

		return hl7Date + timeZone;

	} else {
		return convertToHL7v2Date(datetime);
	}
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.9.1">
                <id>d014f2fc-cf80-47ad-9de8-6c84807e2f70</id>
                <name>Extract JSON node data</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597479521</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Validates if node is not NULL or &quot;undefined&quot;. If the given node is an array, return a string of values.

	@param {String} node - node to extract the data from
	@return {String} return given node value or empty string if such node does not exist
*/
function extract(node) {

	try {
		var result = &quot;&quot;;

		if (null == node) return result;
		
		if ((typeof node) !== &quot;undefined&quot;) {

			if (Object.prototype.toString.call(node) === &apos;[object Array]&apos;) {
				result = org.apache.commons.lang3.StringUtils.join(node, &quot; &quot;)
			} else 
				result = node;
		}
	} finally {
		return result.toString().trim();
	}
}

</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.9.1">
                <id>a3f85cc2-9b95-45a9-9cb1-937197e09cdc</id>
                <name>Verify JSON node for existance</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597479695</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Verify if the given node exists.

	@param {String} node - node to verify for existance
	@return {String} return true if the given node exists, false otherwise
*/
function keyExists(node) {
	return ( ((typeof node) !== &quot;undefined&quot;) &amp;&amp; ((typeof node) !== null) );
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.9.1">
            <id>394664c0-d536-4310-970e-181dc03ee7da</id>
            <name>Conversions</name>
            <revision>1</revision>
            <lastModified>
              <time>1682597479338</time>
              <timezone>America/Bogota</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>0c4728b1-b0fa-4d99-9d0b-640e73a77e22</string>
              <string>0ee1b38b-9693-49cc-a93f-d83c2162abea</string>
              <string>f4c513ef-f1ab-470a-bff5-d505363dd0cb</string>
              <string>698319a5-6a40-439f-a2fc-77968f8fd8b0</string>
              <string>747034d1-3b67-4648-b61d-97569079ec4f</string>
              <string>a34ca889-a825-42c2-b8d2-eade79050a7b</string>
              <string>e28b6034-657f-44fe-bdfb-2eb08f6b8b9d</string>
              <string>8bf57726-afe4-4bf2-ab11-a811a2a90173</string>
              <string>8744071f-c37e-4836-91e5-09c33fc3fc6c</string>
              <string>c33e2ab9-4947-4a9c-a086-f94a0ab6331f</string>
              <string>f3853b12-9d89-4103-a29b-8b938c30466f</string>
              <string>03226d36-9fd4-49ce-a918-28b4fb9517b3</string>
              <string>278077bd-06c4-4367-8e98-793b88f53108</string>
              <string>dd2306fc-2fd7-4a27-a082-5f8c481ec5c6</string>
              <string>1ef6c048-d7a7-4702-a9fa-88c3929f28d7</string>
              <string>6471c495-addd-4cf4-a834-e7f9eb93045a</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.9.1">
                <id>3a388aa0-c0ba-460c-b790-1c42c081c84d</id>
                <name>Convert FHIR codes to HL7v2 codes</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597480735</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Map FHIR codes to corresponding HL7v2.6 codes using the Table number.

	@param {String} FhirCode - FHIR code
	@param {String} tableName - HL7v2.6 Table Name	
	@return {String} return corresponsing HL7v2.6 code if known or &quot;Unknown&quot; result
*/
function convertToHL7v2Table(FhirCode,tableNumber) {

	var code = &apos;&apos;;
	if (&apos;undefined&apos; !== typeof FhirCode &amp;&amp; null !== FhirCode) {
		code = FhirCode.toString().toLowerCase();	
	}
	

	switch(tableNumber) {
		case &quot;0001&quot;:
			if (&apos;female&apos; == code || &apos;f&apos; == code) return &apos;F&apos;; else
			if (&apos;male&apos; == code || &apos;m&apos; == code) return &apos;M&apos;; else
			if (&apos;other&apos; == code) return &apos;O&apos;; else
			return &apos;U&apos;; 			
		break;

		case &quot;0004&quot;:
			// http://hl7.org/fhir/encounter-class
			if (&apos;emergency&apos; == code) return &apos;E&apos;; else				
			if (&apos;inpatient&apos; == code) return &apos;I&apos;; else
			if (&apos;outpatient&apos; == code) return &apos;O&apos;; else
			return &quot;U&quot;;
		break;

		case &quot;0190&quot;:
			// http://hl7.org/fhir/ValueSet/address-type
			if (&apos;postal&apos; == code) return &apos;H&apos;; else				
			if (&apos;physical&apos; == code) return &apos;P&apos;; else
			if (&apos;both&apos; == code) return &apos;H&apos;; else
			return &quot;M&quot;;
		break;		

		case &quot;0201&quot;:
			// http://hl7.org/fhir/ValueSet/contact-point-use
			if (&apos;home&apos; == code) return &apos;PRN&apos;; else				
			if (&apos;work&apos; == code) return &apos;WPN&apos;; else
			if (&apos;mobile&apos; == code) return &apos;PRS&apos;; else
			if (&apos;temp&apos; == code) return &apos;TMP&apos;; else			
			if (&apos;old&apos; == code) return &apos;OLD&apos;; else
			return &quot;PRN&quot;;
		break;	

		case &quot;0202&quot;:
			// http://hl7.org/fhir/contact-point-system
			if (&apos;phone&apos; == code) return &apos;PH&apos;; else				
			if (&apos;fax&apos; == code) return &apos;FX&apos;; else
			if (&apos;pager&apos; == code) return &apos;BP&apos;; else
			if (&apos;email&apos; == code) return &apos;Internet&apos;; else
			return &quot;PH&quot;;
		break;	

		case &quot;0063&quot;:
			// http://hl7.org/fhir/ValueSet/patient-contact-relationship
			// (SN) Partial list
			if (&apos;parent&apos; == code) return &apos;PAR&apos;; else
			if (&apos;MTH&apos; == code) return &apos;MTH&apos;; else
			if (&apos;FTH&apos; == code) return &apos;FTH&apos;; else	
			if (&apos;caregiver&apos; == code) return &apos;CGV&apos;; else
			if (&apos;SPS&apos; == code) return &apos;SPO&apos;; else
			if (&apos;CHILD&apos; == code) return &apos;CHD&apos;; else
			if (&apos;GRNDCHILD&apos; == code) return &apos;GCH&apos;; else
			if (&apos;GRPRN&apos; == code) return &apos;GRP&apos;; else
			if (&apos;SIB&apos; == code) return &apos;SIB&apos;; else
			if (&apos;BRO&apos; == code) return &apos;BRO&apos;; else
			if (&apos;SIS&apos; == code) return &apos;SIS&apos;; else
			if (&apos;friend&apos; == code) return &apos;FND&apos;; else
			if (&apos;ONESELF&apos; == code) return &apos;SEL&apos;; else
			if (&apos;emergency&apos; == code) return &apos;EMC&apos;; else
			return &apos;UNK&apos;;		
		break;
		default:
			return &apos;U&apos;;
	}


}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.9.1">
            <id>fc481186-afaa-447b-822c-f0ba6980e3b2</id>
            <name>Database</name>
            <revision>1</revision>
            <lastModified>
              <time>1682597479385</time>
              <timezone>America/Bogota</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>0c4728b1-b0fa-4d99-9d0b-640e73a77e22</string>
              <string>feecaa3a-dba6-468b-a5b7-7379e6965d53</string>
              <string>bfe36ced-a6f7-44e7-af45-5837f11b3bad</string>
              <string>4a11b6f9-2a70-45a4-85ef-7949937ff063</string>
              <string>f4c513ef-f1ab-470a-bff5-d505363dd0cb</string>
              <string>a34ca889-a825-42c2-b8d2-eade79050a7b</string>
              <string>e28b6034-657f-44fe-bdfb-2eb08f6b8b9d</string>
              <string>8bf57726-afe4-4bf2-ab11-a811a2a90173</string>
              <string>8744071f-c37e-4836-91e5-09c33fc3fc6c</string>
              <string>138c30fb-34bf-4b61-b178-41a23b895682</string>
              <string>48871745-b660-4892-a5d6-d0a07002ee34</string>
              <string>c493d457-70a0-4f4c-a937-0488ff6a4535</string>
              <string>44fa8b92-bea5-4ca9-bc34-fba837df1f3e</string>
              <string>9a05a6d3-f67e-4e8d-a5c8-eeddecacea4f</string>
              <string>03226d36-9fd4-49ce-a918-28b4fb9517b3</string>
              <string>1ef6c048-d7a7-4702-a9fa-88c3929f28d7</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>1e31ed90-0f2c-4950-8183-3d297d3a02a7</string>
              <string>53ad5032-6ea6-475f-b483-c26cedbc43f2</string>
              <string>bf34b389-a73d-441f-9590-7d7f243ad5b5</string>
              <string>698319a5-6a40-439f-a2fc-77968f8fd8b0</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.9.1">
                <id>f2b08362-f366-4e5d-8c62-4b9d2977a71a</id>
                <name>Get_Informix_Connection</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597480996</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
JavaScript function to centralise creation of a database connection. The
connection won&apos;t be open, the caller still needs to do this but all constants
will be instantiated here

@return dbConn returns an instance of a returns a new DatabaseConnection object
*/
function Get_Informix_Connection() {

var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;com.informix.jdbc.IfxDriver&apos;, &apos;jdbc:informix-sqli://10.192.176.57:1526/orion_clinic:INFORMIXSERVER=dboc&apos;, &apos;consultaocli&apos;, &apos;hdrsanjuan&apos;);

return dbConn;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.9.1">
            <id>0db3684b-ca1c-42a3-b4ac-5979f6d90156</id>
            <name>DateLibrary</name>
            <revision>1</revision>
            <lastModified>
              <time>1682597479357</time>
              <timezone>America/Bogota</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>20771cf2-84cd-48f7-b644-387ca3be7286</string>
              <string>95542362-d5fa-4ab6-9bad-ec1b8e7158c3</string>
              <string>747034d1-3b67-4648-b61d-97569079ec4f</string>
              <string>8744071f-c37e-4836-91e5-09c33fc3fc6c</string>
              <string>2c39ba37-5558-4b03-8572-9d598615d6f5</string>
              <string>f0b5344f-fef0-492d-aa30-343d586964cd</string>
              <string>eb46a988-ef28-438f-85a8-79ff448dbfa8</string>
              <string>03226d36-9fd4-49ce-a918-28b4fb9517b3</string>
              <string>278077bd-06c4-4367-8e98-793b88f53108</string>
              <string>dd2306fc-2fd7-4a27-a082-5f8c481ec5c6</string>
              <string>7976a968-87c0-4231-9d07-d96b7000f9ab</string>
              <string>d0c614a3-7f92-4fcd-ae3e-a875f29df996</string>
              <string>db202450-62ae-4257-b9d1-c482a5ec516b</string>
              <string>fb12c5ab-a29f-434c-9849-957ffb52b0fb</string>
              <string>0c4728b1-b0fa-4d99-9d0b-640e73a77e22</string>
              <string>20accf86-8a52-47c2-b436-974981161d93</string>
              <string>0ee1b38b-9693-49cc-a93f-d83c2162abea</string>
              <string>0d1732eb-79c8-47b1-a829-58be289cee1f</string>
              <string>f4c513ef-f1ab-470a-bff5-d505363dd0cb</string>
              <string>049fa85e-9f9b-4f3a-8ccf-f970405e2ff5</string>
              <string>698319a5-6a40-439f-a2fc-77968f8fd8b0</string>
              <string>cbd38b8f-9f4f-45d0-842b-f7953d49a9e9</string>
              <string>a34ca889-a825-42c2-b8d2-eade79050a7b</string>
              <string>e28b6034-657f-44fe-bdfb-2eb08f6b8b9d</string>
              <string>8bf57726-afe4-4bf2-ab11-a811a2a90173</string>
              <string>7f99cb7e-9df9-4f60-9035-692e83174470</string>
              <string>342b2c7f-9e89-4e32-bcd5-2b3df76c5368</string>
              <string>57123153-b415-4444-899e-5fb7f5fbe722</string>
              <string>1ef6c048-d7a7-4702-a9fa-88c3929f28d7</string>
              <string>83e1c3c5-b377-47cf-89d5-71d6251deee4</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.9.1">
                <id>5aca6564-b2be-480e-8f40-9f99e811ad34</id>
                <name>DateFHIRToHl7</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597480587</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
// HL7 formate yyyy/MM/ddTHH:mm:ss
function DateFHIRToHl7(dateInFhir) {

	channelMap.put(&apos;dateInFhir&apos;,dateInFhir);
	channelMap.put(&apos;year&apos;,dateInFhir.substring(0,4));
	channelMap.put(&apos;MM&apos;,dateInFhir.substring(5,7));
	channelMap.put(&apos;dd&apos;,dateInFhir.substring(8,10));
	channelMap.put(&apos;HH&apos;,dateInFhir.substring(11,13));
	channelMap.put(&apos;mm&apos;,dateInFhir.substring(14,16));
	channelMap.put(&apos;ss&apos;,dateInFhir.substring(17,19));
	
	
	var HL7date =new Date(dateInFhir.substring(0,4),
	dateInFhir.substring(5,7),
	dateInFhir.substring(8,10),
	dateInFhir.substring(11,13),
	dateInFhir.substring(14,16),
	dateInFhir.substring(17,19)).getTime();
    

    return HL7date;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.9.1">
                <id>606eef4c-b703-4a5b-8cc0-aa68be7294c0</id>
                <name>DateHL7ToFHIR</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597479605</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
// HL7 formate yyyyMMddHHmmss
function DateHL7ToFHIR(DateHL7) {
	
	var FHIRdate = &apos;&apos;;
    FHIRdate += DateHL7.substring(0,4) + &apos;/&apos;;
    FHIRdate += DateHL7.substring(4,6) + &apos;/&apos;;
   FHIRdate += DateHL7.substring(6,8) + &apos;T&apos;;
   
   if(DateHL7.substring(8,10)){
   FHIRdate += DateHL7.substring(8,10) + &apos;:&apos;;
   }else {FHIRdate +=&apos;00:&apos;;}

     if(DateHL7.substring(10,12)){
   FHIRdate += DateHL7.substring(8,10) + &apos;:&apos;;
   }else {FHIRdate +=&apos;00:&apos;;}

   
     if(DateHL7.substring(12,14)){
   FHIRdate += DateHL7.substring(8,10) + &apos;:&apos;;
   }else {FHIRdate +=&apos;00&apos;;}
   

   
    FHIRdate += &apos;+GMT&apos;;
    return FHIRdate;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.9.1">
            <id>f77712da-d430-4a36-88e2-815d59b91885</id>
            <name>HL7_Limbach_DEV</name>
            <revision>1</revision>
            <lastModified>
              <time>1682597479366</time>
              <timezone>America/Bogota</timezone>
            </lastModified>
            <description>HL7</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>0c4728b1-b0fa-4d99-9d0b-640e73a77e22</string>
              <string>0ee1b38b-9693-49cc-a93f-d83c2162abea</string>
              <string>f4c513ef-f1ab-470a-bff5-d505363dd0cb</string>
              <string>698319a5-6a40-439f-a2fc-77968f8fd8b0</string>
              <string>747034d1-3b67-4648-b61d-97569079ec4f</string>
              <string>a34ca889-a825-42c2-b8d2-eade79050a7b</string>
              <string>e28b6034-657f-44fe-bdfb-2eb08f6b8b9d</string>
              <string>8bf57726-afe4-4bf2-ab11-a811a2a90173</string>
              <string>8744071f-c37e-4836-91e5-09c33fc3fc6c</string>
              <string>03226d36-9fd4-49ce-a918-28b4fb9517b3</string>
              <string>278077bd-06c4-4367-8e98-793b88f53108</string>
              <string>dd2306fc-2fd7-4a27-a082-5f8c481ec5c6</string>
              <string>1ef6c048-d7a7-4702-a9fa-88c3929f28d7</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.9.1">
                <id>8c993702-d5a3-47d5-ad5d-3a24f76fc080</id>
                <name>Update Response from RD to FireBird DB</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597481968</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function processRDResponse(senderRefReceived){
	var endingPosOfHeadId = senderRefReceived.indexOf(&quot;episodeId:&quot;);
	var headIdForSenderReference = senderRefReceived.substring(7, endingPosOfHeadId);
	var endingPosOfEpisodeId = senderRefReceived.indexOf(&quot;originalMessage:&quot;);
	var episodeIdForSenderReference = senderRefReceived.substring(endingPosOfHeadId+10, endingPosOfEpisodeId);
	var senderReferenceOrg = senderRefReceived.substring(endingPosOfEpisodeId+16);
	logger.debug(&quot;Channel 6 and Poll : Episode ID:  &quot;+episodeIdForSenderReference);	
	var text = getTEXTFromBEFUND_TEXTE(headIdForSenderReference, episodeIdForSenderReference, &quot;KB&quot;);
	if(!(input.report == &quot;&quot; || input.report == null)){
		text = text +&quot;\n&quot;+ input.report;
		logger.debug(&quot;Channel 6_D text from BEFUND_TEXTE: &quot;+text);
		updateTEXTInBEFUND_TEXTE(headIdForSenderReference, episodeIdForSenderReference, text, &quot;KB&quot;); //Shoudl be KB
		updateDetailsBEFUND_KOPF(headIdForSenderReference, episodeIdForSenderReference, &quot;CM&quot;);		
	}
	
}


/*
	The function updateDetailsBEFUND_KOPF updates the table BEFUND_KOPF
*/
function updateDetailsBEFUND_KOPF(headId, episodeId, befundStatus){
	logger.debug(&quot;Channel 6 and Poll : function updateDetailsBEFUND_KOPF headId:&quot;+headId+&quot; episodeId:&quot;+episodeId+&quot; befundStatus:&quot;+befundStatus);
	var DBCONToUpdateTEXT = getFireBirdConnection();
	try{
		var DBCONToUpdateTEXT = getFireBirdConnection();
		var SQLToUpdateTEXT = &quot;Update BEFUND_KOPF set STATUS_DRUCK=&apos;&apos;, STATUS_DATEI=&apos;N&apos; where LABOR_NUMMER=&quot;+episodeId+&quot; and ID=&quot;+headId+&quot; and BEFUND_STATUS=&apos;&quot;+befundStatus+&quot;&apos;;&quot;;
		logger.debug(&quot;Channel 6 and Poll : Query executed to update the BEFUND_KOPF: &quot;+SQLToUpdateTEXT);
		var res_TEXT_List = DBCONToUpdateTEXT.executeUpdate(SQLToUpdateTEXT);
		DBCONToUpdateTEXT.close();
	}catch(ex){
		logger.error(&quot;Error in executing the update statement:&quot;+SQLToUpdateTEXT);
		DBCONToUpdateTEXT.close();
		throw ex;
	}
}

/*
	The function updateTEXTInBEFUND_TEXTE updates the table BEFUND_TEXTE or insert&apos;s a new row to it.
*/
function updateTEXTInBEFUND_TEXTE(headId, episodeId, text, text_art){
	var DBCONToUpdateTEXT = getFireBirdConnection();
	try{
		var DBCONToUpdateTEXT = getFireBirdConnection();
		var SQLToUpdateTEXT = &quot;update BEFUND_TEXTE set TEXT = &apos;&quot;+text+&quot;&apos; where LABOR_NUMMER=&quot;+episodeId+&quot; and BEFKOPFID=&quot;+headId+&quot; and TEXT_ART=&apos;&quot;+text_art+&quot;&apos;;&quot;;
		logger.debug(&quot;Channel 6 and Poll : Query executed to update the updateTEXTInBEFUND_TEXTE: &quot;+SQLToUpdateTEXT);
		var resOfUpdateTEXT = DBCONToUpdateTEXT.executeUpdate(SQLToUpdateTEXT);
		logger.debug(&quot;Channel 6 and Poll : Value of the result s&quot;+resOfUpdateTEXT);
		DBCONToUpdateTEXT.close();	
		DBCONToUpdateTEXT = getFireBirdConnection();
		if(resOfUpdateTEXT == 0){ 
			var SQLToInsertTEXT = &quot;INSERT INTO BEFUND_TEXTE (BEFKOPFID, LABOR_NUMMER, LFDNR_AUFTRAG, PROBE_ID, TEXT_ART, TEXT) VALUES (&quot;+headId+&quot;,&quot;+episodeId+&quot;, Null , Null, &apos;KB&apos;, &apos;&quot;+text+&quot;&apos;);&quot;;
			logger.debug(&quot;Channel 6 and Poll : Query executed to update the Insert into BEFUND_TEXTE: &quot;+SQLToInsertTEXT);
			var resOfInserteTEXT = DBCONToUpdateTEXT.executeUpdate(SQLToInsertTEXT);
			logger.debug(&quot;Channel 6 and Poll : Value of the result s&quot;+resOfInserteTEXT);	
		}
		DBCONToUpdateTEXT.close();	
		
	}catch(ex){
		logger.error(&quot; Error in executing the update statement:&quot;+SQLToUpdateTEXT);
		DBCONToUpdateTEXT.close();
		throw ex;
	}
}

/*
	Generic function to get a new FireBird Connection. 
*/
function getFireBirdConnection(){
	var FbDriver =  configurationMap.get(&quot;FbDriver&quot;);
	var FbUrl  = configurationMap.get(&quot;FbUrl&quot;);
	var FbUsername = configurationMap.get(&quot;FbUsername&quot;);
	var FbPw  = configurationMap.get(&quot;FbPw&quot;);

	var DBCON = DatabaseConnectionFactory.createDatabaseConnection(FbDriver,FbUrl,FbUsername,FbPw); 
	return DBCON;
}

/*
	The function getTEXTFromBEFUND_TEXTE gets the value of TEXT from the table BEFUND_TEXTE.
*/
function getTEXTFromBEFUND_TEXTE(headId, episodeId, text_art){
	var text = &quot;&quot;;
	var DBCONToGetTEXT = getFireBirdConnection();
	try{
		var SQLToGetTEXT = &quot;select TEXT from BEFUND_TEXTE where LABOR_NUMMER=&quot;+episodeId+&quot; and BEFKOPFID=&quot;+headId+&quot; and TEXT_ART=&apos;&quot;+text_art+&quot;&apos;;&quot;;
		logger.debug(&quot;Channel 6 and Poll : Query executed to get the TEXT: &quot;+SQLToGetTEXT);
		var res_TEXT_List = DBCONToGetTEXT.executeCachedQuery(SQLToGetTEXT);
		var size_TEXT_List = res_TEXT_List.size();
		if (size_TEXT_List &gt;0){
			for(var i = 0;i&lt;size_TEXT_List;i++){
				res_TEXT_List.next();
				text = res_TEXT_List.getString(&quot;TEXT&quot;);
			}
		}
		DBCONToGetTEXT.close();	
	}catch(ex){
		logger.error(&quot;Error in executing the get TEXT statement:&quot;+SQLToGetTEXT);
		DBCONToGetTEXT.close();	
		throw ex;
	}
	return text;	
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.9.1">
            <id>833c5444-6415-4d62-a76b-caa39589c2fa</id>
            <name>Mirth</name>
            <revision>1</revision>
            <lastModified>
              <time>1682597479347</time>
              <timezone>America/Bogota</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>0c4728b1-b0fa-4d99-9d0b-640e73a77e22</string>
              <string>0ee1b38b-9693-49cc-a93f-d83c2162abea</string>
              <string>f4c513ef-f1ab-470a-bff5-d505363dd0cb</string>
              <string>698319a5-6a40-439f-a2fc-77968f8fd8b0</string>
              <string>747034d1-3b67-4648-b61d-97569079ec4f</string>
              <string>a34ca889-a825-42c2-b8d2-eade79050a7b</string>
              <string>e28b6034-657f-44fe-bdfb-2eb08f6b8b9d</string>
              <string>8bf57726-afe4-4bf2-ab11-a811a2a90173</string>
              <string>8744071f-c37e-4836-91e5-09c33fc3fc6c</string>
              <string>03226d36-9fd4-49ce-a918-28b4fb9517b3</string>
              <string>278077bd-06c4-4367-8e98-793b88f53108</string>
              <string>dd2306fc-2fd7-4a27-a082-5f8c481ec5c6</string>
              <string>1ef6c048-d7a7-4702-a9fa-88c3929f28d7</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.9.1">
                <id>b9eceb1d-8abb-4931-8247-209d70519f99</id>
                <name>Fix HL7v2 Node Order</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597479881</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*

	See issue: http://www.mirthcorp.com/community/issues/browse/MIRTH-625

	Author: Nick Rupley
	Date Modified: 4/18/2012

	fixHL7NodeOrder: Returns a new E4X node where the order of all siblings and descendants have been fixed as per the Mirth HL7 dot notation convention.

	Arguments
	---------
		Required
		--------
		node: The node to be fixed. 
*/
function fixHL7NodeOrder(node) {
	// Create output node
	var newNode = new XML();
	// In case the node is an XMLList of multiple siblings, loop through each sibling
	for each (sibling in node) {
		// Create new sibling node
		var newSibling = new XML(&apos;&lt;&apos;+sibling.name().toString()+&apos;/&gt;&apos;);
		// Iterate through each child node
		for each (child in sibling.children())
			// If the child has its own children, then recursively fix the node order of the child
			if (child.hasComplexContent())
				newSibling.appendChild(fixHL7NodeOrder(child));
			// If the child doesn&apos;t have its own children, then just add the child to the new sibling node
			else
				newSibling.appendChild(child);
		// After recursively fixing all of the child nodes, now we&apos;ll fix the current node
		newNode += sortHL7Node(newSibling);
	}
	// Return the fixed node
	return newNode;
}

function sortHL7Node(node) {
	// If the node has no children, then there&apos;s nothing to sort
	if (node.hasSimpleContent())
		return node;
	// Create new output node
	var newNode = new XML(&apos;&lt;&apos;+node.name().toString()+&apos;/&gt;&apos;);
	// Iterate through each child in the node
	for each (child in node.children()) {
		// If the child has a QName, then we can sort on it
		if (child.name()) {
			// Get the current &quot;index&quot; of the child. Id est, if the QName is PID.3.1, then the index is 1
			curChildIndex = parseInt(child.name().toString().substring(child.name().toString().lastIndexOf(&apos;.&apos;)+1),10);
			// Boolean placeholder
			var inserted = false;
			// Iterate through each child currently in the NEW node
			for (var i = 0; i &lt;= newNode.children().length()-1; i++) {
				// Get the index of the child of the new node
				loopChildIndex = parseInt(newNode.child(i).name().toString().substring(newNode.child(i).name().toString().lastIndexOf(&apos;.&apos;)+1),10);
				// If the child we want to insert has a lower index then the current child of the new node, then we&apos;re going to insert the child 
				// right before the current newNode child
				if (curChildIndex &lt; loopChildIndex) {
					// Insert the child
					newNode.insertChildBefore(newNode.children()[i],child);
					// Set our flag, indicating that an insertion was made
					inserted = true;
					// No need to continue iteration
					break;
				}
			}
			// If no insertion was made, then the index of the child we want to insert is greater than or equal to all of the
			// indices of the children that have already been inserted in newNode. So, we&apos;ll just append the child to the end.
			if (!inserted)
				newNode.appendChild(child);
		}
	}
	// Return the sorted HL7 node
	return newNode;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.9.1">
            <id>be8c75bc-37f7-48dc-a26e-b9e50c6f285a</id>
            <name>PKS CDS</name>
            <revision>2</revision>
            <lastModified>
              <time>1702919075443</time>
              <timezone>America/Bogota</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>false</includeNewChannels>
            <enabledChannelIds>
              <string>0c4728b1-b0fa-4d99-9d0b-640e73a77e22</string>
              <string>6df4f01c-e2ee-400b-8f23-547df6db1358</string>
              <string>0ee1b38b-9693-49cc-a93f-d83c2162abea</string>
              <string>f4c513ef-f1ab-470a-bff5-d505363dd0cb</string>
              <string>698319a5-6a40-439f-a2fc-77968f8fd8b0</string>
              <string>e587470e-5f72-4c81-842e-3e1339eb1201</string>
              <string>747034d1-3b67-4648-b61d-97569079ec4f</string>
              <string>a34ca889-a825-42c2-b8d2-eade79050a7b</string>
              <string>e28b6034-657f-44fe-bdfb-2eb08f6b8b9d</string>
              <string>8bf57726-afe4-4bf2-ab11-a811a2a90173</string>
              <string>8744071f-c37e-4836-91e5-09c33fc3fc6c</string>
              <string>00680d42-b755-42ec-9957-08ae467c47c9</string>
              <string>838cdb58-cd3d-4797-8dd6-b4121788e3d2</string>
              <string>7d58b0b3-0cef-4430-b961-132df6a81f2d</string>
              <string>03226d36-9fd4-49ce-a918-28b4fb9517b3</string>
              <string>278077bd-06c4-4367-8e98-793b88f53108</string>
              <string>dd2306fc-2fd7-4a27-a082-5f8c481ec5c6</string>
              <string>1ef6c048-d7a7-4702-a9fa-88c3929f28d7</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>986eb897-48ee-4c13-a49e-5fe992750df4</string>
              <string>05c4aca3-6525-46ce-bbe6-f24587a6b797</string>
              <string>4ad0d0dd-e291-4499-a9d5-dbff3da6a6eb</string>
              <string>6b208dbe-9531-4997-80d8-7925e426efc3</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.9.1">
                <id>1f49c0be-e926-4cf0-be12-2ff8d87a5881</id>
                <name>ConnectMySQL</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597480511</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function ConnectMySQL() {

var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;com.mysql.jdbc.Driver&apos;,&apos;jdbc:mysql://localhost:3306/aipdata&apos;,&apos;root&apos;,&apos;DeliveryTe@m&apos;);

return dbConn;
}

function ConnectMySQLSAS() {
var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;com.mysql.jdbc.Driver&apos;,&apos;jdbc:mysql://localhost:3306/cds&apos;,&apos;root&apos;,&apos;password&apos;);

return dbConn;	
}

function ConnectMySQLHaematology() {
var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;com.mysql.jdbc.Driver&apos;,&apos;jdbc:mysql://localhost:3369/haematology&apos;,&apos;mirth&apos;,&apos;DeliveryTe@m&apos;);

return dbConn;	

}

function ConnectMySQLMI3() {
var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;com.mysql.jdbc.Driver&apos;,&apos;jdbc:mysql://localhost:3369/mi3&apos;,&apos;mirth&apos;,&apos;DeliveryTe@m&apos;);
return dbConn;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.9.1">
                <id>ecf96a6d-b5d6-4c13-b16a-c31a253cb9bb</id>
                <name>Get_CDS_Connection</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597480823</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
JavaScript function to centralise creation of a database connection. The
connection won&apos;t be open, the caller still needs to do this but all constants
will be instantiated here

@return dbConn returns an instance of a returns a new DatabaseConnection object
*/
function Get_CDS_Connection() {
var dbConn = $gc(&apos;dbConn&apos;);

if (!dbConn || dbConn.getConnection().isClosed()) {
var dbConn = DatabaseConnectionFactory.createDatabaseConnection($(&apos;CDS_Driver_Name&apos;), $(&apos;CDS_DB_URL&apos;), $(&apos;CDS_DB_UserName&apos;), $(&apos;CDS_DB_Password&apos;));
$gc(&apos;dbConn&apos;, dbConn);
}

return dbConn;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.9.1">
                <id>8e116c30-555e-4d03-97c8-0dd649526eda</id>
                <name>Get_Latest_Episode_For_EpisodeID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597481261</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
				function get_latest_episode_for_episodeID(episodeIDList) {
				  var dbConn = Get_CDS_Connection();
				  var sql = &quot;SELECT * FROM cds_data WHERE EpisodeID = ? ORDER BY EpisodeDateTime DESC LIMIT 1&quot;;
				  var latestEpisode = &quot;&quot;;
				  	try {
				  		var latestEpisode = dbConn.executeCachedQuery(sql, episodeIDList);
				  	} catch (exception) {
				  		logger.error(&quot;Error when inserting data: &quot; + exception);
				  	} finally {
				  		dbConn.close();
				  	}
				  return latestEpisode;
				}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.9.1">
                <id>5c27c0de-56d5-4eb9-bc17-a5ad0805f34a</id>
                <name>Insert_CDS_Data</name>
                <revision>2</revision>
                <lastModified>
                  <time>1702919075490</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>// Insert CDS data into rd_staging.cds_data from flat file source

function Insert_CDS_Data(PatientID,PatientFamilyName,PatientGivenName,PatientTitle,PatientDOB,PatientSex,PatientStreetAddress,PatientCity,PatientPostalCode,PatientState,PatientCountry,PatientStatus,PatientPregnancyFlag,PatientFastingFlag,EpisodeID,EpisodeOrderedTests, EpisodeDateTime,EpisodeClinicalNotes,AccountType,AccountClass,BillTo,BillingAddress,PatientPublicHealthIdentifier,EpisodePublicScheduleCode,PatientPrivateHealthFundName,PatientPrivateHealthFundID,ReqPhysicianID,ReqPhysicianName,ReqPhysicianSpeciality,ReqPhysicianDeliveryAddress,SugeryName,SurgeryCode,SurgeryAddress,SurgeryPostalCode,CopyPhysicianIDList,CopyPhysicianNameList,PanelIndicator,PanelID,PanelName,SampleID,SampleFluidType,SampleOriginLocation,SampleOriginSubLocation,SampleCollectionDateTime,SampleCollectionMethod,TestSiteSampleReceivedDateTime,TestLISCode,TestLISName,TestValue,TestNormalRange,TestUnits,TestPriority,TestDepartment,TestInstrument,TestRequestSite,TestSite,TestType,AbnormalFlag,TestOrderedDateTime,TestAnalyzerCompletionDateTime,TestResultFirstReviewedDateTime,TestResultReleasedDateTime)
{

	try {
		var dbConn = Get_CDS_Connection();

		var _returnValue = 1;
		var _sqlQuery = &quot;CALL rd_staging.rdInsCDSData (&apos;&quot; + PatientID + &quot;&apos;&quot;+&quot;, \
									&apos;&quot; + PatientFamilyName + &quot;&apos;&quot;+&quot;, \
									&apos;&quot; + PatientGivenName + &quot;&apos;&quot;+&quot;, \
									&apos;&quot; + PatientTitle + &quot;&apos;&quot;+&quot;, \
									&apos;&quot; + PatientDOB + &quot;&apos;&quot;+&quot;, \
									&apos;&quot; + PatientSex + &quot;&apos;&quot;+&quot;, \
									&apos;&quot; + PatientStreetAddress + &quot;&apos;&quot;+&quot;, \
									&apos;&quot; + PatientCity + &quot;&apos;&quot;+&quot;, \
									&apos;&quot; + PatientPostalCode + &quot;&apos;&quot;+&quot;, \
									&apos;&quot; + PatientState + &quot;&apos;&quot;+&quot;, \
									&apos;&quot; + PatientCountry + &quot;&apos;&quot;+&quot;, \
									&apos;&quot; + PatientStatus + &quot;&apos;&quot;+&quot;, \
									&apos;&quot; + PatientPregnancyFlag + &quot;&apos;&quot;+&quot;, \
									&apos;&quot; + PatientFastingFlag + &quot;&apos;&quot;+&quot;, \
									&apos;&quot; + EpisodeID + &quot;&apos;&quot;+&quot;, \
									&apos;&quot; + EpisodeOrderedTests + &quot;&apos;&quot;
									+ &quot;, &quot; + buildStringIfNotNull(EpisodeDateTime) +&quot;, \
									&apos;&quot; + EpisodeClinicalNotes + &quot;&apos;&quot;+&quot;, \
									&apos;&quot; + AccountType + &quot;&apos;&quot;+&quot;, \
									&apos;&quot; + AccountClass + &quot;&apos;&quot;+&quot;, \
									&apos;&quot; + BillTo + &quot;&apos;&quot;+&quot;, \
									&apos;&quot; + BillingAddress + &quot;&apos;&quot;+&quot;, \
									&apos;&quot; + PatientPublicHealthIdentifier + &quot;&apos;, \
									&apos;&quot; + EpisodePublicScheduleCode + &quot;&apos;, \
									&apos;&quot; + PatientPrivateHealthFundName + &quot;&apos;, \
									&apos;&quot; + PatientPrivateHealthFundID + &quot;&apos;, \
									&apos;&quot; + ReqPhysicianID + &quot;&apos;, \
									&apos;&quot; + ReqPhysicianName + &quot;&apos;, \
									&apos;&quot; + ReqPhysicianSpeciality + &quot;&apos;, \
									&apos;&quot; + ReqPhysicianDeliveryAddress + &quot;&apos;, \
									&apos;&quot; + SugeryName + &quot;&apos;, \
									&apos;&quot; + SurgeryCode + &quot;&apos;, \
									&apos;&quot; + SurgeryAddress + &quot;&apos;, \
									&apos;&quot; + SurgeryPostalCode + &quot;&apos;, \
									&apos;&quot; + CopyPhysicianIDList + &quot;&apos;, \
									&apos;&quot; + CopyPhysicianNameList + &quot;&apos;, \
									&apos;&quot; + PanelIndicator + &quot;&apos;, \
									&apos;&quot; + PanelID + &quot;&apos;, \
									&apos;&quot; + PanelName + &quot;&apos;, \
									&apos;&quot; + SampleID + &quot;&apos;, \
									&apos;&quot; + SampleFluidType + &quot;&apos;, \
									&apos;&quot; + SampleOriginLocation + &quot;&apos;, \
									&apos;&quot; + SampleOriginSubLocation + &quot;&apos;, \
									&apos;&quot; + SampleCollectionDateTime + &quot;&apos;, \
									&apos;&quot; + SampleCollectionMethod + &quot;&apos;, \
									&apos;&quot; + TestSiteSampleReceivedDateTime + &quot;&apos;, \
									&apos;&quot; + TestLISCode + &quot;&apos;, \
									&apos;&quot; + TestLISName + &quot;&apos;, \
									&apos;&quot; + TestValue + &quot;&apos;, \
									&apos;&quot; + TestNormalRange + &quot;&apos;, \
									&apos;&quot; + TestUnits + &quot;&apos;, \
									&apos;&quot; + TestPriority + &quot;&apos;, \
									&apos;&quot; + TestDepartment + &quot;&apos;, \
									&apos;&quot; + TestInstrument + &quot;&apos;, \
									&apos;&quot; + TestRequestSite + &quot;&apos;, \
									&apos;&quot; + TestSite + &quot;&apos;, \
									&apos;&quot; + TestType + &quot;&apos;, \
									&apos;&quot; + AbnormalFlag + &quot;&apos;, \
									&apos;&quot; + TestOrderedDateTime + &quot;&apos;, \
									&apos;&quot; + TestAnalyzerCompletionDateTime + &quot;&apos;, \
									&apos;&quot; + TestResultFirstReviewedDateTime + &quot;&apos;, \
									&apos;&quot; + TestResultReleasedDateTime + &quot;&apos;)&quot;;

		var _sqlResult = dbConn.executeCachedQuery(_sqlQuery);

		if(_sqlResult.next()) {
			_returnValue = _sqlResult.getInt(1);
			_returnValue = parseInt(_returnValue, 10);
		}
		return _returnValue;
	}
	catch(ex) {
		logger.error(&quot;PKS - Insert_CDS_Data - Exception: &quot;+ ex);
		throw ex;
	}
	finally {
	//	dbConn.close();
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.9.1">
                <id>c86e8913-8152-422e-aa5e-f63f7c25d279</id>
                <name>Insert_RippleDown_Response</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597481788</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function insert_rippleDown_response(patientID, patientFamilyName, patientGivenName, episodeId, episodeDateTime, testLISCode, testLISName, testValue, processed_YN) {
				      var params = new java.util.ArrayList();
			    	  params.add(patientID);
			    	  params.add(patientFamilyName);
			    	  params.add(patientGivenName);
			    	  params.add(episodeDateTime);
			    	  params.add(episodeId);
			    	  params.add(testLISCode);
			    	  params.add(testLISName);
			    	  params.add(testValue);
			    	  params.add(processed_YN);

				      var dbConn = Get_CDS_Connection();
				      var sql = &quot;INSERT INTO cds_data(PatientID, PatientFamilyName, PatientGivenName, EpisodeDateTime, EpisodeID, testLISCode, TestLISName, TestValue, Processed_YN) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)&quot;;
				      try {
				        var result = dbConn.executeUpdate(sql, params);
				      } catch (exception) {
				        logger.error(&quot;Error when inserting data: &quot; + exception);
				      } finally {
				        dbConn.close();
				      }
				  }</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.9.1">
                <id>519f869e-22ee-4082-8871-acd8b67e9240</id>
                <name>Peek_CDS_Data</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597481616</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function Check_Unprocessed_Data() {
	var dbConn = Get_CDS_Connection();
	var rowCount = 0;

	var sqlResult = null;
	try {
		var returnValue = 1;

		var sqlQuery = &quot;call rd_staging.rdSelCDSCount()&quot;;

		logger.trace(&quot;SQL &quot; + sqlQuery);

		sqlResult = dbConn.executeCachedQuery(sqlQuery);
		if (sqlResult.next()) {
			rowCount = sqlResult.getInt(&apos;StatusCode&apos;);
		}
	} finally {
		// Do nothing right now...
		if  (sqlResult != null) {
			//sqlResult.close();
		}
	}
	return rowCount;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.9.1">
                <id>526bcc34-e16b-48cb-98b6-ca763bad259c</id>
                <name>Records_To_Process</name>
                <revision>2</revision>
                <lastModified>
                  <time>1702919075722</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function recordsToProcess() {	
	if (Check_Unprocessed_Data() &gt; 0) {
		return true;
	} else {
		return false;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.9.1">
                <id>0f0fea61-ff2b-470f-9452-4d395117df82</id>
                <name>Select_CDS_Data</name>
                <revision>2</revision>
                <lastModified>
                  <time>1702919075813</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function Select_CDS_Data() {
	var currEpisodeID = &quot;&quot;;
	var currEpisode;
	var currPatientID = &quot;&quot;;
	var currStatus = &quot;&quot;;
	var episodes = [];
	var episodeSize = 0;
	var resp;

	var dbConn = Get_CDS_Connection();
	try {
		var sqlQuery = &quot;call rd_staging.rdSelCDSData()&quot;;

		var sqlResult = dbConn.executeCachedQuery(sqlQuery);
		// We can assume there will always be at least one row, even if there are no records to process
		// Let&apos;s check the result set
		var colCount = sqlResult.getMetaData().getColumnCount();
		// We&apos;re checking for the column count, if it is 2 then it&apos;s just a return code and message

		if (colCount == 2) {
			sqlResult.next();
			logger.trace(&quot;PKS - Select_CDS_Data - Info: &quot; + sqlResult.getString(&quot;Message&quot;));
			return false;
		} else {
			while (sqlResult.next()) {
				tmpEpisodeID		               = sqlResult.getString(&quot;EpisodeID&quot;);
				tmpEpisodeOrderedTests             = sqlResult.getString(&quot;EpisodeOrderedTests&quot;);
				tmpPatientID		               = sqlResult.getString(&quot;PatientID&quot;);
				tmpPatientSurname	               = sqlResult.getString(&quot;PatientFamilyName&quot;);
				tmpEpisodeDateTime   	          = sqlResult.getString(&quot;EpisodeDateTime&quot;);
				tmpPatientDOB		               = sqlResult.getString(&quot;PatientDOB&quot;);
				tmpTestSite		               = sqlResult.getString(&quot;TestSite&quot;);
				tmpPatientFamilyName               = sqlResult.getString(&quot;PatientFamilyName&quot;);
				tmpPatientGivenName                = sqlResult.getString(&quot;PatientGivenName&quot;);
				tmpPatientTitle                    = sqlResult.getString(&quot;PatientTitle&quot;);
				tmpPatientSex                      = sqlResult.getString(&quot;PatientSex&quot;);
				tmpPatientStreetAddress            = sqlResult.getString(&quot;PatientStreetAddress&quot;);
				tmpPatientCity                     = sqlResult.getString(&quot;PatientCity&quot;);
				tmpPatientPostalCode               = sqlResult.getString(&quot;PatientPostalCode&quot;);
				tmpPatientState                    = sqlResult.getString(&quot;PatientState&quot;);
				tmpPatientCountry                  = sqlResult.getString(&quot;PatientCountry&quot;);
				tmpPatientStatus                   = sqlResult.getString(&quot;PatientStatus&quot;);
				tmpPatientPregnancyFlag            = sqlResult.getString(&quot;PatientPregnancyFlag&quot;);
				tmpPatientFastingFlag              = sqlResult.getString(&quot;PatientFastingFlag&quot;);
				tmpEpisodeClinicalNotes            = sqlResult.getString(&quot;EpisodeClinicalNotes&quot;);
				tmpAccountType                     = sqlResult.getString(&quot;AccountType&quot;);
				tmpAccountClass                    = sqlResult.getString(&quot;AccountClass&quot;);
				tmpBillTo                          = sqlResult.getString(&quot;BillTo&quot;);
				tmpBillingAddress                  = sqlResult.getString(&quot;BillingAddress&quot;);
				tmpPatientPublicHealthIdentifier   = sqlResult.getString(&quot;PatientPublicHealthIdentifier&quot;);
				tmpEpisodePublicScheduleCode       = sqlResult.getString(&quot;EpisodePublicScheduleCode&quot;);
				tmpPatientPrivateHealthFundName    = sqlResult.getString(&quot;PatientPrivateHealthFundName&quot;);
				tmpPatientPrivateHealthFundID      = sqlResult.getString(&quot;PatientPrivateHealthFundID&quot;);
				tmpReqPhysicianID                  = sqlResult.getString(&quot;ReqPhysicianID&quot;);
				tmpReqPhysicianName                = sqlResult.getString(&quot;ReqPhysicianName&quot;);
				tmpReqPhysicianSpeciality          = sqlResult.getString(&quot;ReqPhysicianSpeciality&quot;);
				tmpReqPhysicianDeliveryAddress     = sqlResult.getString(&quot;ReqPhysicianDeliveryAddress&quot;);
				tmpSugeryName                      = sqlResult.getString(&quot;SugeryName&quot;);
				tmpSurgeryCode                     = sqlResult.getString(&quot;SurgeryCode&quot;);
				tmpSurgeryAddress                  = sqlResult.getString(&quot;SurgeryAddress&quot;);
				tmpSurgeryPostalCode               = sqlResult.getString(&quot;SurgeryPostalCode&quot;);
				tmpCopyPhysicianIDList             = sqlResult.getString(&quot;CopyPhysicianIDList&quot;);
				tmpCopyPhysicianNameList           = sqlResult.getString(&quot;CopyPhysicianNameList&quot;);
				tmpPanelIndicator                  = sqlResult.getString(&quot;PanelIndicator&quot;);
				tmpPanelID                         = sqlResult.getString(&quot;PanelID&quot;);
				tmpPanelName                       = sqlResult.getString(&quot;PanelName&quot;);
				tmpSampleID                        = sqlResult.getString(&quot;SampleID&quot;);
				tmpSampleFluidType                 = sqlResult.getString(&quot;SampleFluidType&quot;);
				tmpSampleOriginLocation            = sqlResult.getString(&quot;SampleOriginLocation&quot;);
				tmpSampleOriginSubLocation         = sqlResult.getString(&quot;SampleOriginSubLocation&quot;);
				tmpSampleCollectionDateTime        = sqlResult.getString(&quot;SampleCollectionDateTime&quot;);
				tmpSampleCollectionMethod          = sqlResult.getString(&quot;SampleCollectionMethod&quot;);
				tmpTestSiteSampleReceivedDateTime  = sqlResult.getString(&quot;TestSiteSampleReceivedDateTime&quot;);
				tmpTestPriority                    = sqlResult.getString(&quot;TestPriority&quot;);
				tmpTestDepartment                  = sqlResult.getString(&quot;TestDepartment&quot;);
				tmpTestInstrument                  = sqlResult.getString(&quot;TestInstrument&quot;);
				tmpTestRequestSite                 = sqlResult.getString(&quot;TestRequestSite&quot;);
				tmpTestSite                        = sqlResult.getString(&quot;TestSite&quot;);
				tmpTestType                        = sqlResult.getString(&quot;TestType&quot;);
				tmpAbnormalFlag                    = sqlResult.getString(&quot;AbnormalFlag&quot;);
				tmpTestOrderedDateTime             = sqlResult.getString(&quot;TestOrderedDateTime&quot;);
				tmpTestAnalyzerCompletionDateTime  = sqlResult.getString(&quot;TestAnalyzerCompletionDateTime&quot;);
				tmpTestResultFirstReviewedDateTime = sqlResult.getString(&quot;TestResultFirstReviewedDateTime&quot;);
				tmpTestResultReleasedDateTime      = sqlResult.getString(&quot;TestResultReleasedDateTime&quot;);
				tmpEpisodeDate		= DateUtil.getDate(&quot;yyyy-MM-dd HH:mm:ss&quot;, tmpEpisodeDateTime).getTime();

				// Check whether we moved onto a different episode, if we did and it hadn&apos;t already been processed then send a new
				// case...
				if ((tmpEpisodeID != currEpisodeID)) {
					if ($(&apos;cases_from_most_recent_episode_only&apos;) != &apos;true&apos;) {
						if (currEpisodeID != &quot;&quot;) {
							if (currStatus == &quot;N&quot;) {
								var currPatient = {&quot;caseId&quot;: currEpisodeID , site: &quot;&quot;, episodes: []};
								currPatient.episodes = episodes;
								// We&apos;re putting the batchSeq into the JSON message, the destination channel can split this out for use later
								// This is used for updating the records once the records are successfully sent to the web service
								var currMessage = {&quot;batchSeq&quot;: batchSeq, &quot;episodeID&quot;: currEpisodeID, Patient: currPatient};

								var json = JSON.stringify(currPatient);
								logger.trace(&quot;JSON Routing to REST CLIENT: &quot; + json);
								// Send the JSON Object to the Web Service channel
								resp = router.routeMessage(&quot;Rest Client&quot;, JSON.stringify(currMessage));
								if (resp) {
									logger.trace(&quot;Response from REST Channel: &quot; + resp.getMessage());
								}
							}
						}
					}

					episodeSize = episodes.push({episodeDate: tmpEpisodeDate,
											episodeId: tmpEpisodeID,
											attributeWithValues: [{externalName: &quot;PID&quot;, name: &quot;PID&quot;, value: tmpPatientID},
															{externalName: &quot;BIRTHDATE&quot;, name: &quot;BIRTHDATE&quot;, value: tmpPatientDOB},
															{externalName: &quot;LASTNAME&quot;, name: &quot;LASTNAME&quot;, value: tmpPatientSurname},
															{externalName: &quot;EpisodeOrderedTests&quot;, name: &quot;EpisodeOrderedTests&quot;, value: tmpEpisodeOrderedTests},
															{externalName: &quot;Site&quot;, name: &quot;Site&quot;, value: tmpTestSite},
															{externalName: &quot;PatientFamilyName&quot;, name : &quot;PatientFamilyName&quot;, value: tmpPatientFamilyName},
															{externalName: &quot;PatientGivenName&quot;, name : &quot;PatientGivenName&quot;, value: tmpPatientGivenName},
															{externalName: &quot;PatientTitle&quot;, name : &quot;PatientTitle&quot;, value: tmpPatientTitle},
															{externalName: &quot;PatientSex&quot;, name : &quot;PatientSex&quot;, value: tmpPatientSex},
															{externalName: &quot;PatientStreetAddress&quot;, name : &quot;PatientStreetAddress&quot;, value: tmpPatientStreetAddress},
															{externalName: &quot;PatientCity&quot;, name : &quot;PatientCity&quot;, value: tmpPatientCity},
															{externalName: &quot;PatientPostalCode&quot;, name : &quot;PatientPostalCode&quot;, value: tmpPatientPostalCode},
															{externalName: &quot;PatientState&quot;, name : &quot;PatientState&quot;, value: tmpPatientState},
															{externalName: &quot;PatientCountry&quot;, name : &quot;PatientCountry&quot;, value: tmpPatientCountry},
															{externalName: &quot;PatientStatus&quot;, name : &quot;PatientStatus&quot;, value: tmpPatientStatus},
															{externalName: &quot;PatientPregnancyFlag&quot;, name : &quot;PatientPregnancyFlag&quot;, value: tmpPatientPregnancyFlag},
															{externalName: &quot;PatientFastingFlag&quot;, name : &quot;PatientFastingFlag&quot;, value: tmpPatientFastingFlag}	,
															{externalName: &quot;PatientGivenName&quot;, name : &quot;externalName&quot;, value: tmpPatientGivenName},
															{externalName: &quot;EpisodeClinicalNotes&quot;, name: &quot;EpisodeClinicalNotes&quot;, value: tmpEpisodeClinicalNotes},
															{externalName: &quot;AccountType&quot;, name: &quot;AccountType&quot;, value: tmpAccountType},
															{externalName: &quot;AccountClass&quot;, name: &quot;AccountClass&quot;, value: tmpAccountClass},
															{externalName: &quot;BillTo&quot;, name: &quot;BillTo&quot;, value: tmpBillTo},
															{externalName: &quot;PatientPublicHealthIdentifier&quot;, name: &quot;PatientPublicHealthIdentifier&quot;, value: tmpPatientPublicHealthIdentifier},
															{externalName: &quot;EpisodePublicScheduleCode&quot;, name: &quot;EpisodePublicScheduleCode&quot;, value: tmpEpisodePublicScheduleCode},
															{externalName: &quot;PatientPrivateHealthFundName&quot;, name: &quot;PatientPrivateHealthFundName&quot;, value: tmpPatientPrivateHealthFundName},
															{externalName: &quot;PatientPrivateHealthFundID&quot;, name: &quot;PatientPrivateHealthFundID&quot;, value: tmpPatientPrivateHealthFundID},
															{externalName: &quot;ReqPhysicianID&quot;, name: &quot;ReqPhysicianID&quot;, value: tmpReqPhysicianID},
															{externalName: &quot;ReqPhysicianName&quot;, name: &quot;ReqPhysicianName&quot;, value: tmpReqPhysicianName},
															{externalName: &quot;ReqPhysicianSpeciality&quot;, name: &quot;ReqPhysicianSpeciality&quot;, value: tmpReqPhysicianSpeciality},
															{externalName: &quot;SugeryName&quot;, name: &quot;SugeryName&quot;, value: tmpSugeryName},
															{externalName: &quot;SurgeryCode&quot;, name: &quot;SurgeryCode&quot;, value: tmpSurgeryCode},
															{externalName: &quot;CopyPhysicianIDList&quot;, name: &quot;CopyPhysicianIDList&quot;, value: tmpCopyPhysicianIDList},
															{externalName: &quot;CopyPhysicianNameList&quot;, name: &quot;CopyPhysicianNameList&quot;, value: tmpCopyPhysicianNameList},
															{externalName: &quot;PanelIndicator&quot;, name: &quot;PanelIndicator&quot;, value: tmpPanelIndicator},
															{externalName: &quot;PanelID&quot;, name: &quot;PanelID&quot;, value: tmpPanelID},
															{externalName: &quot;PanelName&quot;, name: &quot;PanelName&quot;, value: tmpPanelName},
															{externalName: &quot;SampleID&quot;, name: &quot;SampleID&quot;, value: tmpSampleID},
															{externalName: &quot;SampleFluidType&quot;, name: &quot;SampleFluidType&quot;, value: tmpSampleFluidType},
															{externalName: &quot;SampleOriginLocation&quot;, name: &quot;SampleOriginLocation&quot;, value: tmpSampleOriginLocation},
															{externalName: &quot;SampleOriginSubLocation&quot;, name: &quot;SampleOriginSubLocation&quot;, value: tmpSampleOriginSubLocation},
															{externalName: &quot;SampleCollectionDateTime&quot;, name: &quot;SampleCollectionDateTime&quot;, value: tmpSampleCollectionDateTime},
															{externalName: &quot;SampleCollectionMethod&quot;, name: &quot;SampleCollectionMethod&quot;, value: tmpSampleCollectionMethod},
															{externalName: &quot;TestSiteSampleReceivedDateTime&quot;, name: &quot;TestSiteSampleReceivedDateTime&quot;, value: tmpTestSiteSampleReceivedDateTime},
															{externalName: &quot;TestPriority&quot;, name: &quot;TestPriority&quot;, value: tmpTestPriority},
															{externalName: &quot;TestRequestSite&quot;, name: &quot;TestRequestSite&quot;, value: tmpTestRequestSite},
															{externalName: &quot;TestSite&quot;, name: &quot;TestSite&quot;, value: tmpTestSite},
															{externalName: &quot;TestType&quot;, name: &quot;TestType&quot;, value: tmpTestType},
															{externalName: &quot;TestOrderedDateTime&quot;, name: &quot;TestOrderedDateTime&quot;, value: tmpTestOrderedDateTime}]});
				}

				currEpisodeID		= tmpEpisodeID;
				currStatus		= sqlResult.getString(&quot;Processed_YN&quot;);

				tmpTestLISCode		= sqlResult.getString(&quot;TestLISCode&quot;);
				tmpTestLISName		= sqlResult.getString(&quot;TestLISName&quot;);
				tmpTestValue		= sqlResult.getString(&quot;TestValue&quot;);
				tmpTestNormalRange	= sqlResult.getString(&quot;TestNormalRange&quot;);
				tmpTestUnits		= sqlResult.getString(&quot;TestUnits&quot;);
				// batchSeq is only used when processing the records with a status of &quot;N&quot;
				// well actually the records will have a status of &quot;P&quot; for processing
				// but they haven&apos;t already beenprocessed
				batchSeq					= sqlResult.getInt(&quot;BatchSeq&quot;);

				episodes[episodeSize - 1].attributeWithValues.push({externalName: tmpTestLISCode, name: tmpTestLISName, value: tmpTestValue,
														units: tmpTestUnits, range: tmpTestNormalRange});

				/* For testing only. The API fails when sending the acxtual tests from the incoming messages*/
				//episodes[episodeSize - 1].attributeWithValues.push({externalName: &quot;GTT 120m&quot;, name: &quot;GTTP 120min&quot;, value: &quot;6.7&quot;});

				if (tmpPatientID != currPatientID){
					currPatientID = tmpPatientID;
				}
			} //end while
			if (currStatus == &quot;N&quot;) {
				var currPatient = {&quot;caseId&quot;: currEpisodeID , site: &quot;&quot;, episodes: []};
				currPatient.episodes = episodes;
				var currMessage = {&quot;batchSeq&quot;: batchSeq, &quot;episodeID&quot;: currEpisodeID, Patient: currPatient};

				var json = JSON.stringify(currPatient);
				// Send the JSON Object to the Web Service
				logger.trace(&quot;JSON Routing to REST CLIENT: &quot; + json);
				resp = router.routeMessage(&quot;Rest Client&quot;, JSON.stringify(currMessage));
				if (resp) {
					logger.trace(&quot;Response from REST Channel: &quot; + resp.getMessage());
				}
			}
			return true;
		}
	}
	catch(ex) {
		logger.error(&quot;PKS - Select_CDS_Data - Exception: &quot; + ex);
		throw ex;
	}
	finally {
	//	dbConn.close();
	}

}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.9.1">
                <id>63d95f2f-ff22-411b-b710-6656d0bbfcff</id>
                <name>Select_CDS_Data2</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597482055</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function Select_CDS_Data2() {
	var currEpisodeID = &quot;&quot;;
	var currEpisode;
	var currPatientID = &quot;&quot;;
	var currStatus = &quot;&quot;;
	var episodes = [];
	var episodeSize = 0;
	var resp;

	var dbConn = Get_CDS_Connection();
	try {
		var sqlQuery = &quot;call rd_staging.rdSelCDSData()&quot;;

		var sqlResult = dbConn.executeCachedQuery(sqlQuery);
		// We can assume there will always be at least one row, even if there are no records to process
		// Let&apos;s check the result set
		var colCount = sqlResult.getMetaData().getColumnCount();
		// We&apos;re checking for the column count, if it is 2 then it&apos;s just a return code and message

		if (colCount == 2) {
			sqlResult.next();
			logger.trace(&quot;PKS - Select_CDS_Data - Info: &quot; + sqlResult.getString(&quot;Message&quot;));
			return false;
		} else {
			while (sqlResult.next()) {
				tmpEpisodeID		               = sqlResult.getString(&quot;EpisodeID&quot;);
				tmpEpisodeOrderedTests             = sqlResult.getString(&quot;EpisodeOrderedTests&quot;);
				tmpPatientID		               = sqlResult.getString(&quot;PatientID&quot;);
				tmpPatientSurname	               = sqlResult.getString(&quot;PatientFamilyName&quot;);
				tmpEpisodeDateTime   	          = sqlResult.getString(&quot;EpisodeDateTime&quot;);
				tmpPatientDOB		               = sqlResult.getString(&quot;PatientDOB&quot;);
				tmpTestSite		               = sqlResult.getString(&quot;TestSite&quot;);
				tmpPatientFamilyName               = sqlResult.getString(&quot;PatientFamilyName&quot;);
				tmpPatientGivenName                = sqlResult.getString(&quot;PatientGivenName&quot;);
				tmpPatientTitle                    = sqlResult.getString(&quot;PatientTitle&quot;);
				tmpPatientSex                      = sqlResult.getString(&quot;PatientSex&quot;);
				tmpPatientStreetAddress            = sqlResult.getString(&quot;PatientStreetAddress&quot;);
				tmpPatientCity                     = sqlResult.getString(&quot;PatientCity&quot;);
				tmpPatientPostalCode               = sqlResult.getString(&quot;PatientPostalCode&quot;);
				tmpPatientState                    = sqlResult.getString(&quot;PatientState&quot;);
				tmpPatientCountry                  = sqlResult.getString(&quot;PatientCountry&quot;);
				tmpPatientStatus                   = sqlResult.getString(&quot;PatientStatus&quot;);
				tmpPatientPregnancyFlag            = sqlResult.getString(&quot;PatientPregnancyFlag&quot;);
				tmpPatientFastingFlag              = sqlResult.getString(&quot;PatientFastingFlag&quot;);
				tmpEpisodeClinicalNotes            = sqlResult.getString(&quot;EpisodeClinicalNotes&quot;);
				tmpAccountType                     = sqlResult.getString(&quot;AccountType&quot;);
				tmpAccountClass                    = sqlResult.getString(&quot;AccountClass&quot;);
				tmpBillTo                          = sqlResult.getString(&quot;BillTo&quot;);
				tmpBillingAddress                  = sqlResult.getString(&quot;BillingAddress&quot;);
				tmpPatientPublicHealthIdentifier   = sqlResult.getString(&quot;PatientPublicHealthIdentifier&quot;);
				tmpEpisodePublicScheduleCode       = sqlResult.getString(&quot;EpisodePublicScheduleCode&quot;);
				tmpPatientPrivateHealthFundName    = sqlResult.getString(&quot;PatientPrivateHealthFundName&quot;);
				tmpPatientPrivateHealthFundID      = sqlResult.getString(&quot;PatientPrivateHealthFundID&quot;);
				tmpReqPhysicianID                  = sqlResult.getString(&quot;ReqPhysicianID&quot;);
				tmpReqPhysicianName                = sqlResult.getString(&quot;ReqPhysicianName&quot;);
				tmpReqPhysicianSpeciality          = sqlResult.getString(&quot;ReqPhysicianSpeciality&quot;);
				tmpReqPhysicianDeliveryAddress     = sqlResult.getString(&quot;ReqPhysicianDeliveryAddress&quot;);
				tmpSugeryName                      = sqlResult.getString(&quot;SugeryName&quot;);
				tmpSurgeryCode                     = sqlResult.getString(&quot;SurgeryCode&quot;);
				tmpSurgeryAddress                  = sqlResult.getString(&quot;SurgeryAddress&quot;);
				tmpSurgeryPostalCode               = sqlResult.getString(&quot;SurgeryPostalCode&quot;);
				tmpCopyPhysicianIDList             = sqlResult.getString(&quot;CopyPhysicianIDList&quot;);
				tmpCopyPhysicianNameList           = sqlResult.getString(&quot;CopyPhysicianNameList&quot;);
				tmpPanelIndicator                  = sqlResult.getString(&quot;PanelIndicator&quot;);
				tmpPanelID                         = sqlResult.getString(&quot;PanelID&quot;);
				tmpPanelName                       = sqlResult.getString(&quot;PanelName&quot;);
				tmpSampleID                        = sqlResult.getString(&quot;SampleID&quot;);
				tmpSampleFluidType                 = sqlResult.getString(&quot;SampleFluidType&quot;);
				tmpSampleOriginLocation            = sqlResult.getString(&quot;SampleOriginLocation&quot;);
				tmpSampleOriginSubLocation         = sqlResult.getString(&quot;SampleOriginSubLocation&quot;);
				tmpSampleCollectionDateTime        = sqlResult.getString(&quot;SampleCollectionDateTime&quot;);
				tmpSampleCollectionMethod          = sqlResult.getString(&quot;SampleCollectionMethod&quot;);
				tmpTestSiteSampleReceivedDateTime  = sqlResult.getString(&quot;TestSiteSampleReceivedDateTime&quot;);
				tmpTestPriority                    = sqlResult.getString(&quot;TestPriority&quot;);
				tmpTestDepartment                  = sqlResult.getString(&quot;TestDepartment&quot;);
				tmpTestInstrument                  = sqlResult.getString(&quot;TestInstrument&quot;);
				tmpTestRequestSite                 = sqlResult.getString(&quot;TestRequestSite&quot;);
				tmpTestSite                        = sqlResult.getString(&quot;TestSite&quot;);
				tmpTestType                        = sqlResult.getString(&quot;TestType&quot;);
				tmpAbnormalFlag                    = sqlResult.getString(&quot;AbnormalFlag&quot;);
				tmpTestOrderedDateTime             = sqlResult.getString(&quot;TestOrderedDateTime&quot;);
				tmpTestAnalyzerCompletionDateTime  = sqlResult.getString(&quot;TestAnalyzerCompletionDateTime&quot;);
				tmpTestResultFirstReviewedDateTime = sqlResult.getString(&quot;TestResultFirstReviewedDateTime&quot;);
				tmpTestResultReleasedDateTime      = sqlResult.getString(&quot;TestResultReleasedDateTime&quot;);
				tmpEpisodeDate		= DateUtil.getDate(&quot;yyyy-MM-dd HH:mm:ss&quot;, tmpEpisodeDateTime).getTime();

				// Check whether we moved onto a different episode, if we did and it hadn&apos;t already been processed then send a new
				// case...
				if ((tmpEpisodeID != currEpisodeID)) {
					if ($(&apos;cases_from_most_recent_episode_only&apos;) != &apos;true&apos;) {
						if (currEpisodeID != &quot;&quot;) {
							if (currStatus == &quot;N&quot;) {
								var currPatient = {&quot;caseId&quot;: currEpisodeID , site: &quot;&quot;, episodes: []};
								currPatient.episodes = episodes;
								// We&apos;re putting the batchSeq into the JSON message, the destination channel can split this out for use later
								// This is used for updating the records once the records are successfully sent to the web service
								var currMessage = {&quot;batchSeq&quot;: batchSeq, &quot;episodeID&quot;: currEpisodeID, Patient: currPatient};

								var json = JSON.stringify(currPatient);
								logger.trace(&quot;JSON Routing to REST CLIENT: &quot; + json);
								// Send the JSON Object to the Web Service channel
								resp = router.routeMessage(&quot;Rest Client&quot;, JSON.stringify(currMessage));
								if (resp) {
									logger.trace(&quot;Response from REST Channel: &quot; + resp.getMessage());
								}
							}
						}
					}

					episodeSize = episodes.push({episodeDate: tmpEpisodeDate,
											episodeId: tmpEpisodeID,
											attributeWithValues: [{externalName: &quot;PID&quot;, name: &quot;PID&quot;, value: tmpPatientID},
															{externalName: &quot;BIRTHDATE&quot;, name: &quot;BIRTHDATE&quot;, value: tmpPatientDOB},
															{externalName: &quot;LASTNAME&quot;, name: &quot;LASTNAME&quot;, value: tmpPatientSurname},
															{externalName: &quot;EpisodeOrderedTests&quot;, name: &quot;EpisodeOrderedTests&quot;, value: tmpEpisodeOrderedTests},
															{externalName: &quot;Site&quot;, name: &quot;Site&quot;, value: tmpTestSite},
															{externalName: &quot;PatientFamilyName&quot;, name : &quot;PatientFamilyName&quot;, value: tmpPatientFamilyName},
															{externalName: &quot;PatientGivenName&quot;, name : &quot;PatientGivenName&quot;, value: tmpPatientGivenName},
															{externalName: &quot;PatientTitle&quot;, name : &quot;PatientTitle&quot;, value: tmpPatientTitle},
															{externalName: &quot;PatientSex&quot;, name : &quot;PatientSex&quot;, value: tmpPatientSex},
															{externalName: &quot;PatientStreetAddress&quot;, name : &quot;PatientStreetAddress&quot;, value: tmpPatientStreetAddress},
															{externalName: &quot;PatientCity&quot;, name : &quot;PatientCity&quot;, value: tmpPatientCity},
															{externalName: &quot;PatientPostalCode&quot;, name : &quot;PatientPostalCode&quot;, value: tmpPatientPostalCode},
															{externalName: &quot;PatientState&quot;, name : &quot;PatientState&quot;, value: tmpPatientState},
															{externalName: &quot;PatientCountry&quot;, name : &quot;PatientCountry&quot;, value: tmpPatientCountry},
															{externalName: &quot;PatientStatus&quot;, name : &quot;PatientStatus&quot;, value: tmpPatientStatus},
															{externalName: &quot;PatientPregnancyFlag&quot;, name : &quot;PatientPregnancyFlag&quot;, value: tmpPatientPregnancyFlag},
															{externalName: &quot;PatientFastingFlag&quot;, name : &quot;PatientFastingFlag&quot;, value: tmpPatientFastingFlag}	,
															{externalName: &quot;PatientGivenName&quot;, name : &quot;externalName&quot;, value: tmpPatientGivenName},
															{externalName: &quot;EpisodeClinicalNotes&quot;, name: &quot;EpisodeClinicalNotes&quot;, value: tmpEpisodeClinicalNotes},
															{externalName: &quot;AccountType&quot;, name: &quot;AccountType&quot;, value: tmpAccountType},
															{externalName: &quot;AccountClass&quot;, name: &quot;AccountClass&quot;, value: tmpAccountClass},
															{externalName: &quot;BillTo&quot;, name: &quot;BillTo&quot;, value: tmpBillTo},
															{externalName: &quot;PatientPublicHealthIdentifier&quot;, name: &quot;PatientPublicHealthIdentifier&quot;, value: tmpPatientPublicHealthIdentifier},
															{externalName: &quot;EpisodePublicScheduleCode&quot;, name: &quot;EpisodePublicScheduleCode&quot;, value: tmpEpisodePublicScheduleCode},
															{externalName: &quot;PatientPrivateHealthFundName&quot;, name: &quot;PatientPrivateHealthFundName&quot;, value: tmpPatientPrivateHealthFundName},
															{externalName: &quot;PatientPrivateHealthFundID&quot;, name: &quot;PatientPrivateHealthFundID&quot;, value: tmpPatientPrivateHealthFundID},
															{externalName: &quot;ReqPhysicianID&quot;, name: &quot;ReqPhysicianID&quot;, value: tmpReqPhysicianID},
															{externalName: &quot;ReqPhysicianName&quot;, name: &quot;ReqPhysicianName&quot;, value: tmpReqPhysicianName},
															{externalName: &quot;ReqPhysicianSpeciality&quot;, name: &quot;ReqPhysicianSpeciality&quot;, value: tmpReqPhysicianSpeciality},
															{externalName: &quot;SugeryName&quot;, name: &quot;SugeryName&quot;, value: tmpSugeryName},
															{externalName: &quot;SurgeryCode&quot;, name: &quot;SurgeryCode&quot;, value: tmpSurgeryCode},
															{externalName: &quot;CopyPhysicianIDList&quot;, name: &quot;CopyPhysicianIDList&quot;, value: tmpCopyPhysicianIDList},
															{externalName: &quot;CopyPhysicianNameList&quot;, name: &quot;CopyPhysicianNameList&quot;, value: tmpCopyPhysicianNameList},
															{externalName: &quot;PanelIndicator&quot;, name: &quot;PanelIndicator&quot;, value: tmpPanelIndicator},
															{externalName: &quot;PanelID&quot;, name: &quot;PanelID&quot;, value: tmpPanelID},
															{externalName: &quot;PanelName&quot;, name: &quot;PanelName&quot;, value: tmpPanelName},
															{externalName: &quot;SampleID&quot;, name: &quot;SampleID&quot;, value: tmpSampleID},
															{externalName: &quot;SampleFluidType&quot;, name: &quot;SampleFluidType&quot;, value: tmpSampleFluidType},
															{externalName: &quot;SampleOriginLocation&quot;, name: &quot;SampleOriginLocation&quot;, value: tmpSampleOriginLocation},
															{externalName: &quot;SampleOriginSubLocation&quot;, name: &quot;SampleOriginSubLocation&quot;, value: tmpSampleOriginSubLocation},
															{externalName: &quot;SampleCollectionDateTime&quot;, name: &quot;SampleCollectionDateTime&quot;, value: tmpSampleCollectionDateTime},
															{externalName: &quot;SampleCollectionMethod&quot;, name: &quot;SampleCollectionMethod&quot;, value: tmpSampleCollectionMethod},
															{externalName: &quot;TestSiteSampleReceivedDateTime&quot;, name: &quot;TestSiteSampleReceivedDateTime&quot;, value: tmpTestSiteSampleReceivedDateTime},
															{externalName: &quot;TestPriority&quot;, name: &quot;TestPriority&quot;, value: tmpTestPriority},
															{externalName: &quot;TestRequestSite&quot;, name: &quot;TestRequestSite&quot;, value: tmpTestRequestSite},
															{externalName: &quot;TestSite&quot;, name: &quot;TestSite&quot;, value: tmpTestSite},
															{externalName: &quot;TestType&quot;, name: &quot;TestType&quot;, value: tmpTestType},
															{externalName: &quot;TestOrderedDateTime&quot;, name: &quot;TestOrderedDateTime&quot;, value: tmpTestOrderedDateTime}]});
				}

				currEpisodeID		= tmpEpisodeID;
				currStatus		= sqlResult.getString(&quot;Processed_YN&quot;);

				tmpTestLISCode		= sqlResult.getString(&quot;TestLISCode&quot;);
				tmpTestLISName		= sqlResult.getString(&quot;TestLISName&quot;);
				tmpTestValue		= sqlResult.getString(&quot;TestValue&quot;);
				tmpTestNormalRange	= sqlResult.getString(&quot;TestNormalRange&quot;);
				tmpTestUnits		= sqlResult.getString(&quot;TestUnits&quot;);
				// batchSeq is only used when processing the records with a status of &quot;N&quot;
				// well actually the records will have a status of &quot;P&quot; for processing
				// but they haven&apos;t already beenprocessed
				batchSeq					= sqlResult.getInt(&quot;BatchSeq&quot;);

				episodes[episodeSize - 1].attributeWithValues.push({externalName: tmpTestLISCode, name: tmpTestLISName, value: tmpTestValue,
														units: tmpTestUnits, range: tmpTestNormalRange});

				/* For testing only. The API fails when sending the acxtual tests from the incoming messages*/
				//episodes[episodeSize - 1].attributeWithValues.push({externalName: &quot;GTT 120m&quot;, name: &quot;GTTP 120min&quot;, value: &quot;6.7&quot;});

				if (tmpPatientID != currPatientID){
					currPatientID = tmpPatientID;
				}
			} //end while
			if (currStatus == &quot;N&quot;) {
				var currPatient = {&quot;caseId&quot;: currPatientID , site: &quot;&quot;, episodes: []};
				currPatient.episodes = episodes;
				var currMessage = {&quot;batchSeq&quot;: batchSeq, &quot;episodeID&quot;: currEpisodeID, Patient: currPatient};

				var json = JSON.stringify(currPatient);
				// Send the JSON Object to the Web Service
				logger.trace(&quot;JSON Routing to REST CLIENT: &quot; + json);
				resp = router.routeMessage(&quot;Rest Client 2&quot;, JSON.stringify(currMessage));
				if (resp) {
					logger.trace(&quot;Response from REST Channel: &quot; + resp.getMessage());
				}
			}
			return true;
		}
	}
	catch(ex) {
		logger.error(&quot;PKS - Select_CDS_Data - Exception: &quot; + ex);
		throw ex;
	}
	finally {
	//	dbConn.close();
	}

}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.9.1">
                <id>9fc30f67-4ba0-449d-a9b9-0fadd1c03d6f</id>
                <name>Select_CDS_Data3</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597480274</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function Select_CDS_Data3() {
	var currEpisodeID = &quot;&quot;;
	var currEpisode;
	var currPatientID = &quot;&quot;;
	var currStatus = &quot;&quot;;
	var episodes = [];
	var episodeSize = 0;
	var resp;

	var dbConn = Get_CDS_Connection();
	try {
		var sqlQuery = &quot;call rd_staging.rdSelCDSData()&quot;;

		var sqlResult = dbConn.executeCachedQuery(sqlQuery);
		// We can assume there will always be at least one row, even if there are no records to process
		// Let&apos;s check the result set
		var colCount = sqlResult.getMetaData().getColumnCount();
		// We&apos;re checking for the column count, if it is 2 then it&apos;s just a return code and message

		if (colCount == 2) {
			sqlResult.next();
			logger.trace(&quot;PKS - Select_CDS_Data - Info: &quot; + sqlResult.getString(&quot;Message&quot;));
			return false;
		} else {
			while (sqlResult.next()) {
				tmpEpisodeID		               = sqlResult.getString(&quot;EpisodeID&quot;);
				tmpEpisodeOrderedTests             = sqlResult.getString(&quot;EpisodeOrderedTests&quot;);
				tmpPatientID		               = sqlResult.getString(&quot;PatientID&quot;);
				tmpPatientSurname	               = sqlResult.getString(&quot;PatientFamilyName&quot;);
				tmpEpisodeDateTime   	          = sqlResult.getString(&quot;EpisodeDateTime&quot;);
				tmpPatientDOB		               = sqlResult.getString(&quot;PatientDOB&quot;);
				tmpTestSite		               = sqlResult.getString(&quot;TestSite&quot;);
				tmpPatientFamilyName               = sqlResult.getString(&quot;PatientFamilyName&quot;);
				tmpPatientGivenName                = sqlResult.getString(&quot;PatientGivenName&quot;);
				tmpPatientTitle                    = sqlResult.getString(&quot;PatientTitle&quot;);
				tmpPatientSex                      = sqlResult.getString(&quot;PatientSex&quot;);
				tmpPatientStreetAddress            = sqlResult.getString(&quot;PatientStreetAddress&quot;);
				tmpPatientCity                     = sqlResult.getString(&quot;PatientCity&quot;);
				tmpPatientPostalCode               = sqlResult.getString(&quot;PatientPostalCode&quot;);
				tmpPatientState                    = sqlResult.getString(&quot;PatientState&quot;);
				tmpPatientCountry                  = sqlResult.getString(&quot;PatientCountry&quot;);
				tmpPatientStatus                   = sqlResult.getString(&quot;PatientStatus&quot;);
				tmpPatientPregnancyFlag            = sqlResult.getString(&quot;PatientPregnancyFlag&quot;);
				tmpPatientFastingFlag              = sqlResult.getString(&quot;PatientFastingFlag&quot;);
				tmpEpisodeClinicalNotes            = sqlResult.getString(&quot;EpisodeClinicalNotes&quot;);
				tmpAccountType                     = sqlResult.getString(&quot;AccountType&quot;);
				tmpAccountClass                    = sqlResult.getString(&quot;AccountClass&quot;);
				tmpBillTo                          = sqlResult.getString(&quot;BillTo&quot;);
				tmpBillingAddress                  = sqlResult.getString(&quot;BillingAddress&quot;);
				tmpPatientPublicHealthIdentifier   = sqlResult.getString(&quot;PatientPublicHealthIdentifier&quot;);
				tmpEpisodePublicScheduleCode       = sqlResult.getString(&quot;EpisodePublicScheduleCode&quot;);
				tmpPatientPrivateHealthFundName    = sqlResult.getString(&quot;PatientPrivateHealthFundName&quot;);
				tmpPatientPrivateHealthFundID      = sqlResult.getString(&quot;PatientPrivateHealthFundID&quot;);
				tmpReqPhysicianID                  = sqlResult.getString(&quot;ReqPhysicianID&quot;);
				tmpReqPhysicianName                = sqlResult.getString(&quot;ReqPhysicianName&quot;);
				tmpReqPhysicianSpeciality          = sqlResult.getString(&quot;ReqPhysicianSpeciality&quot;);
				tmpReqPhysicianDeliveryAddress     = sqlResult.getString(&quot;ReqPhysicianDeliveryAddress&quot;);
				tmpSugeryName                      = sqlResult.getString(&quot;SugeryName&quot;);
				tmpSurgeryCode                     = sqlResult.getString(&quot;SurgeryCode&quot;);
				tmpSurgeryAddress                  = sqlResult.getString(&quot;SurgeryAddress&quot;);
				tmpSurgeryPostalCode               = sqlResult.getString(&quot;SurgeryPostalCode&quot;);
				tmpCopyPhysicianIDList             = sqlResult.getString(&quot;CopyPhysicianIDList&quot;);
				tmpCopyPhysicianNameList           = sqlResult.getString(&quot;CopyPhysicianNameList&quot;);
				tmpPanelIndicator                  = sqlResult.getString(&quot;PanelIndicator&quot;);
				tmpPanelID                         = sqlResult.getString(&quot;PanelID&quot;);
				tmpPanelName                       = sqlResult.getString(&quot;PanelName&quot;);
				tmpSampleID                        = sqlResult.getString(&quot;SampleID&quot;);
				tmpSampleFluidType                 = sqlResult.getString(&quot;SampleFluidType&quot;);
				tmpSampleOriginLocation            = sqlResult.getString(&quot;SampleOriginLocation&quot;);
				tmpSampleOriginSubLocation         = sqlResult.getString(&quot;SampleOriginSubLocation&quot;);
				tmpSampleCollectionDateTime        = sqlResult.getString(&quot;SampleCollectionDateTime&quot;);
				tmpSampleCollectionMethod          = sqlResult.getString(&quot;SampleCollectionMethod&quot;);
				tmpTestSiteSampleReceivedDateTime  = sqlResult.getString(&quot;TestSiteSampleReceivedDateTime&quot;);
				tmpTestPriority                    = sqlResult.getString(&quot;TestPriority&quot;);
				tmpTestDepartment                  = sqlResult.getString(&quot;TestDepartment&quot;);
				tmpTestInstrument                  = sqlResult.getString(&quot;TestInstrument&quot;);
				tmpTestRequestSite                 = sqlResult.getString(&quot;TestRequestSite&quot;);
				tmpTestSite                        = sqlResult.getString(&quot;TestSite&quot;);
				tmpTestType                        = sqlResult.getString(&quot;TestType&quot;);
				tmpAbnormalFlag                    = sqlResult.getString(&quot;AbnormalFlag&quot;);
				tmpTestOrderedDateTime             = sqlResult.getString(&quot;TestOrderedDateTime&quot;);
				tmpTestAnalyzerCompletionDateTime  = sqlResult.getString(&quot;TestAnalyzerCompletionDateTime&quot;);
				tmpTestResultFirstReviewedDateTime = sqlResult.getString(&quot;TestResultFirstReviewedDateTime&quot;);
				tmpTestResultReleasedDateTime      = sqlResult.getString(&quot;TestResultReleasedDateTime&quot;);
				tmpEpisodeDate		= DateUtil.getDate(&quot;yyyy-MM-dd HH:mm:ss&quot;, tmpEpisodeDateTime).getTime();

				// Check whether we moved onto a different episode, if we did and it hadn&apos;t already been processed then send a new
				// case...
				if ((tmpEpisodeID != currEpisodeID)) {
					if ($(&apos;cases_from_most_recent_episode_only&apos;) != &apos;true&apos;) {
						if (currEpisodeID != &quot;&quot;) {
							if (currStatus == &quot;N&quot;) {
								var currPatient = {&quot;caseId&quot;: currEpisodeID , site: &quot;&quot;, episodes: []};
								currPatient.episodes = episodes;
								// We&apos;re putting the batchSeq into the JSON message, the destination channel can split this out for use later
								// This is used for updating the records once the records are successfully sent to the web service
								var currMessage = {&quot;batchSeq&quot;: batchSeq, &quot;episodeID&quot;: currEpisodeID, Patient: currPatient};

								var json = JSON.stringify(currPatient);
								logger.trace(&quot;JSON Routing to REST CLIENT: &quot; + json);
								// Send the JSON Object to the Web Service channel
								resp = router.routeMessage(&quot;Rest Client&quot;, JSON.stringify(currMessage));
								if (resp) {
									logger.trace(&quot;Response from REST Channel: &quot; + resp.getMessage());
								}
							}
						}
					}

					episodeSize = episodes.push({episodeDate: tmpEpisodeDate,
											episodeId: tmpEpisodeID,
											attributeWithValues: [{externalName: &quot;PID&quot;, name: &quot;PID&quot;, value: tmpPatientID},
															{externalName: &quot;BIRTHDATE&quot;, name: &quot;BIRTHDATE&quot;, value: tmpPatientDOB},
															{externalName: &quot;LASTNAME&quot;, name: &quot;LASTNAME&quot;, value: tmpPatientSurname},
															{externalName: &quot;EpisodeOrderedTests&quot;, name: &quot;EpisodeOrderedTests&quot;, value: tmpEpisodeOrderedTests},
															{externalName: &quot;Site&quot;, name: &quot;Site&quot;, value: tmpTestSite},
															{externalName: &quot;PatientFamilyName&quot;, name : &quot;PatientFamilyName&quot;, value: tmpPatientFamilyName},
															{externalName: &quot;PatientGivenName&quot;, name : &quot;PatientGivenName&quot;, value: tmpPatientGivenName},
															{externalName: &quot;PatientTitle&quot;, name : &quot;PatientTitle&quot;, value: tmpPatientTitle},
															{externalName: &quot;PatientSex&quot;, name : &quot;PatientSex&quot;, value: tmpPatientSex},
															{externalName: &quot;PatientStreetAddress&quot;, name : &quot;PatientStreetAddress&quot;, value: tmpPatientStreetAddress},
															{externalName: &quot;PatientCity&quot;, name : &quot;PatientCity&quot;, value: tmpPatientCity},
															{externalName: &quot;PatientPostalCode&quot;, name : &quot;PatientPostalCode&quot;, value: tmpPatientPostalCode},
															{externalName: &quot;PatientState&quot;, name : &quot;PatientState&quot;, value: tmpPatientState},
															{externalName: &quot;PatientCountry&quot;, name : &quot;PatientCountry&quot;, value: tmpPatientCountry},
															{externalName: &quot;PatientStatus&quot;, name : &quot;PatientStatus&quot;, value: tmpPatientStatus},
															{externalName: &quot;PatientPregnancyFlag&quot;, name : &quot;PatientPregnancyFlag&quot;, value: tmpPatientPregnancyFlag},
															{externalName: &quot;PatientFastingFlag&quot;, name : &quot;PatientFastingFlag&quot;, value: tmpPatientFastingFlag}	,
															{externalName: &quot;PatientGivenName&quot;, name : &quot;externalName&quot;, value: tmpPatientGivenName},
															{externalName: &quot;EpisodeClinicalNotes&quot;, name: &quot;EpisodeClinicalNotes&quot;, value: tmpEpisodeClinicalNotes},
															{externalName: &quot;AccountType&quot;, name: &quot;AccountType&quot;, value: tmpAccountType},
															{externalName: &quot;AccountClass&quot;, name: &quot;AccountClass&quot;, value: tmpAccountClass},
															{externalName: &quot;BillTo&quot;, name: &quot;BillTo&quot;, value: tmpBillTo},
															{externalName: &quot;PatientPublicHealthIdentifier&quot;, name: &quot;PatientPublicHealthIdentifier&quot;, value: tmpPatientPublicHealthIdentifier},
															{externalName: &quot;EpisodePublicScheduleCode&quot;, name: &quot;EpisodePublicScheduleCode&quot;, value: tmpEpisodePublicScheduleCode},
															{externalName: &quot;PatientPrivateHealthFundName&quot;, name: &quot;PatientPrivateHealthFundName&quot;, value: tmpPatientPrivateHealthFundName},
															{externalName: &quot;PatientPrivateHealthFundID&quot;, name: &quot;PatientPrivateHealthFundID&quot;, value: tmpPatientPrivateHealthFundID},
															{externalName: &quot;ReqPhysicianID&quot;, name: &quot;ReqPhysicianID&quot;, value: tmpReqPhysicianID},
															{externalName: &quot;ReqPhysicianName&quot;, name: &quot;ReqPhysicianName&quot;, value: tmpReqPhysicianName},
															{externalName: &quot;ReqPhysicianSpeciality&quot;, name: &quot;ReqPhysicianSpeciality&quot;, value: tmpReqPhysicianSpeciality},
															{externalName: &quot;SugeryName&quot;, name: &quot;SugeryName&quot;, value: tmpSugeryName},
															{externalName: &quot;SurgeryCode&quot;, name: &quot;SurgeryCode&quot;, value: tmpSurgeryCode},
															{externalName: &quot;CopyPhysicianIDList&quot;, name: &quot;CopyPhysicianIDList&quot;, value: tmpCopyPhysicianIDList},
															{externalName: &quot;CopyPhysicianNameList&quot;, name: &quot;CopyPhysicianNameList&quot;, value: tmpCopyPhysicianNameList},
															{externalName: &quot;PanelIndicator&quot;, name: &quot;PanelIndicator&quot;, value: tmpPanelIndicator},
															{externalName: &quot;PanelID&quot;, name: &quot;PanelID&quot;, value: tmpPanelID},
															{externalName: &quot;PanelName&quot;, name: &quot;PanelName&quot;, value: tmpPanelName},
															{externalName: &quot;SampleID&quot;, name: &quot;SampleID&quot;, value: tmpSampleID},
															{externalName: &quot;SampleFluidType&quot;, name: &quot;SampleFluidType&quot;, value: tmpSampleFluidType},
															{externalName: &quot;SampleOriginLocation&quot;, name: &quot;SampleOriginLocation&quot;, value: tmpSampleOriginLocation},
															{externalName: &quot;SampleOriginSubLocation&quot;, name: &quot;SampleOriginSubLocation&quot;, value: tmpSampleOriginSubLocation},
															{externalName: &quot;SampleCollectionDateTime&quot;, name: &quot;SampleCollectionDateTime&quot;, value: tmpSampleCollectionDateTime},
															{externalName: &quot;SampleCollectionMethod&quot;, name: &quot;SampleCollectionMethod&quot;, value: tmpSampleCollectionMethod},
															{externalName: &quot;TestSiteSampleReceivedDateTime&quot;, name: &quot;TestSiteSampleReceivedDateTime&quot;, value: tmpTestSiteSampleReceivedDateTime},
															{externalName: &quot;TestPriority&quot;, name: &quot;TestPriority&quot;, value: tmpTestPriority},
															{externalName: &quot;TestRequestSite&quot;, name: &quot;TestRequestSite&quot;, value: tmpTestRequestSite},
															{externalName: &quot;TestSite&quot;, name: &quot;TestSite&quot;, value: tmpTestSite},
															{externalName: &quot;TestType&quot;, name: &quot;TestType&quot;, value: tmpTestType},
															{externalName: &quot;TestOrderedDateTime&quot;, name: &quot;TestOrderedDateTime&quot;, value: tmpTestOrderedDateTime}]});
				}

				currEpisodeID		= tmpEpisodeID;
				currStatus		= sqlResult.getString(&quot;Processed_YN&quot;);

				tmpTestLISCode		= sqlResult.getString(&quot;TestLISCode&quot;);
				tmpTestLISName		= sqlResult.getString(&quot;TestLISName&quot;);
				tmpTestValue		= sqlResult.getString(&quot;TestValue&quot;);
				tmpTestNormalRange	= sqlResult.getString(&quot;TestNormalRange&quot;);
				tmpTestUnits		= sqlResult.getString(&quot;TestUnits&quot;);
				// batchSeq is only used when processing the records with a status of &quot;N&quot;
				// well actually the records will have a status of &quot;P&quot; for processing
				// but they haven&apos;t already beenprocessed
				batchSeq					= sqlResult.getInt(&quot;BatchSeq&quot;);

				episodes[episodeSize - 1].attributeWithValues.push({externalName: tmpTestLISCode, name: tmpTestLISName, value: tmpTestValue,
														units: tmpTestUnits, range: tmpTestNormalRange});

				/* For testing only. The API fails when sending the acxtual tests from the incoming messages*/
				//episodes[episodeSize - 1].attributeWithValues.push({externalName: &quot;GTT 120m&quot;, name: &quot;GTTP 120min&quot;, value: &quot;6.7&quot;});

				if (tmpPatientID != currPatientID){
					currPatientID = tmpPatientID;
				}
			} //end while
			if (currStatus == &quot;N&quot;) {
				var currPatient = {&quot;caseId&quot;: currPatientID , site: &quot;&quot;, episodes: []};
				currPatient.episodes = episodes;
				var currMessage = {&quot;batchSeq&quot;: batchSeq, &quot;episodeID&quot;: currEpisodeID, Patient: currPatient};

				var json = JSON.stringify(currPatient);
				// Send the JSON Object to the Web Service
				logger.trace(&quot;JSON Routing to REST CLIENT: &quot; + json);
				resp = router.routeMessage(&quot;Rest Client 3&quot;, JSON.stringify(currMessage));
				if (resp) {
					logger.trace(&quot;Response from REST Channel: &quot; + resp.getMessage());
				}
			}
			return true;
		}
	}
	catch(ex) {
		logger.error(&quot;PKS - Select_CDS_Data - Exception: &quot; + ex);
		throw ex;
	}
	finally {
	//	dbConn.close();
	}

}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.9.1">
                <id>6cb0a53a-f748-41ee-8353-7a05b929daac</id>
                <name>Select_CDS_Data4</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597481087</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function Select_CDS_Data4() {
	var currEpisodeID = &quot;&quot;;
	var currEpisode;
	var currPatientID = &quot;&quot;;
	var currStatus = &quot;&quot;;
	var episodes = [];
	var episodeSize = 0;
	var resp;

	var dbConn = Get_CDS_Connection();
	try {
		var sqlQuery = &quot;call rd_staging.rdSelCDSData()&quot;;

		var sqlResult = dbConn.executeCachedQuery(sqlQuery);
		// We can assume there will always be at least one row, even if there are no records to process
		// Let&apos;s check the result set
		var colCount = sqlResult.getMetaData().getColumnCount();
		// We&apos;re checking for the column count, if it is 2 then it&apos;s just a return code and message

		if (colCount == 2) {
			sqlResult.next();
			logger.trace(&quot;PKS - Select_CDS_Data - Info: &quot; + sqlResult.getString(&quot;Message&quot;));
			return false;
		} else {
			while (sqlResult.next()) {
				tmpEpisodeID		               = sqlResult.getString(&quot;EpisodeID&quot;);
				tmpEpisodeOrderedTests             = sqlResult.getString(&quot;EpisodeOrderedTests&quot;);
				tmpPatientID		               = sqlResult.getString(&quot;PatientID&quot;);
				tmpPatientSurname	               = sqlResult.getString(&quot;PatientFamilyName&quot;);
				tmpEpisodeDateTime   	          = sqlResult.getString(&quot;EpisodeDateTime&quot;);
				tmpPatientDOB		               = sqlResult.getString(&quot;PatientDOB&quot;);
				tmpTestSite		               = sqlResult.getString(&quot;TestSite&quot;);
				tmpPatientFamilyName               = sqlResult.getString(&quot;PatientFamilyName&quot;);
				tmpPatientGivenName                = sqlResult.getString(&quot;PatientGivenName&quot;);
				tmpPatientTitle                    = sqlResult.getString(&quot;PatientTitle&quot;);
				tmpPatientSex                      = sqlResult.getString(&quot;PatientSex&quot;);
				tmpPatientStreetAddress            = sqlResult.getString(&quot;PatientStreetAddress&quot;);
				tmpPatientCity                     = sqlResult.getString(&quot;PatientCity&quot;);
				tmpPatientPostalCode               = sqlResult.getString(&quot;PatientPostalCode&quot;);
				tmpPatientState                    = sqlResult.getString(&quot;PatientState&quot;);
				tmpPatientCountry                  = sqlResult.getString(&quot;PatientCountry&quot;);
				tmpPatientStatus                   = sqlResult.getString(&quot;PatientStatus&quot;);
				tmpPatientPregnancyFlag            = sqlResult.getString(&quot;PatientPregnancyFlag&quot;);
				tmpPatientFastingFlag              = sqlResult.getString(&quot;PatientFastingFlag&quot;);
				tmpEpisodeClinicalNotes            = sqlResult.getString(&quot;EpisodeClinicalNotes&quot;);
				tmpAccountType                     = sqlResult.getString(&quot;AccountType&quot;);
				tmpAccountClass                    = sqlResult.getString(&quot;AccountClass&quot;);
				tmpBillTo                          = sqlResult.getString(&quot;BillTo&quot;);
				tmpBillingAddress                  = sqlResult.getString(&quot;BillingAddress&quot;);
				tmpPatientPublicHealthIdentifier   = sqlResult.getString(&quot;PatientPublicHealthIdentifier&quot;);
				tmpEpisodePublicScheduleCode       = sqlResult.getString(&quot;EpisodePublicScheduleCode&quot;);
				tmpPatientPrivateHealthFundName    = sqlResult.getString(&quot;PatientPrivateHealthFundName&quot;);
				tmpPatientPrivateHealthFundID      = sqlResult.getString(&quot;PatientPrivateHealthFundID&quot;);
				tmpReqPhysicianID                  = sqlResult.getString(&quot;ReqPhysicianID&quot;);
				tmpReqPhysicianName                = sqlResult.getString(&quot;ReqPhysicianName&quot;);
				tmpReqPhysicianSpeciality          = sqlResult.getString(&quot;ReqPhysicianSpeciality&quot;);
				tmpReqPhysicianDeliveryAddress     = sqlResult.getString(&quot;ReqPhysicianDeliveryAddress&quot;);
				tmpSugeryName                      = sqlResult.getString(&quot;SugeryName&quot;);
				tmpSurgeryCode                     = sqlResult.getString(&quot;SurgeryCode&quot;);
				tmpSurgeryAddress                  = sqlResult.getString(&quot;SurgeryAddress&quot;);
				tmpSurgeryPostalCode               = sqlResult.getString(&quot;SurgeryPostalCode&quot;);
				tmpCopyPhysicianIDList             = sqlResult.getString(&quot;CopyPhysicianIDList&quot;);
				tmpCopyPhysicianNameList           = sqlResult.getString(&quot;CopyPhysicianNameList&quot;);
				tmpPanelIndicator                  = sqlResult.getString(&quot;PanelIndicator&quot;);
				tmpPanelID                         = sqlResult.getString(&quot;PanelID&quot;);
				tmpPanelName                       = sqlResult.getString(&quot;PanelName&quot;);
				tmpSampleID                        = sqlResult.getString(&quot;SampleID&quot;);
				tmpSampleFluidType                 = sqlResult.getString(&quot;SampleFluidType&quot;);
				tmpSampleOriginLocation            = sqlResult.getString(&quot;SampleOriginLocation&quot;);
				tmpSampleOriginSubLocation         = sqlResult.getString(&quot;SampleOriginSubLocation&quot;);
				tmpSampleCollectionDateTime        = sqlResult.getString(&quot;SampleCollectionDateTime&quot;);
				tmpSampleCollectionMethod          = sqlResult.getString(&quot;SampleCollectionMethod&quot;);
				tmpTestSiteSampleReceivedDateTime  = sqlResult.getString(&quot;TestSiteSampleReceivedDateTime&quot;);
				tmpTestPriority                    = sqlResult.getString(&quot;TestPriority&quot;);
				tmpTestDepartment                  = sqlResult.getString(&quot;TestDepartment&quot;);
				tmpTestInstrument                  = sqlResult.getString(&quot;TestInstrument&quot;);
				tmpTestRequestSite                 = sqlResult.getString(&quot;TestRequestSite&quot;);
				tmpTestSite                        = sqlResult.getString(&quot;TestSite&quot;);
				tmpTestType                        = sqlResult.getString(&quot;TestType&quot;);
				tmpAbnormalFlag                    = sqlResult.getString(&quot;AbnormalFlag&quot;);
				tmpTestOrderedDateTime             = sqlResult.getString(&quot;TestOrderedDateTime&quot;);
				tmpTestAnalyzerCompletionDateTime  = sqlResult.getString(&quot;TestAnalyzerCompletionDateTime&quot;);
				tmpTestResultFirstReviewedDateTime = sqlResult.getString(&quot;TestResultFirstReviewedDateTime&quot;);
				tmpTestResultReleasedDateTime      = sqlResult.getString(&quot;TestResultReleasedDateTime&quot;);
				tmpEpisodeDate		= DateUtil.getDate(&quot;yyyy-MM-dd HH:mm:ss&quot;, tmpEpisodeDateTime).getTime();

				// Check whether we moved onto a different episode, if we did and it hadn&apos;t already been processed then send a new
				// case...
				if ((tmpEpisodeID != currEpisodeID)) {
					if ($(&apos;cases_from_most_recent_episode_only&apos;) != &apos;true&apos;) {
						if (currEpisodeID != &quot;&quot;) {
							if (currStatus == &quot;N&quot;) {
								var currPatient = {&quot;caseId&quot;: currEpisodeID , site: &quot;&quot;, episodes: []};
								currPatient.episodes = episodes;
								// We&apos;re putting the batchSeq into the JSON message, the destination channel can split this out for use later
								// This is used for updating the records once the records are successfully sent to the web service
								var currMessage = {&quot;batchSeq&quot;: batchSeq, &quot;episodeID&quot;: currEpisodeID, Patient: currPatient};

								var json = JSON.stringify(currPatient);
								logger.trace(&quot;JSON Routing to REST CLIENT: &quot; + json);
								// Send the JSON Object to the Web Service channel
								resp = router.routeMessage(&quot;Rest Client&quot;, JSON.stringify(currMessage));
								if (resp) {
									logger.trace(&quot;Response from REST Channel: &quot; + resp.getMessage());
								}
							}
						}
					}

					episodeSize = episodes.push({episodeDate: tmpEpisodeDate,
											episodeId: tmpEpisodeID,
											attributeWithValues: [{externalName: &quot;PID&quot;, name: &quot;PID&quot;, value: tmpPatientID},
															{externalName: &quot;BIRTHDATE&quot;, name: &quot;BIRTHDATE&quot;, value: tmpPatientDOB},
															{externalName: &quot;LASTNAME&quot;, name: &quot;LASTNAME&quot;, value: tmpPatientSurname},
															{externalName: &quot;EpisodeOrderedTests&quot;, name: &quot;EpisodeOrderedTests&quot;, value: tmpEpisodeOrderedTests},
															{externalName: &quot;Site&quot;, name: &quot;Site&quot;, value: tmpTestSite},
															{externalName: &quot;PatientFamilyName&quot;, name : &quot;PatientFamilyName&quot;, value: tmpPatientFamilyName},
															{externalName: &quot;PatientGivenName&quot;, name : &quot;PatientGivenName&quot;, value: tmpPatientGivenName},
															{externalName: &quot;PatientTitle&quot;, name : &quot;PatientTitle&quot;, value: tmpPatientTitle},
															{externalName: &quot;PatientSex&quot;, name : &quot;PatientSex&quot;, value: tmpPatientSex},
															{externalName: &quot;PatientStreetAddress&quot;, name : &quot;PatientStreetAddress&quot;, value: tmpPatientStreetAddress},
															{externalName: &quot;PatientCity&quot;, name : &quot;PatientCity&quot;, value: tmpPatientCity},
															{externalName: &quot;PatientPostalCode&quot;, name : &quot;PatientPostalCode&quot;, value: tmpPatientPostalCode},
															{externalName: &quot;PatientState&quot;, name : &quot;PatientState&quot;, value: tmpPatientState},
															{externalName: &quot;PatientCountry&quot;, name : &quot;PatientCountry&quot;, value: tmpPatientCountry},
															{externalName: &quot;PatientStatus&quot;, name : &quot;PatientStatus&quot;, value: tmpPatientStatus},
															{externalName: &quot;PatientPregnancyFlag&quot;, name : &quot;PatientPregnancyFlag&quot;, value: tmpPatientPregnancyFlag},
															{externalName: &quot;PatientFastingFlag&quot;, name : &quot;PatientFastingFlag&quot;, value: tmpPatientFastingFlag}	,
															{externalName: &quot;PatientGivenName&quot;, name : &quot;externalName&quot;, value: tmpPatientGivenName},
															{externalName: &quot;EpisodeClinicalNotes&quot;, name: &quot;EpisodeClinicalNotes&quot;, value: tmpEpisodeClinicalNotes},
															{externalName: &quot;AccountType&quot;, name: &quot;AccountType&quot;, value: tmpAccountType},
															{externalName: &quot;AccountClass&quot;, name: &quot;AccountClass&quot;, value: tmpAccountClass},
															{externalName: &quot;BillTo&quot;, name: &quot;BillTo&quot;, value: tmpBillTo},
															{externalName: &quot;PatientPublicHealthIdentifier&quot;, name: &quot;PatientPublicHealthIdentifier&quot;, value: tmpPatientPublicHealthIdentifier},
															{externalName: &quot;EpisodePublicScheduleCode&quot;, name: &quot;EpisodePublicScheduleCode&quot;, value: tmpEpisodePublicScheduleCode},
															{externalName: &quot;PatientPrivateHealthFundName&quot;, name: &quot;PatientPrivateHealthFundName&quot;, value: tmpPatientPrivateHealthFundName},
															{externalName: &quot;PatientPrivateHealthFundID&quot;, name: &quot;PatientPrivateHealthFundID&quot;, value: tmpPatientPrivateHealthFundID},
															{externalName: &quot;ReqPhysicianID&quot;, name: &quot;ReqPhysicianID&quot;, value: tmpReqPhysicianID},
															{externalName: &quot;ReqPhysicianName&quot;, name: &quot;ReqPhysicianName&quot;, value: tmpReqPhysicianName},
															{externalName: &quot;ReqPhysicianSpeciality&quot;, name: &quot;ReqPhysicianSpeciality&quot;, value: tmpReqPhysicianSpeciality},
															{externalName: &quot;SugeryName&quot;, name: &quot;SugeryName&quot;, value: tmpSugeryName},
															{externalName: &quot;SurgeryCode&quot;, name: &quot;SurgeryCode&quot;, value: tmpSurgeryCode},
															{externalName: &quot;CopyPhysicianIDList&quot;, name: &quot;CopyPhysicianIDList&quot;, value: tmpCopyPhysicianIDList},
															{externalName: &quot;CopyPhysicianNameList&quot;, name: &quot;CopyPhysicianNameList&quot;, value: tmpCopyPhysicianNameList},
															{externalName: &quot;PanelIndicator&quot;, name: &quot;PanelIndicator&quot;, value: tmpPanelIndicator},
															{externalName: &quot;PanelID&quot;, name: &quot;PanelID&quot;, value: tmpPanelID},
															{externalName: &quot;PanelName&quot;, name: &quot;PanelName&quot;, value: tmpPanelName},
															{externalName: &quot;SampleID&quot;, name: &quot;SampleID&quot;, value: tmpSampleID},
															{externalName: &quot;SampleFluidType&quot;, name: &quot;SampleFluidType&quot;, value: tmpSampleFluidType},
															{externalName: &quot;SampleOriginLocation&quot;, name: &quot;SampleOriginLocation&quot;, value: tmpSampleOriginLocation},
															{externalName: &quot;SampleOriginSubLocation&quot;, name: &quot;SampleOriginSubLocation&quot;, value: tmpSampleOriginSubLocation},
															{externalName: &quot;SampleCollectionDateTime&quot;, name: &quot;SampleCollectionDateTime&quot;, value: tmpSampleCollectionDateTime},
															{externalName: &quot;SampleCollectionMethod&quot;, name: &quot;SampleCollectionMethod&quot;, value: tmpSampleCollectionMethod},
															{externalName: &quot;TestSiteSampleReceivedDateTime&quot;, name: &quot;TestSiteSampleReceivedDateTime&quot;, value: tmpTestSiteSampleReceivedDateTime},
															{externalName: &quot;TestPriority&quot;, name: &quot;TestPriority&quot;, value: tmpTestPriority},
															{externalName: &quot;TestRequestSite&quot;, name: &quot;TestRequestSite&quot;, value: tmpTestRequestSite},
															{externalName: &quot;TestSite&quot;, name: &quot;TestSite&quot;, value: tmpTestSite},
															{externalName: &quot;TestType&quot;, name: &quot;TestType&quot;, value: tmpTestType},
															{externalName: &quot;TestOrderedDateTime&quot;, name: &quot;TestOrderedDateTime&quot;, value: tmpTestOrderedDateTime}]});
				}

				currEpisodeID		= tmpEpisodeID;
				currStatus		= sqlResult.getString(&quot;Processed_YN&quot;);

				tmpTestLISCode		= sqlResult.getString(&quot;TestLISCode&quot;);
				tmpTestLISName		= sqlResult.getString(&quot;TestLISName&quot;);
				tmpTestValue		= sqlResult.getString(&quot;TestValue&quot;);
				tmpTestNormalRange	= sqlResult.getString(&quot;TestNormalRange&quot;);
				tmpTestUnits		= sqlResult.getString(&quot;TestUnits&quot;);
				// batchSeq is only used when processing the records with a status of &quot;N&quot;
				// well actually the records will have a status of &quot;P&quot; for processing
				// but they haven&apos;t already beenprocessed
				batchSeq					= sqlResult.getInt(&quot;BatchSeq&quot;);

				episodes[episodeSize - 1].attributeWithValues.push({externalName: tmpTestLISCode, name: tmpTestLISName, value: tmpTestValue,
														units: tmpTestUnits, range: tmpTestNormalRange});

				/* For testing only. The API fails when sending the acxtual tests from the incoming messages*/
				//episodes[episodeSize - 1].attributeWithValues.push({externalName: &quot;GTT 120m&quot;, name: &quot;GTTP 120min&quot;, value: &quot;6.7&quot;});

				if (tmpPatientID != currPatientID){
					currPatientID = tmpPatientID;
				}
			} //end while
			if (currStatus == &quot;N&quot;) {
				var currPatient = {&quot;caseId&quot;: currPatientID , site: &quot;&quot;, episodes: []};
				currPatient.episodes = episodes;
				var currMessage = {&quot;batchSeq&quot;: batchSeq, &quot;episodeID&quot;: currEpisodeID, Patient: currPatient};

				var json = JSON.stringify(currPatient);
				// Send the JSON Object to the Web Service
				logger.trace(&quot;JSON Routing to REST CLIENT: &quot; + json);
				resp = router.routeMessage(&quot;Rest Client 4&quot;, JSON.stringify(currMessage));
				if (resp) {
					logger.trace(&quot;Response from REST Channel: &quot; + resp.getMessage());
				}
			}
			return true;
		}
	}
	catch(ex) {
		logger.error(&quot;PKS - Select_CDS_Data - Exception: &quot; + ex);
		throw ex;
	}
	finally {
	//	dbConn.close();
	}

}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.9.1">
                <id>cedb4f76-e38e-4082-98e2-2a6e35af2a44</id>
                <name>Select_CDS_Data5</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597482147</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function Select_CDS_Data5() {
	var currEpisodeID = &quot;&quot;;
	var currEpisode;
	var currPatientID = &quot;&quot;;
	var currStatus = &quot;&quot;;
	var episodes = [];
	var episodeSize = 0;
	var resp;

	var dbConn = Get_CDS_Connection();
	try {
		var sqlQuery = &quot;call rd_staging.rdSelCDSData()&quot;;

		var sqlResult = dbConn.executeCachedQuery(sqlQuery);
		// We can assume there will always be at least one row, even if there are no records to process
		// Let&apos;s check the result set
		var colCount = sqlResult.getMetaData().getColumnCount();
		// We&apos;re checking for the column count, if it is 2 then it&apos;s just a return code and message

		if (colCount == 2) {
			sqlResult.next();
			logger.trace(&quot;PKS - Select_CDS_Data - Info: &quot; + sqlResult.getString(&quot;Message&quot;));
			return false;
		} else {
			while (sqlResult.next()) {
				tmpEpisodeID		               = sqlResult.getString(&quot;EpisodeID&quot;);
				tmpEpisodeOrderedTests             = sqlResult.getString(&quot;EpisodeOrderedTests&quot;);
				tmpPatientID		               = sqlResult.getString(&quot;PatientID&quot;);
				tmpPatientSurname	               = sqlResult.getString(&quot;PatientFamilyName&quot;);
				tmpEpisodeDateTime   	          = sqlResult.getString(&quot;EpisodeDateTime&quot;);
				tmpPatientDOB		               = sqlResult.getString(&quot;PatientDOB&quot;);
				tmpTestSite		               = sqlResult.getString(&quot;TestSite&quot;);
				tmpPatientFamilyName               = sqlResult.getString(&quot;PatientFamilyName&quot;);
				tmpPatientGivenName                = sqlResult.getString(&quot;PatientGivenName&quot;);
				tmpPatientTitle                    = sqlResult.getString(&quot;PatientTitle&quot;);
				tmpPatientSex                      = sqlResult.getString(&quot;PatientSex&quot;);
				tmpPatientStreetAddress            = sqlResult.getString(&quot;PatientStreetAddress&quot;);
				tmpPatientCity                     = sqlResult.getString(&quot;PatientCity&quot;);
				tmpPatientPostalCode               = sqlResult.getString(&quot;PatientPostalCode&quot;);
				tmpPatientState                    = sqlResult.getString(&quot;PatientState&quot;);
				tmpPatientCountry                  = sqlResult.getString(&quot;PatientCountry&quot;);
				tmpPatientStatus                   = sqlResult.getString(&quot;PatientStatus&quot;);
				tmpPatientPregnancyFlag            = sqlResult.getString(&quot;PatientPregnancyFlag&quot;);
				tmpPatientFastingFlag              = sqlResult.getString(&quot;PatientFastingFlag&quot;);
				tmpEpisodeClinicalNotes            = sqlResult.getString(&quot;EpisodeClinicalNotes&quot;);
				tmpAccountType                     = sqlResult.getString(&quot;AccountType&quot;);
				tmpAccountClass                    = sqlResult.getString(&quot;AccountClass&quot;);
				tmpBillTo                          = sqlResult.getString(&quot;BillTo&quot;);
				tmpBillingAddress                  = sqlResult.getString(&quot;BillingAddress&quot;);
				tmpPatientPublicHealthIdentifier   = sqlResult.getString(&quot;PatientPublicHealthIdentifier&quot;);
				tmpEpisodePublicScheduleCode       = sqlResult.getString(&quot;EpisodePublicScheduleCode&quot;);
				tmpPatientPrivateHealthFundName    = sqlResult.getString(&quot;PatientPrivateHealthFundName&quot;);
				tmpPatientPrivateHealthFundID      = sqlResult.getString(&quot;PatientPrivateHealthFundID&quot;);
				tmpReqPhysicianID                  = sqlResult.getString(&quot;ReqPhysicianID&quot;);
				tmpReqPhysicianName                = sqlResult.getString(&quot;ReqPhysicianName&quot;);
				tmpReqPhysicianSpeciality          = sqlResult.getString(&quot;ReqPhysicianSpeciality&quot;);
				tmpReqPhysicianDeliveryAddress     = sqlResult.getString(&quot;ReqPhysicianDeliveryAddress&quot;);
				tmpSugeryName                      = sqlResult.getString(&quot;SugeryName&quot;);
				tmpSurgeryCode                     = sqlResult.getString(&quot;SurgeryCode&quot;);
				tmpSurgeryAddress                  = sqlResult.getString(&quot;SurgeryAddress&quot;);
				tmpSurgeryPostalCode               = sqlResult.getString(&quot;SurgeryPostalCode&quot;);
				tmpCopyPhysicianIDList             = sqlResult.getString(&quot;CopyPhysicianIDList&quot;);
				tmpCopyPhysicianNameList           = sqlResult.getString(&quot;CopyPhysicianNameList&quot;);
				tmpPanelIndicator                  = sqlResult.getString(&quot;PanelIndicator&quot;);
				tmpPanelID                         = sqlResult.getString(&quot;PanelID&quot;);
				tmpPanelName                       = sqlResult.getString(&quot;PanelName&quot;);
				tmpSampleID                        = sqlResult.getString(&quot;SampleID&quot;);
				tmpSampleFluidType                 = sqlResult.getString(&quot;SampleFluidType&quot;);
				tmpSampleOriginLocation            = sqlResult.getString(&quot;SampleOriginLocation&quot;);
				tmpSampleOriginSubLocation         = sqlResult.getString(&quot;SampleOriginSubLocation&quot;);
				tmpSampleCollectionDateTime        = sqlResult.getString(&quot;SampleCollectionDateTime&quot;);
				tmpSampleCollectionMethod          = sqlResult.getString(&quot;SampleCollectionMethod&quot;);
				tmpTestSiteSampleReceivedDateTime  = sqlResult.getString(&quot;TestSiteSampleReceivedDateTime&quot;);
				tmpTestPriority                    = sqlResult.getString(&quot;TestPriority&quot;);
				tmpTestDepartment                  = sqlResult.getString(&quot;TestDepartment&quot;);
				tmpTestInstrument                  = sqlResult.getString(&quot;TestInstrument&quot;);
				tmpTestRequestSite                 = sqlResult.getString(&quot;TestRequestSite&quot;);
				tmpTestSite                        = sqlResult.getString(&quot;TestSite&quot;);
				tmpTestType                        = sqlResult.getString(&quot;TestType&quot;);
				tmpAbnormalFlag                    = sqlResult.getString(&quot;AbnormalFlag&quot;);
				tmpTestOrderedDateTime             = sqlResult.getString(&quot;TestOrderedDateTime&quot;);
				tmpTestAnalyzerCompletionDateTime  = sqlResult.getString(&quot;TestAnalyzerCompletionDateTime&quot;);
				tmpTestResultFirstReviewedDateTime = sqlResult.getString(&quot;TestResultFirstReviewedDateTime&quot;);
				tmpTestResultReleasedDateTime      = sqlResult.getString(&quot;TestResultReleasedDateTime&quot;);
				tmpEpisodeDate		= DateUtil.getDate(&quot;yyyy-MM-dd HH:mm:ss&quot;, tmpEpisodeDateTime).getTime();

				// Check whether we moved onto a different episode, if we did and it hadn&apos;t already been processed then send a new
				// case...
				if ((tmpEpisodeID != currEpisodeID)) {
					if ($(&apos;cases_from_most_recent_episode_only&apos;) != &apos;true&apos;) {
						if (currEpisodeID != &quot;&quot;) {
							if (currStatus == &quot;N&quot;) {
								var currPatient = {&quot;caseId&quot;: currEpisodeID , site: &quot;&quot;, episodes: []};
								currPatient.episodes = episodes;
								// We&apos;re putting the batchSeq into the JSON message, the destination channel can split this out for use later
								// This is used for updating the records once the records are successfully sent to the web service
								var currMessage = {&quot;batchSeq&quot;: batchSeq, &quot;episodeID&quot;: currEpisodeID, Patient: currPatient};

								var json = JSON.stringify(currPatient);
								logger.trace(&quot;JSON Routing to REST CLIENT: &quot; + json);
								// Send the JSON Object to the Web Service channel
								resp = router.routeMessage(&quot;Rest Client&quot;, JSON.stringify(currMessage));
								if (resp) {
									logger.trace(&quot;Response from REST Channel: &quot; + resp.getMessage());
								}
							}
						}
					}

					episodeSize = episodes.push({episodeDate: tmpEpisodeDate,
											episodeId: tmpEpisodeID,
											attributeWithValues: [{externalName: &quot;PID&quot;, name: &quot;PID&quot;, value: tmpPatientID},
															{externalName: &quot;BIRTHDATE&quot;, name: &quot;BIRTHDATE&quot;, value: tmpPatientDOB},
															{externalName: &quot;LASTNAME&quot;, name: &quot;LASTNAME&quot;, value: tmpPatientSurname},
															{externalName: &quot;EpisodeOrderedTests&quot;, name: &quot;EpisodeOrderedTests&quot;, value: tmpEpisodeOrderedTests},
															{externalName: &quot;Site&quot;, name: &quot;Site&quot;, value: tmpTestSite},
															{externalName: &quot;PatientFamilyName&quot;, name : &quot;PatientFamilyName&quot;, value: tmpPatientFamilyName},
															{externalName: &quot;PatientGivenName&quot;, name : &quot;PatientGivenName&quot;, value: tmpPatientGivenName},
															{externalName: &quot;PatientTitle&quot;, name : &quot;PatientTitle&quot;, value: tmpPatientTitle},
															{externalName: &quot;PatientSex&quot;, name : &quot;PatientSex&quot;, value: tmpPatientSex},
															{externalName: &quot;PatientStreetAddress&quot;, name : &quot;PatientStreetAddress&quot;, value: tmpPatientStreetAddress},
															{externalName: &quot;PatientCity&quot;, name : &quot;PatientCity&quot;, value: tmpPatientCity},
															{externalName: &quot;PatientPostalCode&quot;, name : &quot;PatientPostalCode&quot;, value: tmpPatientPostalCode},
															{externalName: &quot;PatientState&quot;, name : &quot;PatientState&quot;, value: tmpPatientState},
															{externalName: &quot;PatientCountry&quot;, name : &quot;PatientCountry&quot;, value: tmpPatientCountry},
															{externalName: &quot;PatientStatus&quot;, name : &quot;PatientStatus&quot;, value: tmpPatientStatus},
															{externalName: &quot;PatientPregnancyFlag&quot;, name : &quot;PatientPregnancyFlag&quot;, value: tmpPatientPregnancyFlag},
															{externalName: &quot;PatientFastingFlag&quot;, name : &quot;PatientFastingFlag&quot;, value: tmpPatientFastingFlag}	,
															{externalName: &quot;PatientGivenName&quot;, name : &quot;externalName&quot;, value: tmpPatientGivenName},
															{externalName: &quot;EpisodeClinicalNotes&quot;, name: &quot;EpisodeClinicalNotes&quot;, value: tmpEpisodeClinicalNotes},
															{externalName: &quot;AccountType&quot;, name: &quot;AccountType&quot;, value: tmpAccountType},
															{externalName: &quot;AccountClass&quot;, name: &quot;AccountClass&quot;, value: tmpAccountClass},
															{externalName: &quot;BillTo&quot;, name: &quot;BillTo&quot;, value: tmpBillTo},
															{externalName: &quot;PatientPublicHealthIdentifier&quot;, name: &quot;PatientPublicHealthIdentifier&quot;, value: tmpPatientPublicHealthIdentifier},
															{externalName: &quot;EpisodePublicScheduleCode&quot;, name: &quot;EpisodePublicScheduleCode&quot;, value: tmpEpisodePublicScheduleCode},
															{externalName: &quot;PatientPrivateHealthFundName&quot;, name: &quot;PatientPrivateHealthFundName&quot;, value: tmpPatientPrivateHealthFundName},
															{externalName: &quot;PatientPrivateHealthFundID&quot;, name: &quot;PatientPrivateHealthFundID&quot;, value: tmpPatientPrivateHealthFundID},
															{externalName: &quot;ReqPhysicianID&quot;, name: &quot;ReqPhysicianID&quot;, value: tmpReqPhysicianID},
															{externalName: &quot;ReqPhysicianName&quot;, name: &quot;ReqPhysicianName&quot;, value: tmpReqPhysicianName},
															{externalName: &quot;ReqPhysicianSpeciality&quot;, name: &quot;ReqPhysicianSpeciality&quot;, value: tmpReqPhysicianSpeciality},
															{externalName: &quot;SugeryName&quot;, name: &quot;SugeryName&quot;, value: tmpSugeryName},
															{externalName: &quot;SurgeryCode&quot;, name: &quot;SurgeryCode&quot;, value: tmpSurgeryCode},
															{externalName: &quot;CopyPhysicianIDList&quot;, name: &quot;CopyPhysicianIDList&quot;, value: tmpCopyPhysicianIDList},
															{externalName: &quot;CopyPhysicianNameList&quot;, name: &quot;CopyPhysicianNameList&quot;, value: tmpCopyPhysicianNameList},
															{externalName: &quot;PanelIndicator&quot;, name: &quot;PanelIndicator&quot;, value: tmpPanelIndicator},
															{externalName: &quot;PanelID&quot;, name: &quot;PanelID&quot;, value: tmpPanelID},
															{externalName: &quot;PanelName&quot;, name: &quot;PanelName&quot;, value: tmpPanelName},
															{externalName: &quot;SampleID&quot;, name: &quot;SampleID&quot;, value: tmpSampleID},
															{externalName: &quot;SampleFluidType&quot;, name: &quot;SampleFluidType&quot;, value: tmpSampleFluidType},
															{externalName: &quot;SampleOriginLocation&quot;, name: &quot;SampleOriginLocation&quot;, value: tmpSampleOriginLocation},
															{externalName: &quot;SampleOriginSubLocation&quot;, name: &quot;SampleOriginSubLocation&quot;, value: tmpSampleOriginSubLocation},
															{externalName: &quot;SampleCollectionDateTime&quot;, name: &quot;SampleCollectionDateTime&quot;, value: tmpSampleCollectionDateTime},
															{externalName: &quot;SampleCollectionMethod&quot;, name: &quot;SampleCollectionMethod&quot;, value: tmpSampleCollectionMethod},
															{externalName: &quot;TestSiteSampleReceivedDateTime&quot;, name: &quot;TestSiteSampleReceivedDateTime&quot;, value: tmpTestSiteSampleReceivedDateTime},
															{externalName: &quot;TestPriority&quot;, name: &quot;TestPriority&quot;, value: tmpTestPriority},
															{externalName: &quot;TestRequestSite&quot;, name: &quot;TestRequestSite&quot;, value: tmpTestRequestSite},
															{externalName: &quot;TestSite&quot;, name: &quot;TestSite&quot;, value: tmpTestSite},
															{externalName: &quot;TestType&quot;, name: &quot;TestType&quot;, value: tmpTestType},
															{externalName: &quot;TestOrderedDateTime&quot;, name: &quot;TestOrderedDateTime&quot;, value: tmpTestOrderedDateTime}]});
				}

				currEpisodeID		= tmpEpisodeID;
				currStatus		= sqlResult.getString(&quot;Processed_YN&quot;);

				tmpTestLISCode		= sqlResult.getString(&quot;TestLISCode&quot;);
				tmpTestLISName		= sqlResult.getString(&quot;TestLISName&quot;);
				tmpTestValue		= sqlResult.getString(&quot;TestValue&quot;);
				tmpTestNormalRange	= sqlResult.getString(&quot;TestNormalRange&quot;);
				tmpTestUnits		= sqlResult.getString(&quot;TestUnits&quot;);
				// batchSeq is only used when processing the records with a status of &quot;N&quot;
				// well actually the records will have a status of &quot;P&quot; for processing
				// but they haven&apos;t already beenprocessed
				batchSeq					= sqlResult.getInt(&quot;BatchSeq&quot;);

				episodes[episodeSize - 1].attributeWithValues.push({externalName: tmpTestLISCode, name: tmpTestLISName, value: tmpTestValue,
														units: tmpTestUnits, range: tmpTestNormalRange});

				/* For testing only. The API fails when sending the acxtual tests from the incoming messages*/
				//episodes[episodeSize - 1].attributeWithValues.push({externalName: &quot;GTT 120m&quot;, name: &quot;GTTP 120min&quot;, value: &quot;6.7&quot;});

				if (tmpPatientID != currPatientID){
					currPatientID = tmpPatientID;
				}
			} //end while
			if (currStatus == &quot;N&quot;) {
				var currPatient = {&quot;caseId&quot;: currPatientID , site: &quot;&quot;, episodes: []};
				currPatient.episodes = episodes;
				var currMessage = {&quot;batchSeq&quot;: batchSeq, &quot;episodeID&quot;: currEpisodeID, Patient: currPatient};

				var json = JSON.stringify(currPatient);
				// Send the JSON Object to the Web Service
				logger.trace(&quot;JSON Routing to REST CLIENT: &quot; + json);
				resp = router.routeMessage(&quot;Rest Client 5&quot;, JSON.stringify(currMessage));
				if (resp) {
					logger.trace(&quot;Response from REST Channel: &quot; + resp.getMessage());
				}
			}
			return true;
		}
	}
	catch(ex) {
		logger.error(&quot;PKS - Select_CDS_Data - Exception: &quot; + ex);
		throw ex;
	}
	finally {
	//	dbConn.close();
	}

}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.9.1">
                <id>6f972e07-5a81-4de6-928c-f0135dd43747</id>
                <name>Stop_File_Reader</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597481176</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function Change_State(Channel, State) {
	const threadSleepTime = 10000; // ten seconds
	const millisecondsPerMinute = 60000;
	const maxAttempts = ($(&apos;CDS_Max_Wait_Minutes&apos;) * millisecondsPerMinute) / threadSleepTime;

	var attempts = 0;
	var channelState;

	channelState = ChannelUtil.getChannelState(Channel);
	if (channelState == State) {
		logger.debug(&apos;Channel already &apos; + State + &apos; no need to change state.&apos;);
		return true;
	} else {
		// Channel is running, need to check whether there are records to process...
		if (State == &quot;Started&quot;){
			logger.info(&apos;Starting Channel: &apos; + Channel);
			ChannelUtil.startChannel(Channel);
		} else {
			logger.info(&apos;Stopping Channel: &apos; + Channel);
			ChannelUtil.stopChannel(Channel);
		}
		channelState = ChannelUtil.getChannelState(Channel);
		while ((channelState != State) &amp;&amp; (attempts &lt; maxAttempts)) {
			logger.debug(&quot;Waiting for channel &quot; + Channel);
			channelState = ChannelUtil.getChannelState(Channel);
			if (channelState != State) {
				java.lang.Thread.sleep(threadSleepTime);
			}

			attempts ++;
		}
		logger.debug(&apos;Channel &apos; + Channel + &apos; is &apos; + channelState);
		if (channelState == State) {
			logger.debug(&apos;Successfully changed state of &apos; + Channel);
			return true;
		} else {
			return false;
		}
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.9.1">
                <id>4c706164-e5b5-4de5-ab21-b0c64c8be231</id>
                <name>Update_CDS_Status</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597481701</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function Update_CDS_Status(ResponseStatus, currBatchSeq, currEpisodeID) {
	logger.trace(&quot;Resp Status: &quot; + ResponseStatus);

	var cdsStatus;

    if (ResponseStatus != &quot;SENT&quot;) {
		cdsStatus = &quot;E&quot;;
		logger.trace(&quot;Response code from web service call was not SENT, response:&quot; + ResponseStatus);
		// Call the stored proc setting the status to &quot;E&quot; for the error cases
		var dbConn = Get_CDS_Connection();
		try {
			var returnValue = 1;
			var sqlQuery = &quot;call rd_staging.rdUpdCDSStatus(&quot; + currBatchSeq + &quot;,&apos;&quot; + currEpisodeID + &quot;&apos;,&apos;&quot; + cdsStatus + &quot;&apos;)&quot;;

			logger.trace(&quot;SQL &quot; + sqlQuery);

			var sqlResult = dbConn.executeCachedQuery(sqlQuery);
			if (sqlResult.next()) {
				logger.debug(&quot;PKS - Update_CDS_Status - Info: &quot; + sqlResult.getString(&quot;Message&quot;));
			}
		}
		finally {
		//	dbConn.close();
		}
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.9.1">
                <id>7deb66ed-ae5a-4ab6-830a-5fd343bd25ff</id>
                <name>Utilities</name>
                <revision>2</revision>
                <lastModified>
                  <time>1702919075615</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function Escape_String(str) {
		// Replace the following...
		// &apos; - Single quote
		// &quot; - Double quote
		// % - Percent
		// _ - Underscore
		// ; - Semi colon
		// No need to replace carriage returns, linefeeds and tabs as the incoming file is tab separated and row terminators
		// are carriage returns and linefeeds
		return str ? String(str).replace(/(&apos;|&quot;|\%|\_|\;)/g, &apos;\\$1&apos;) : str;
		}

function transformTestValue(result) {
	if (result != null &amp;&amp; result != &apos;&apos;) {
		if (result.indexOf(&quot;,&quot;) &gt;= 0) {
			result = result.replace(/,/g, &quot;.&quot;);
		}
	}
	return result;
}

function transformRange(range) {
	if (range != null &amp;&amp; range != &apos;&apos;) {
		if (range.indexOf(&quot;,&quot;) &gt;= 0) {
			range = range.replace(/,/g, &quot;.&quot;);
		}
		if (!isValidRange(range)) {
			logger.error(&quot;Invalid range dropped:  &quot; + range + &quot;.  Data was stored without the range.&quot;);
			range = &quot;&quot;;
		}
	}
	return range;
}

function isValidRange(range) {
	var regex = /([\s|-]{0,1}\d{1,4}(\.\d{1,8}){0,1}\s{0,1}-\s{0,1}\d{1,4}(\.\d{1,8}){0,1}\s{0,1})|(\s{0,1}[&lt;&gt;]={0,1}\s{0,3}-{0,1}\d{1,4}(\.\d{1,8}){0,1})/;
	return regex.test(range);
}

function encryptString(originalValue) {
	encryptedValue = originalValue.replace(/0/g, &apos;q&apos;);
	encryptedValue = encryptedValue.replace(/1/g, &apos;w&apos;);
	encryptedValue = encryptedValue.replace(/2/g, &apos;e&apos;);
	encryptedValue = encryptedValue.replace(/3/g, &apos;r&apos;);
	encryptedValue = encryptedValue.replace(/4/g, &apos;t&apos;);
	encryptedValue = encryptedValue.replace(/5/g, &apos;y&apos;);
	encryptedValue = encryptedValue.replace(/6/g, &apos;u&apos;);
	encryptedValue = encryptedValue.replace(/7/g, &apos;i&apos;);
	encryptedValue = encryptedValue.replace(/8/g, &apos;o&apos;);
	encryptedValue = encryptedValue.replace(/9/g, &apos;p&apos;);
	encryptedValue = encryptedValue.replace(/q/g, &apos;a&apos;);
	encryptedValue = encryptedValue.replace(/w/g, &apos;s&apos;);
	encryptedValue = encryptedValue.replace(/e/g, &apos;d&apos;);
	encryptedValue = encryptedValue.replace(/r/g, &apos;f&apos;);
	encryptedValue = encryptedValue.replace(/t/g, &apos;g&apos;);
	encryptedValue = encryptedValue.replace(/y/g, &apos;h&apos;);
	encryptedValue = encryptedValue.replace(/u/g, &apos;j&apos;);
	encryptedValue = encryptedValue.replace(/i/g, &apos;k&apos;);
	encryptedValue = encryptedValue.replace(/o/g, &apos;l&apos;);
	encryptedValue = encryptedValue.replace(/p/g, &apos;z&apos;);
	encryptedValue = encryptedValue.replace(/a/g, &apos;x&apos;);
	encryptedValue = encryptedValue.replace(/s/g, &apos;c&apos;);
	encryptedValue = encryptedValue.replace(/d/g, &apos;v&apos;);
	encryptedValue = encryptedValue.replace(/f/g, &apos;b&apos;);
	encryptedValue = encryptedValue.replace(/g/g, &apos;n&apos;);
	encryptedValue = encryptedValue.replace(/h/g, &apos;m&apos;);
	encryptedValue = encryptedValue.replace(/j/g, &apos;9&apos;);
	encryptedValue = encryptedValue.replace(/k/g, &apos;8&apos;);
	encryptedValue = encryptedValue.replace(/l/g, &apos;7&apos;);
	encryptedValue = encryptedValue.replace(/z/g, &apos;6&apos;);
	encryptedValue = encryptedValue.replace(/x/g, &apos;5&apos;);
	encryptedValue = encryptedValue.replace(/c/g, &apos;4&apos;);
	encryptedValue = encryptedValue.replace(/v/g, &apos;3&apos;);
	encryptedValue = encryptedValue.replace(/b/g, &apos;2&apos;);
	encryptedValue = encryptedValue.replace(/n/g, &apos;1&apos;);
	encryptedValue = encryptedValue.replace(/m/g, &apos;0&apos;);
	encryptedValue = encryptedValue.replace(/0/g, &apos;q&apos;);
	encryptedValue = encryptedValue.replace(/1/g, &apos;w&apos;);
	encryptedValue = encryptedValue.replace(/2/g, &apos;e&apos;);
	encryptedValue = encryptedValue.replace(/3/g, &apos;r&apos;);
	encryptedValue = encryptedValue.replace(/4/g, &apos;t&apos;);
	encryptedValue = encryptedValue.replace(/5/g, &apos;y&apos;);
	encryptedValue = encryptedValue.replace(/6/g, &apos;u&apos;);
	encryptedValue = encryptedValue.replace(/7/g, &apos;i&apos;);
	encryptedValue = encryptedValue.replace(/8/g, &apos;o&apos;);
	encryptedValue = encryptedValue.replace(/9/g, &apos;p&apos;);
	encryptedValue = encryptedValue.replace(/m/g, &apos;a&apos;);
	encryptedValue = encryptedValue.replace(/n/g, &apos;s&apos;);
	encryptedValue = encryptedValue.replace(/b/g, &apos;d&apos;);
	encryptedValue = encryptedValue.replace(/v/g, &apos;f&apos;);
	encryptedValue = encryptedValue.replace(/c/g, &apos;g&apos;);
	encryptedValue = encryptedValue.replace(/x/g, &apos;h&apos;);
	encryptedValue = encryptedValue.replace(/z/g, &apos;j&apos;);
	encryptedValue = encryptedValue.replace(/l/g, &apos;k&apos;);
	encryptedValue = encryptedValue.replace(/k/g, &apos;l&apos;);
	encryptedValue = encryptedValue.replace(/j/g, &apos;z&apos;);
	encryptedValue = encryptedValue.replace(/h/g, &apos;x&apos;);
	encryptedValue = encryptedValue.replace(/g/g, &apos;c&apos;);
	encryptedValue = encryptedValue.replace(/f/g, &apos;v&apos;);
	encryptedValue = encryptedValue.replace(/d/g, &apos;b&apos;);
	encryptedValue = encryptedValue.replace(/s/g, &apos;n&apos;);
	encryptedValue = encryptedValue.replace(/a/g, &apos;m&apos;);
	encryptedValue = encryptedValue.replace(/p/g, &apos;9&apos;);
	encryptedValue = encryptedValue.replace(/o/g, &apos;8&apos;);
	encryptedValue = encryptedValue.replace(/i/g, &apos;7&apos;);
	encryptedValue = encryptedValue.replace(/u/g, &apos;6&apos;);
	encryptedValue = encryptedValue.replace(/y/g, &apos;5&apos;);
	encryptedValue = encryptedValue.replace(/t/g, &apos;4&apos;);
	encryptedValue = encryptedValue.replace(/r/g, &apos;3&apos;);
	encryptedValue = encryptedValue.replace(/e/g, &apos;2&apos;);
	encryptedValue = encryptedValue.replace(/w/g, &apos;1&apos;);
	encryptedValue = encryptedValue.replace(/q/g, &apos;0&apos;);
	return encryptedValue;
}

function calculate_age_in_years(dateOfBirth) {
	var today = new Date();
	var birthDate = new Date(dateOfBirth);
	var age = today.getFullYear() - birthDate.getFullYear();
	var m = today.getMonth() - birthDate.getMonth();
	if (m &lt; 0 || (m === 0 &amp;&amp; today.getDate() &lt; birthDate.getDate())) {
		age--;
	}
	return age;
}

function buildStringIfNotNull(value) {
	if (value == null || value == &apos;&apos;) {
		return null;
	}
	return &quot;&apos;&quot; + value + &quot;&apos;&quot;;
}

</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
        <dependentIds>
          <string>00680d42-b755-42ec-9957-08ae467c47c9</string>
        </dependentIds>
      </exportData>
    </channel>
    <channel version="3.9.1">
      <id>bcf716ce-eb41-4027-95d0-b4688cd49ee4</id>
      <nextMetaDataId>7</nextMetaDataId>
      <name>Offline - Send to CDS</name>
      <description></description>
      <revision>1</revision>
      <sourceConnector version="3.9.1">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="3.9.1">
          <pluginProperties/>
          <sourceConnectorProperties version="3.9.1">
            <responseVariable>d1</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>10</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
        </properties>
        <transformer version="3.9.1">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.9.1">
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>/*
var patientid =  msg[&apos;senderReference&apos;].toString().substring(msg[&apos;senderReference&apos;].toString().indexOf(&quot;&lt;MSH.5.1&gt;&quot;)+9,msg[&apos;senderReference&apos;].toString().indexOf(&quot;&lt;/MSH.5.1&gt;&quot;))
var datatime = msg[&apos;senderReference&apos;].toString().substring(msg[&apos;senderReference&apos;].toString().indexOf(&quot;&lt;MSH.7.1&gt;&quot;)+9,msg[&apos;senderReference&apos;].toString().indexOf(&quot;&lt;/MSH.7.1&gt;&quot;))

channelMap.put(&apos;CASEID&apos;,msg[&apos;caseId&apos;].toString());
channelMap.put(&apos;ORDERID&apos;,msg[&apos;episodes&apos;][0][&apos;episodeId&apos;].toString());
channelMap.put(&apos;PATIENTID&apos;,patientid);
channelMap.put(&apos;DATATIME&apos;,datatime);


var insert = &quot;INSERT INTO statistics.incomming (CASEID,PATIENTID,ORDERID,DATATIME) &quot;;
insert += &quot;VALUES(&apos;&quot;+msg[&apos;caseId&apos;].toString()+&quot;&apos;,&apos;&quot;+patientid+&quot;&apos;,&apos;&quot;+msg[&apos;episodes&apos;][0][&apos;episodeId&apos;].toString()+&quot;&apos;,STR_TO_DATE(&apos;&quot;+datatime+&quot;&apos;,&apos;%Y%m%d%H%i%s&apos;))&quot;;
channelMap.put(&apos;insert&apos;,insert);

dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;com.mysql.jdbc.Driver&apos;, &apos;jdbc:mysql://localhost:3306/rd_staging&apos;, &apos;root&apos;, &apos;1Password&apos;);
result2 = dbConn.executeUpdate(insert);
*/</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>JSON</inboundDataType>
          <outboundDataType>JSON</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.9.1">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.9.1">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.9.1">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.9.1">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="3.9.1">
          <elements/>
        </filter>
        <transportName>Channel Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="3.9.1">
          <metaDataId>1</metaDataId>
          <name>Send Case to CDS</name>
          <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="3.9.1">
            <pluginProperties/>
            <destinationConnectorProperties version="3.9.1">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <host>http://localhost:9023/rdr/interpreter/query?kbcode=FRES</host>
            <useProxyServer>false</useProxyServer>
            <proxyAddress></proxyAddress>
            <proxyPort></proxyPort>
            <method>post</method>
            <headers class="linked-hash-map"/>
            <parameters class="linked-hash-map"/>
            <useHeadersVariable>false</useHeadersVariable>
            <headersVariable></headersVariable>
            <useParametersVariable>false</useParametersVariable>
            <parametersVariable></parametersVariable>
            <responseXmlBody>false</responseXmlBody>
            <responseParseMultipart>true</responseParseMultipart>
            <responseIncludeMetadata>false</responseIncludeMetadata>
            <responseBinaryMimeTypes>application/.*(?&lt;!json|xml)$|image/.*|video/.*|audio/.*</responseBinaryMimeTypes>
            <responseBinaryMimeTypesRegex>true</responseBinaryMimeTypesRegex>
            <multipart>false</multipart>
            <useAuthentication>false</useAuthentication>
            <authenticationType>Basic</authenticationType>
            <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
            <username></username>
            <password></password>
            <content>${message.encodedData}</content>
            <contentType>application/json</contentType>
            <dataTypeBinary>false</dataTypeBinary>
            <charset>UTF-8</charset>
            <socketTimeout>30000</socketTimeout>
          </properties>
          <transformer version="3.9.1">
            <elements/>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.9.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.9.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.9.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.9.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.9.1">
            <elements/>
            <inboundTemplate encoding="base64">ew0KICAiY2FzZUlkIiA6ICIiLA0KICAic2l0ZSIgOiAiY2h1Y2siLA0KICAic2VuZGVyUmVmZXJl
bmNlIiA6ICI8SEw3TWVzc2FnZT48TVNIPjxNU0guMT58PC9NU0guMT48TVNILjI+Xn5cXCZhbXA7
PC9NU0guMj48TVNILjM+PE1TSC4zLjE+R2xpbXM8L01TSC4zLjE+PC9NU0guMz48TVNILjQ+PE1T
SC40LjE+Y3liZXJsYWI5U1o8L01TSC40LjE+PC9NU0guND48TVNILjU+PE1TSC41LjE+MTk5OTAy
MDFMRUVTMjE8L01TSC41LjE+PC9NU0guNT48TVNILjY+PE1TSC42LjE+Y3liZXJsYWI5U1o8L01T
SC42LjE+PC9NU0guNj48TVNILjc+PE1TSC43LjE+MjAyMDA1MjAwOTEzMzE8L01TSC43LjE+PC9N
U0guNz48TVNILjgvPjxNU0guOT48TVNILjkuMT5PVUw8L01TSC45LjE+PE1TSC45LjI+UjIyPC9N
U0guOS4yPjwvTVNILjk+PE1TSC4xMD48TVNILjEwLjE+MDcwMDIxMzA4Mjc5PC9NU0guMTAuMT48
L01TSC4xMD48TVNILjExPjxNU0guMTEuMT5QPC9NU0guMTEuMT48L01TSC4xMT48TVNILjEyPjxN
U0guMTIuMT4yLjU8L01TSC4xMi4xPjwvTVNILjEyPjxNU0guMTMvPjxNU0guMTQvPjxNU0guMTU+
PE1TSC4xNS4xPk5FPC9NU0guMTUuMT48L01TSC4xNT48TVNILjE2PjxNU0guMTYuMT5BTDwvTVNI
LjE2LjE+PC9NU0guMTY+PE1TSC4xNy8+PE1TSC4xOD48TVNILjE4LjE+MTI1MjwvTVNILjE4LjE+
PC9NU0guMTg+PC9NU0g+PFBJRD48UElELjE+PFBJRC4xLjE+MTwvUElELjEuMT48L1BJRC4xPjxQ
SUQuMi8+PFBJRC4zPjxQSUQuMy4xPjEyMzQ1Njc8L1BJRC4zLjE+PFBJRC4zLjIvPjxQSUQuMy4z
Lz48UElELjMuND5HTElNUzwvUElELjMuND48L1BJRC4zPjxQSUQuMz48UElELjMuMT4wMTIzNDU2
NzwvUElELjMuMT48UElELjMuMi8+PFBJRC4zLjMvPjxQSUQuMy40PktHX0k8L1BJRC4zLjQ+PC9Q
SUQuMz48UElELjM+PFBJRC4zLjE+MDEyMzQ1Njc8L1BJRC4zLjE+PFBJRC4zLjIvPjxQSUQuMy4z
Lz48UElELjMuND5LR19JPC9QSUQuMy40PjwvUElELjM+PFBJRC4zPjxQSUQuMy4xPjAxMjM0NTY3
ODk8L1BJRC4zLjE+PFBJRC4zLjIvPjxQSUQuMy4zLz48UElELjMuND5TWl9JPC9QSUQuMy40Pjwv
UElELjM+PFBJRC4zPjxQSUQuMy4xPjA5ODc2NTQzPC9QSUQuMy4xPjxQSUQuMy4yLz48UElELjMu
My8+PFBJRC4zLjQ+VERfSTwvUElELjMuND48L1BJRC4zPjxQSUQuMz48UElELjMuMT4wMDAwMDAw
MDA8L1BJRC4zLjE+PFBJRC4zLjIvPjxQSUQuMy4zLz48UElELjMuND5OTE1JTkJJWkE8L1BJRC4z
LjQ+PC9QSUQuMz48UElELjM+PFBJRC4zLjE+MDAwMDAwMDAwPC9QSUQuMy4xPjxQSUQuMy4yLz48
UElELjMuMy8+PFBJRC4zLjQ+TUxfSTwvUElELjMuND48L1BJRC4zPjxQSUQuMz48UElELjMuMT44
NzY1NDMyPC9QSUQuMy4xPjxQSUQuMy4yLz48UElELjMuMy8+PFBJRC4zLjQ+Q0FTU0NPTlRST0w8
L1BJRC4zLjQ+PC9QSUQuMz48UElELjQvPjxQSUQuNT48UElELjUuMT5MZWVzbmFhbSB2YW48L1BJ
RC41LjE+PFBJRC41LjI+UElFVEpFPC9QSUQuNS4yPjxQSUQuNS4zPlMuIE4uPC9QSUQuNS4zPjwv
UElELjU+PFBJRC42Lz48UElELjc+PFBJRC43LjE+MTk5OTAyMDE8L1BJRC43LjE+PC9QSUQuNz48
UElELjg+PFBJRC44LjE+RjwvUElELjguMT48L1BJRC44PjxQSUQuOS8+PFBJRC4xMC8+PFBJRC4x
MT48UElELjExLjE+U3Vpa2Vyc3RyYWF0PC9QSUQuMTEuMT48UElELjExLjI+MTE8L1BJRC4xMS4y
PjxQSUQuMTEuMz5EdWNrc3RhZDwvUElELjExLjM+PFBJRC4xMS40Lz48UElELjExLjU+MTEyMkFC
PC9QSUQuMTEuNT48UElELjExLjY+Tkw8L1BJRC4xMS42PjwvUElELjExPjxQSUQuMTIvPjxQSUQu
MTM+PFBJRC4xMy4xPjAyNTU1OTk5OTk8L1BJRC4xMy4xPjxQSUQuMTMuMi8+PFBJRC4xMy4zPlBI
PC9QSUQuMTMuMz48L1BJRC4xMz48UElELjE0Lz48UElELjE1Lz48UElELjE2Lz48UElELjE3Lz48
UElELjE4Lz48UElELjE5Lz48UElELjIwLz48UElELjIxLz48UElELjIyLz48UElELjIzLz48UElE
LjI0PjxQSUQuMjQuMT5OPC9QSUQuMjQuMT48L1BJRC4yND48UElELjI1Lz48UElELjI2Lz48UElE
LjI3Lz48UElELjI4Lz48UElELjI5Lz48UElELjMwPjxQSUQuMzAuMT5OPC9QSUQuMzAuMT48L1BJ
RC4zMD48L1BJRD48UEQxPjxQRDEuMS8+PFBEMS4yLz48UEQxLjMvPjxQRDEuND48UEQxLjQuMT4w
MTAyMzg2ODwvUEQxLjQuMT48UEQxLjQuMj5BYmJla2VyazwvUEQxLjQuMj48UEQxLjQuMz5FLk0u
PC9QRDEuNC4zPjxQRDEuNC40Lz48UEQxLjQuNS8+PFBEMS40LjYvPjxQRDEuNC43Lz48UEQxLjQu
OC8+PFBEMS40Ljk+R0xJTVM8L1BEMS40Ljk+PC9QRDEuND48L1BEMT48UFYxPjxQVjEuMT48UFYx
LjEuMT4xPC9QVjEuMS4xPjwvUFYxLjE+PFBWMS4yPjxQVjEuMi4xPkk8L1BWMS4yLjE+PC9QVjEu
Mj48UFYxLjM+PFBWMS4zLjE+SEFaSUNVPC9QVjEuMy4xPjxQVjEuMy4yPjUyMTcxNzwvUFYxLjMu
Mj48UFYxLjMuMy8+PFBWMS4zLjQvPjxQVjEuMy41Lz48UFYxLjMuNi8+PFBWMS4zLjcvPjxQVjEu
My44Lz48UFYxLjMuOS8+PFBWMS4zLjEwLz48UFYxLjMuMTE+R0xJTVM8L1BWMS4zLjExPjwvUFYx
LjM+PFBWMS40Lz48UFYxLjUvPjxQVjEuNi8+PFBWMS43Lz48UFYxLjgvPjxQVjEuOS8+PFBWMS4x
MC8+PFBWMS4xMS8+PFBWMS4xMi8+PFBWMS4xMy8+PFBWMS4xNC8+PFBWMS4xNS8+PFBWMS4xNi8+
PFBWMS4xNy8+PFBWMS4xOC8+PFBWMS4xOT48UFYxLjE5LjE+NTYyMzIwNjM8L1BWMS4xOS4xPjwv
UFYxLjE5PjxQVjEuMjAvPjxQVjEuMjEvPjxQVjEuMjIvPjxQVjEuMjMvPjxQVjEuMjQvPjxQVjEu
MjUvPjxQVjEuMjYvPjxQVjEuMjcvPjxQVjEuMjgvPjxQVjEuMjkvPjxQVjEuMzAvPjxQVjEuMzEv
PjxQVjEuMzIvPjxQVjEuMzMvPjxQVjEuMzQvPjxQVjEuMzUvPjxQVjEuMzYvPjxQVjEuMzcvPjxQ
VjEuMzgvPjxQVjEuMzkvPjxQVjEuNDAvPjxQVjEuNDEvPjxQVjEuNDIvPjxQVjEuNDMvPjxQVjEu
NDQ+PFBWMS40NC4xPjIwMjAwMzIxMTgxMzA1PC9QVjEuNDQuMT48L1BWMS40ND48UFYxLjQ1PjxQ
VjEuNDUuMT4yMDIwMDQwODEwMTUwMDwvUFYxLjQ1LjE+PC9QVjEuNDU+PC9QVjE+PFBWMT48UFYx
LjE+PFBWMS4xLjE+MTwvUFYxLjEuMT48L1BWMS4xPjxQVjEuMj48UFYxLjIuMT5JPC9QVjEuMi4x
PjwvUFYxLjI+PFBWMS4zPjxQVjEuMy4xPkhBWklDVTwvUFYxLjMuMT48UFYxLjMuMj41MjE3MTc8
L1BWMS4zLjI+PFBWMS4zLjMvPjxQVjEuMy40Lz48UFYxLjMuNS8+PFBWMS4zLjYvPjxQVjEuMy43
Lz48UFYxLjMuOC8+PFBWMS4zLjkvPjxQVjEuMy4xMC8+PFBWMS4zLjExPkdMSU1TPC9QVjEuMy4x
MT48L1BWMS4zPjxQVjEuNC8+PFBWMS41Lz48UFYxLjYvPjxQVjEuNy8+PFBWMS44Lz48UFYxLjkv
PjxQVjEuMTAvPjxQVjEuMTEvPjxQVjEuMTIvPjxQVjEuMTMvPjxQVjEuMTQvPjxQVjEuMTUvPjxQ
VjEuMTYvPjxQVjEuMTcvPjxQVjEuMTgvPjxQVjEuMTk+PFBWMS4xOS4xPjU2MjMyMDYzPC9QVjEu
MTkuMT48L1BWMS4xOT48UFYxLjIwLz48UFYxLjIxLz48UFYxLjIyLz48UFYxLjIzLz48UFYxLjI0
Lz48UFYxLjI1Lz48UFYxLjI2Lz48UFYxLjI3Lz48UFYxLjI4Lz48UFYxLjI5Lz48UFYxLjMwLz48
UFYxLjMxLz48UFYxLjMyLz48UFYxLjMzLz48UFYxLjM0Lz48UFYxLjM1Lz48UFYxLjM2Lz48UFYx
LjM3Lz48UFYxLjM4Lz48UFYxLjM5Lz48UFYxLjQwLz48UFYxLjQxLz48UFYxLjQyLz48UFYxLjQz
Lz48UFYxLjQ0PjxQVjEuNDQuMT4yMDIwMDMyMTE4MTMwNTwvUFYxLjQ0LjE+PC9QVjEuNDQ+PFBW
MS40NT48UFYxLjQ1LjE+MjAyMDA0MDgxMDE1MDA8L1BWMS40NS4xPjwvUFYxLjQ1PjwvUFYxPjxT
UE0+PFNQTS4xPjxTUE0uMS4xPjE8L1NQTS4xLjE+PC9TUE0uMT48U1BNLjI+PFNQTS4yLjEvPjxT
UE0uMi4yPjxTUE0uMi4yLjE+MjAwMzI0MDQwNjAyPC9TUE0uMi4yLjE+PFNQTS4yLjIuMj5HTElN
UzwvU1BNLjIuMi4yPjwvU1BNLjIuMj48L1NQTS4yPjxTUE0uMy8+PFNQTS40PjxTUE0uNC4xPlZC
Q0FQPC9TUE0uNC4xPjxTUE0uNC4yPlZvbGJsb2VkIENhcGlsbGFpcjwvU1BNLjQuMj48U1BNLjQu
Mz5HTElNUzwvU1BNLjQuMz48L1NQTS40PjxTUE0uNS8+PFNQTS42Lz48U1BNLjcvPjxTUE0uOC8+
PFNQTS45Lz48U1BNLjEwLz48U1BNLjExLz48U1BNLjEyPjxTUE0uMTIuMT4wPC9TUE0uMTIuMT48
U1BNLjEyLjI+PFNQTS4xMi4yLjE+bWw8L1NQTS4xMi4yLjE+PFNQTS4xMi4yLjI+bWw8L1NQTS4x
Mi4yLjI+PFNQTS4xMi4yLjM+R0xJTVM8L1NQTS4xMi4yLjM+PC9TUE0uMTIuMj48L1NQTS4xMj48
U1BNLjEzLz48U1BNLjE0Lz48U1BNLjE1Lz48U1BNLjE2Lz48U1BNLjE3PjxTUE0uMTcuMT4yMDIw
MDMyNDEzNTMyNzwvU1BNLjE3LjE+PC9TUE0uMTc+PFNQTS4xOD48U1BNLjE4LjE+MjAyMDAzMjQx
MzUzMjc8L1NQTS4xOC4xPjwvU1BNLjE4PjxTUE0uMTkvPjxTUE0uMjA+PFNQTS4yMC4xPlk8L1NQ
TS4yMC4xPjwvU1BNLjIwPjwvU1BNPjxPUkM+PE9SQy4xPjxPUkMuMS4xPlNDPC9PUkMuMS4xPjwv
T1JDLjE+PE9SQy4yLz48T1JDLjM+PE9SQy4zLjE+RV8yMDAzMjQwMzI4PC9PUkMuMy4xPjxPUkMu
My4yPkdMSU1TPC9PUkMuMy4yPjwvT1JDLjM+PE9SQy40Lz48T1JDLjU+PE9SQy41LjE+Q008L09S
Qy41LjE+PC9PUkMuNT48T1JDLjYvPjxPUkMuNz48T1JDLjcuMS8+PE9SQy43LjIvPjxPUkMuNy4z
Lz48T1JDLjcuND4yMDIwMDMyNDEzNTMyNzwvT1JDLjcuND48T1JDLjcuNS8+PE9SQy43LjY+Ujwv
T1JDLjcuNj48L09SQy43PjxPUkMuOC8+PE9SQy45PjxPUkMuOS4xPjIwMjAwNTIwMDkxMzMxPC9P
UkMuOS4xPjwvT1JDLjk+PE9SQy4xMC8+PE9SQy4xMS8+PE9SQy4xMj48T1JDLjEyLjE+MTAwMDAw
MDc2MDwvT1JDLjEyLjE+PE9SQy4xMi4yPkJFTk5FUjwvT1JDLjEyLjI+PE9SQy4xMi4zPlBNLmlu
dGVuc2l2aXN0PC9PUkMuMTIuMz48T1JDLjEyLjQvPjxPUkMuMTIuNS8+PE9SQy4xMi42Lz48T1JD
LjEyLjcvPjxPUkMuMTIuOC8+PE9SQy4xMi45PlNaX0k8L09SQy4xMi45PjwvT1JDLjEyPjxPUkMu
MTM+PE9SQy4xMy4xPkhBWklDVTwvT1JDLjEzLjE+PE9SQy4xMy4yLz48T1JDLjEzLjMvPjxPUkMu
MTMuNC8+PE9SQy4xMy41Lz48T1JDLjEzLjYvPjxPUkMuMTMuNy8+PE9SQy4xMy44Lz48T1JDLjEz
LjkvPjxPUkMuMTMuMTAvPjxPUkMuMTMuMTE+R0xJTVM8L09SQy4xMy4xMT48L09SQy4xMz48T1JD
LjE0Lz48T1JDLjE1Lz48T1JDLjE2Lz48T1JDLjE3PjxPUkMuMTcuMT5LR0VHPC9PUkMuMTcuMT48
T1JDLjE3LjI+RGVjZW50cmFhbCBTcGFhcm5lZ2FzdGh1aXMgbG9jYXRpZSBIYWFybGVtIHp1aWQ8
L09SQy4xNy4yPjxPUkMuMTcuMz5HTElNUzwvT1JDLjE3LjM+PC9PUkMuMTc+PE9SQy4xOC8+PE9S
Qy4xOT48T1JDLjE5LjE+MTAwMDAwMTE3OTwvT1JDLjE5LjE+PE9SQy4xOS4yPlByb25rLUFkbWly
YWFsPC9PUkMuMTkuMj48T1JDLjE5LjM+Q0o8L09SQy4xOS4zPjxPUkMuMTkuNC8+PE9SQy4xOS41
Lz48T1JDLjE5LjYvPjxPUkMuMTkuNz5Eci48L09SQy4xOS43PjxPUkMuMTkuOC8+PE9SQy4xOS45
PlNaX0k8L09SQy4xOS45PjwvT1JDLjE5PjwvT1JDPjwvSEw3TWVzc2FnZT4iLA0KICAiYXBwcm92
ZWQiIDogdHJ1ZQ0KfQ==</inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.9.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.9.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.9.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.9.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.9.1">
            <elements/>
          </filter>
          <transportName>HTTP Sender</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>false</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="3.9.1">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>PRODUCTION</messageStorageMode>
        <encryptData>false</encryptData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>CASEID</name>
            <type>STRING</type>
            <mappingName>Case</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="3.9.1">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>false</enabled>
          <lastModified>
            <time>1702929595896</time>
            <timezone>America/Bogota</timezone>
          </lastModified>
          <pruningSettings>
            <pruneMetaDataDays>7</pruneMetaDataDays>
            <archiveEnabled>false</archiveEnabled>
          </pruningSettings>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="3.9.1">
            <id>14edb524-2418-43b8-a793-a6cd4834125f</id>
            <name>CDSLibrary</name>
            <revision>2</revision>
            <lastModified>
              <time>1702919075456</time>
              <timezone>America/Bogota</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>77ab9cc6-2ecd-44c0-b42b-12d7d0d9f189</string>
              <string>1d1c2f3f-7b43-4a08-aac9-3406457df838</string>
              <string>747034d1-3b67-4648-b61d-97569079ec4f</string>
              <string>8c353129-1ddc-49ad-8b83-3ad2afe7a40c</string>
              <string>8744071f-c37e-4836-91e5-09c33fc3fc6c</string>
              <string>433ad4fa-bc93-47c1-a845-5efea1c1072e</string>
              <string>7fe17d45-0d9c-4e3b-84e5-1ca99bbed1b0</string>
              <string>c493d457-70a0-4f4c-a937-0488ff6a4535</string>
              <string>1badc74d-d04c-406b-877f-d31701e3e635</string>
              <string>84789e18-d176-4c56-b440-2e0f2e95a99a</string>
              <string>d399041c-db53-4cb3-bc90-de88541ad78f</string>
              <string>eb46a988-ef28-438f-85a8-79ff448dbfa8</string>
              <string>76c3a018-7fc4-4fa9-a233-ae85c317f616</string>
              <string>55980407-140c-48e7-bc35-175c21f68fcb</string>
              <string>278077bd-06c4-4367-8e98-793b88f53108</string>
              <string>fc376d9e-a4a0-42b9-8945-c643c00a0048</string>
              <string>18a8bfe5-6fbf-40b0-ac5e-d1e0b34316b3</string>
              <string>b0a96d01-1c22-4c23-bce1-5536abe79f78</string>
              <string>6e154ddd-fa94-48d0-8d51-099d4b18dc7e</string>
              <string>0c4728b1-b0fa-4d99-9d0b-640e73a77e22</string>
              <string>b713e9b5-f29f-420c-8767-347c4cc59235</string>
              <string>73de28ab-9b76-43f5-a589-933aca189633</string>
              <string>0ee1b38b-9693-49cc-a93f-d83c2162abea</string>
              <string>c103919f-4f02-4ebb-b5fc-c74d70f9d984</string>
              <string>7323ba37-7876-4329-bd17-6e8f63f70320</string>
              <string>f4c513ef-f1ab-470a-bff5-d505363dd0cb</string>
              <string>4a11b6f9-2a70-45a4-85ef-7949937ff063</string>
              <string>698319a5-6a40-439f-a2fc-77968f8fd8b0</string>
              <string>1dc78376-5e82-488e-8b61-844d9c9201f6</string>
              <string>824a47e1-d27d-4c70-b613-87b22a06b30f</string>
              <string>73fcebb7-1fac-4550-8bcf-cd90553c8706</string>
              <string>dfaea744-4c0c-4e3e-974f-2714feb84b6a</string>
              <string>4c30d333-07c7-4608-90fb-f209480945f9</string>
              <string>a34ca889-a825-42c2-b8d2-eade79050a7b</string>
              <string>65fd27b3-2550-4fc6-a077-3b700f624801</string>
              <string>e28b6034-657f-44fe-bdfb-2eb08f6b8b9d</string>
              <string>8bf57726-afe4-4bf2-ab11-a811a2a90173</string>
              <string>92a2401a-38b2-4332-ae9c-382eeff9fed9</string>
              <string>ec42f2b5-da91-422d-8e84-ca8fce839ca9</string>
              <string>f9e9b002-0d75-4d07-9829-9a936107fa64</string>
              <string>3e3fa50e-bf1f-4040-94e8-e534f59f1aca</string>
              <string>44fa8b92-bea5-4ca9-bc34-fba837df1f3e</string>
              <string>9a05a6d3-f67e-4e8d-a5c8-eeddecacea4f</string>
              <string>7b43fb86-dd49-4f24-8e63-2921f65835a7</string>
              <string>1ef6c048-d7a7-4702-a9fa-88c3929f28d7</string>
              <string>e5ac2e27-f193-4738-b6e4-fa77ccdb8210</string>
              <string>5d6a3192-30a4-4b5d-9e42-ce67cc86d815</string>
              <string>a769de5d-f56c-4603-bcbc-3d2459213531</string>
              <string>bfe36ced-a6f7-44e7-af45-5837f11b3bad</string>
              <string>d1e3a6bf-f2ad-4395-aa42-5a39ca3e671d</string>
              <string>a0372fd7-10c0-4832-adb3-80afede56081</string>
              <string>1bc4cc73-cce0-43f1-98af-52d3072840e1</string>
              <string>1e3cb27c-ab1a-4edd-837b-baa3d7a7b1e4</string>
              <string>8be4a05a-d1fb-452f-bdbc-dc149574753f</string>
              <string>9d321038-d32a-41be-b3a2-abd7434dff69</string>
              <string>799b2a4c-6925-4ea7-8470-0d0fc00df393</string>
              <string>5dffbd4e-833e-4a91-9497-740ad95fc4e1</string>
              <string>03226d36-9fd4-49ce-a918-28b4fb9517b3</string>
              <string>7a35a369-f78d-4e11-b045-c84d87d26355</string>
              <string>b1b9fd9d-0be2-4a67-87a8-38f405b2c3bb</string>
              <string>84ce7656-7580-4d1d-9d81-e81e325089fd</string>
              <string>b13045bc-2898-4fc1-b952-5ea29cf70720</string>
              <string>750017ad-a990-4ed0-9a1f-75c94531aba4</string>
              <string>54694f01-6c22-44db-a7e5-ebc9ae829740</string>
              <string>b5bdf4f0-81b3-4c53-b885-c0c670db3d57</string>
              <string>8f69e69c-327c-4275-8aca-f2cda426dab5</string>
              <string>3b2dd6b0-68c1-4392-b655-087abacd766d</string>
              <string>01ea1ce1-60ff-42c5-b059-a15a77275267</string>
              <string>cb9377d3-e95b-4b0b-bbb2-5e84fb106556</string>
              <string>a036bb2a-a192-455b-b3f3-14ab0fd5cbac</string>
              <string>110bc202-af08-4bfe-b641-887703d741f0</string>
              <string>0d1732eb-79c8-47b1-a829-58be289cee1f</string>
              <string>4b6f419b-3fbf-4371-b1fe-c51ecd5a05aa</string>
              <string>23b63fb2-743f-481a-9726-99430365b127</string>
              <string>d459da66-c436-4ae0-a5ec-d153d2d891a5</string>
              <string>37586608-d3c6-4465-953a-dce98ee13a2c</string>
              <string>ed36555d-bab4-476d-9887-ac2727f94e40</string>
              <string>2472b206-9949-4ada-acbb-64b14eae1b78</string>
              <string>a849d594-1242-4840-8d17-634abf7a9e66</string>
              <string>b5b3ad88-a0a7-4110-8813-19f68dc7b136</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.9.1">
                <id>68af7e0a-a2a5-438d-bb24-fd55642929a2</id>
                <name>createAttribute</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597480447</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function createAttribute(name ,value){
	var attributeObject = {};
  attributeObject.externalName = name;
  attributeObject.value =	value;	
  return attributeObject
	}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.9.1">
                <id>06ef2d18-82b1-4402-9113-6f4a8d472361</id>
                <name>createExtendedAttribute</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597481876</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function createExtendedAttribute(externalName,value,units,range)
{
	var attributeObject = {};
	if(validateValues(value))
	{ 
		
	  	attributeObject.externalName  = externalName;
	  	attributeObject.value =value;
	  	attributeObject.units =units;
	  	
	  	if (validateRange(range)){
	 		attributeObject.range=range ;
	  	}
	 	
		
	}else 
	{attributeObject.externalName  = externalName;}
	return  attributeObject;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.9.1">
                <id>0bf4aa5b-5d2c-467e-a47a-8c05e137f6a3</id>
                <name>Get_Informix_Connection</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597480091</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
JavaScript function to centralise creation of a database connection. The
connection won&apos;t be open, the caller still needs to do this but all constants
will be instantiated here

@return dbConn returns an instance of a returns a new DatabaseConnection object
*/
function Get_Informix_Connection() {

var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;com.informix.jdbc.IfxDriver&apos;, &apos;jdbc:informix-sqli://10.192.176.57:1526/orion_clinic:INFORMIXSERVER=dboc&apos;, &apos;consultaocli&apos;, &apos;hdrsanjuan&apos;);

return dbConn;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.9.1">
                <id>aff2785a-9d8b-44e1-8667-21a23f632eb6</id>
                <name>validateRange</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597480657</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function validateRange(ReferenceRange)
{
	if(ReferenceRange != null &amp;&amp; ReferenceRange.toString().trim().indexOf(&apos;-&apos;) &gt;=0 )
	{
	return true;
	}
	else { return false;}
	}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.9.1">
                <id>e5be0fe3-40ff-4738-9e29-19199e8e10aa</id>
                <name>validateValues</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597481349</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function validateValues(labvalue)
{
	if (  labvalue == null || labvalue == &quot;Nil&quot;  )
	{return false;}
	else
	return true;
	};
	</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.9.1">
            <id>0e6800ae-6d84-4245-9e09-2c1a2f28d8fc</id>
            <name>Common</name>
            <revision>2</revision>
            <lastModified>
              <time>1702919075449</time>
              <timezone>America/Bogota</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>0c4728b1-b0fa-4d99-9d0b-640e73a77e22</string>
              <string>0ee1b38b-9693-49cc-a93f-d83c2162abea</string>
              <string>f4c513ef-f1ab-470a-bff5-d505363dd0cb</string>
              <string>698319a5-6a40-439f-a2fc-77968f8fd8b0</string>
              <string>747034d1-3b67-4648-b61d-97569079ec4f</string>
              <string>a34ca889-a825-42c2-b8d2-eade79050a7b</string>
              <string>e28b6034-657f-44fe-bdfb-2eb08f6b8b9d</string>
              <string>8bf57726-afe4-4bf2-ab11-a811a2a90173</string>
              <string>8744071f-c37e-4836-91e5-09c33fc3fc6c</string>
              <string>c33e2ab9-4947-4a9c-a086-f94a0ab6331f</string>
              <string>f3853b12-9d89-4103-a29b-8b938c30466f</string>
              <string>03226d36-9fd4-49ce-a918-28b4fb9517b3</string>
              <string>278077bd-06c4-4367-8e98-793b88f53108</string>
              <string>dd2306fc-2fd7-4a27-a082-5f8c481ec5c6</string>
              <string>1ef6c048-d7a7-4702-a9fa-88c3929f28d7</string>
              <string>6471c495-addd-4cf4-a834-e7f9eb93045a</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.9.1">
                <id>43f73dbc-f73d-4178-9aa0-b451c05922e2</id>
                <name>Check if String contains</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597480368</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	To verify if one string (source) contains another string (target).

	@param {String} arg1 - target string to lookup in the source string
	@return {String} return true if the source string contains the target string
*/
String.prototype.contains = function(arg1) {
	
	return this.indexOf(arg1) &gt; -1;
		
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.9.1">
                <id>6a420042-a38d-4d6b-8567-d0290086256a</id>
                <name>Check if String contains HTTP code</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597479785</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	To verify if the given string contains HTTP status code.

	@param - no parameter
	@return {String} return true if the string contains the HTTP status code, false otherwise
*/

function isHttpCode2xx(arg1) {
	var code2xx = [&apos;200&apos;,&apos;201&apos;,&apos;202&apos;,&apos;203&apos;,&apos;204&apos;,&apos;205&apos;,&apos;206&apos;,&apos;207&apos;,&apos;208&apos;];	
	var length = code2xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code2xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}

function isHttpCode4xx(arg1) {
	var code4xx = [&apos;400&apos;,&apos;401&apos;,&apos;402&apos;,&apos;403&apos;,&apos;404&apos;,&apos;405&apos;,&apos;406&apos;,&apos;407&apos;,&apos;408&apos;,&apos;409&apos;,&apos;410&apos;,&apos;411&apos;,&apos;412&apos;,&apos;413&apos;,&apos;414&apos;,&apos;415&apos;,&apos;416&apos;,&apos;417&apos;,&apos;429&apos;,&apos;431&apos;,&apos;451&apos;];	
	var length = code4xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code4xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}

function isHttpCode5xx(arg1) {
	var code5xx = [&apos;500&apos;,&apos;501&apos;,&apos;502&apos;,&apos;503&apos;,&apos;504&apos;,&apos;505&apos;,&apos;506&apos;,&apos;510&apos;,&apos;511&apos;];	
	var length = code5xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code5xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.9.1">
                <id>42dbc1c3-72e4-4ece-a6b8-5cd188446027</id>
                <name>Convert JSON date to HL7v2 date</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597481529</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	To convert JSON date/time format to HL7v2 date only format.

	@param {String} datetime - JSON date/time (yyyy-MM-ddThh:mm:ss.sss-00:00) or (yyyy-MM-dd)
	@return {String} return HL7v2 date (yyyyMMdd)
*/
function convertToHL7v2Date(datetime) { 

	var date = datetime.toString().match(/\d{4}\-\d{2}\-\d{2}/);
	return ((date.length &gt; 0) ? date[0].replace(/\-/g,&apos;&apos;) : date.replace(/\-/g,&apos;&apos;));
	
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.9.1">
                <id>5b60cf28-571b-4aa8-94fe-d3cdf069471b</id>
                <name>Convert JSON datetime to HL7v2 datetime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597479424</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	To convert JSON date/time format to HL7v2 date only format.
	Possible formats:
	&quot;2016-01-01T00:00:00.000Z&quot;	JavaScript built-in JSON object
	&quot;2016-01-01T00:00:00-00:00&quot;	ISO 8601

	@param {String} datetime - JSON date/time with offset (yyyy-MM-ddThh:mm:ss.sss-/+00:00) or (yyyy-MM-dd)
	@return {String} return HL7v2 DTM date type
*/
function convertToHL7v2DateTime(datetime) { 

	var date = [];
	var hl7Date = &quot;&quot;;
	var timeZome = &quot;&quot;;

	if (datetime.indexOf(&quot;T&quot;) &gt; -1) {

		var zone = datetime.toString().slice(datetime.indexOf(&quot;T&quot;) + 1);
		if (zone.indexOf(&quot;+&quot;) &gt; 0) timeZone = &quot;+&quot;;
		if (zone.indexOf(&quot;-&quot;) &gt; 0) timeZone = &quot;-&quot;;

		if (datetime.indexOf(&quot;Z&quot;) &gt; 0) {
			date = datetime.toString().split(/\-|\+|T|:|\./g);
		} else {
			date = datetime.toString().split(/\-|\+|T|:/g);
		}
		
		for (var i=0; i &lt; 6; i++) {			
			hl7Date += date[i]; 
		}
		
		var offset = date.slice(6);
		for (var i=0; i &lt; offset.length; i++) {
			timeZone += offset[i];
		}

		return hl7Date + timeZone;

	} else {
		return convertToHL7v2Date(datetime);
	}
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.9.1">
                <id>d014f2fc-cf80-47ad-9de8-6c84807e2f70</id>
                <name>Extract JSON node data</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597479521</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Validates if node is not NULL or &quot;undefined&quot;. If the given node is an array, return a string of values.

	@param {String} node - node to extract the data from
	@return {String} return given node value or empty string if such node does not exist
*/
function extract(node) {

	try {
		var result = &quot;&quot;;

		if (null == node) return result;
		
		if ((typeof node) !== &quot;undefined&quot;) {

			if (Object.prototype.toString.call(node) === &apos;[object Array]&apos;) {
				result = org.apache.commons.lang3.StringUtils.join(node, &quot; &quot;)
			} else 
				result = node;
		}
	} finally {
		return result.toString().trim();
	}
}

</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.9.1">
                <id>a3f85cc2-9b95-45a9-9cb1-937197e09cdc</id>
                <name>Verify JSON node for existance</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597479695</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Verify if the given node exists.

	@param {String} node - node to verify for existance
	@return {String} return true if the given node exists, false otherwise
*/
function keyExists(node) {
	return ( ((typeof node) !== &quot;undefined&quot;) &amp;&amp; ((typeof node) !== null) );
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.9.1">
            <id>394664c0-d536-4310-970e-181dc03ee7da</id>
            <name>Conversions</name>
            <revision>1</revision>
            <lastModified>
              <time>1682597479338</time>
              <timezone>America/Bogota</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>0c4728b1-b0fa-4d99-9d0b-640e73a77e22</string>
              <string>0ee1b38b-9693-49cc-a93f-d83c2162abea</string>
              <string>f4c513ef-f1ab-470a-bff5-d505363dd0cb</string>
              <string>698319a5-6a40-439f-a2fc-77968f8fd8b0</string>
              <string>747034d1-3b67-4648-b61d-97569079ec4f</string>
              <string>a34ca889-a825-42c2-b8d2-eade79050a7b</string>
              <string>e28b6034-657f-44fe-bdfb-2eb08f6b8b9d</string>
              <string>8bf57726-afe4-4bf2-ab11-a811a2a90173</string>
              <string>8744071f-c37e-4836-91e5-09c33fc3fc6c</string>
              <string>c33e2ab9-4947-4a9c-a086-f94a0ab6331f</string>
              <string>f3853b12-9d89-4103-a29b-8b938c30466f</string>
              <string>03226d36-9fd4-49ce-a918-28b4fb9517b3</string>
              <string>278077bd-06c4-4367-8e98-793b88f53108</string>
              <string>dd2306fc-2fd7-4a27-a082-5f8c481ec5c6</string>
              <string>1ef6c048-d7a7-4702-a9fa-88c3929f28d7</string>
              <string>6471c495-addd-4cf4-a834-e7f9eb93045a</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.9.1">
                <id>3a388aa0-c0ba-460c-b790-1c42c081c84d</id>
                <name>Convert FHIR codes to HL7v2 codes</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597480735</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Map FHIR codes to corresponding HL7v2.6 codes using the Table number.

	@param {String} FhirCode - FHIR code
	@param {String} tableName - HL7v2.6 Table Name	
	@return {String} return corresponsing HL7v2.6 code if known or &quot;Unknown&quot; result
*/
function convertToHL7v2Table(FhirCode,tableNumber) {

	var code = &apos;&apos;;
	if (&apos;undefined&apos; !== typeof FhirCode &amp;&amp; null !== FhirCode) {
		code = FhirCode.toString().toLowerCase();	
	}
	

	switch(tableNumber) {
		case &quot;0001&quot;:
			if (&apos;female&apos; == code || &apos;f&apos; == code) return &apos;F&apos;; else
			if (&apos;male&apos; == code || &apos;m&apos; == code) return &apos;M&apos;; else
			if (&apos;other&apos; == code) return &apos;O&apos;; else
			return &apos;U&apos;; 			
		break;

		case &quot;0004&quot;:
			// http://hl7.org/fhir/encounter-class
			if (&apos;emergency&apos; == code) return &apos;E&apos;; else				
			if (&apos;inpatient&apos; == code) return &apos;I&apos;; else
			if (&apos;outpatient&apos; == code) return &apos;O&apos;; else
			return &quot;U&quot;;
		break;

		case &quot;0190&quot;:
			// http://hl7.org/fhir/ValueSet/address-type
			if (&apos;postal&apos; == code) return &apos;H&apos;; else				
			if (&apos;physical&apos; == code) return &apos;P&apos;; else
			if (&apos;both&apos; == code) return &apos;H&apos;; else
			return &quot;M&quot;;
		break;		

		case &quot;0201&quot;:
			// http://hl7.org/fhir/ValueSet/contact-point-use
			if (&apos;home&apos; == code) return &apos;PRN&apos;; else				
			if (&apos;work&apos; == code) return &apos;WPN&apos;; else
			if (&apos;mobile&apos; == code) return &apos;PRS&apos;; else
			if (&apos;temp&apos; == code) return &apos;TMP&apos;; else			
			if (&apos;old&apos; == code) return &apos;OLD&apos;; else
			return &quot;PRN&quot;;
		break;	

		case &quot;0202&quot;:
			// http://hl7.org/fhir/contact-point-system
			if (&apos;phone&apos; == code) return &apos;PH&apos;; else				
			if (&apos;fax&apos; == code) return &apos;FX&apos;; else
			if (&apos;pager&apos; == code) return &apos;BP&apos;; else
			if (&apos;email&apos; == code) return &apos;Internet&apos;; else
			return &quot;PH&quot;;
		break;	

		case &quot;0063&quot;:
			// http://hl7.org/fhir/ValueSet/patient-contact-relationship
			// (SN) Partial list
			if (&apos;parent&apos; == code) return &apos;PAR&apos;; else
			if (&apos;MTH&apos; == code) return &apos;MTH&apos;; else
			if (&apos;FTH&apos; == code) return &apos;FTH&apos;; else	
			if (&apos;caregiver&apos; == code) return &apos;CGV&apos;; else
			if (&apos;SPS&apos; == code) return &apos;SPO&apos;; else
			if (&apos;CHILD&apos; == code) return &apos;CHD&apos;; else
			if (&apos;GRNDCHILD&apos; == code) return &apos;GCH&apos;; else
			if (&apos;GRPRN&apos; == code) return &apos;GRP&apos;; else
			if (&apos;SIB&apos; == code) return &apos;SIB&apos;; else
			if (&apos;BRO&apos; == code) return &apos;BRO&apos;; else
			if (&apos;SIS&apos; == code) return &apos;SIS&apos;; else
			if (&apos;friend&apos; == code) return &apos;FND&apos;; else
			if (&apos;ONESELF&apos; == code) return &apos;SEL&apos;; else
			if (&apos;emergency&apos; == code) return &apos;EMC&apos;; else
			return &apos;UNK&apos;;		
		break;
		default:
			return &apos;U&apos;;
	}


}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.9.1">
            <id>fc481186-afaa-447b-822c-f0ba6980e3b2</id>
            <name>Database</name>
            <revision>1</revision>
            <lastModified>
              <time>1682597479385</time>
              <timezone>America/Bogota</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>0c4728b1-b0fa-4d99-9d0b-640e73a77e22</string>
              <string>feecaa3a-dba6-468b-a5b7-7379e6965d53</string>
              <string>bfe36ced-a6f7-44e7-af45-5837f11b3bad</string>
              <string>4a11b6f9-2a70-45a4-85ef-7949937ff063</string>
              <string>f4c513ef-f1ab-470a-bff5-d505363dd0cb</string>
              <string>a34ca889-a825-42c2-b8d2-eade79050a7b</string>
              <string>e28b6034-657f-44fe-bdfb-2eb08f6b8b9d</string>
              <string>8bf57726-afe4-4bf2-ab11-a811a2a90173</string>
              <string>8744071f-c37e-4836-91e5-09c33fc3fc6c</string>
              <string>138c30fb-34bf-4b61-b178-41a23b895682</string>
              <string>48871745-b660-4892-a5d6-d0a07002ee34</string>
              <string>c493d457-70a0-4f4c-a937-0488ff6a4535</string>
              <string>44fa8b92-bea5-4ca9-bc34-fba837df1f3e</string>
              <string>9a05a6d3-f67e-4e8d-a5c8-eeddecacea4f</string>
              <string>03226d36-9fd4-49ce-a918-28b4fb9517b3</string>
              <string>1ef6c048-d7a7-4702-a9fa-88c3929f28d7</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>1e31ed90-0f2c-4950-8183-3d297d3a02a7</string>
              <string>53ad5032-6ea6-475f-b483-c26cedbc43f2</string>
              <string>bf34b389-a73d-441f-9590-7d7f243ad5b5</string>
              <string>698319a5-6a40-439f-a2fc-77968f8fd8b0</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.9.1">
                <id>f2b08362-f366-4e5d-8c62-4b9d2977a71a</id>
                <name>Get_Informix_Connection</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597480996</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
JavaScript function to centralise creation of a database connection. The
connection won&apos;t be open, the caller still needs to do this but all constants
will be instantiated here

@return dbConn returns an instance of a returns a new DatabaseConnection object
*/
function Get_Informix_Connection() {

var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;com.informix.jdbc.IfxDriver&apos;, &apos;jdbc:informix-sqli://10.192.176.57:1526/orion_clinic:INFORMIXSERVER=dboc&apos;, &apos;consultaocli&apos;, &apos;hdrsanjuan&apos;);

return dbConn;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.9.1">
            <id>0db3684b-ca1c-42a3-b4ac-5979f6d90156</id>
            <name>DateLibrary</name>
            <revision>1</revision>
            <lastModified>
              <time>1682597479357</time>
              <timezone>America/Bogota</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>20771cf2-84cd-48f7-b644-387ca3be7286</string>
              <string>95542362-d5fa-4ab6-9bad-ec1b8e7158c3</string>
              <string>747034d1-3b67-4648-b61d-97569079ec4f</string>
              <string>8744071f-c37e-4836-91e5-09c33fc3fc6c</string>
              <string>2c39ba37-5558-4b03-8572-9d598615d6f5</string>
              <string>f0b5344f-fef0-492d-aa30-343d586964cd</string>
              <string>eb46a988-ef28-438f-85a8-79ff448dbfa8</string>
              <string>03226d36-9fd4-49ce-a918-28b4fb9517b3</string>
              <string>278077bd-06c4-4367-8e98-793b88f53108</string>
              <string>dd2306fc-2fd7-4a27-a082-5f8c481ec5c6</string>
              <string>7976a968-87c0-4231-9d07-d96b7000f9ab</string>
              <string>d0c614a3-7f92-4fcd-ae3e-a875f29df996</string>
              <string>db202450-62ae-4257-b9d1-c482a5ec516b</string>
              <string>fb12c5ab-a29f-434c-9849-957ffb52b0fb</string>
              <string>0c4728b1-b0fa-4d99-9d0b-640e73a77e22</string>
              <string>20accf86-8a52-47c2-b436-974981161d93</string>
              <string>0ee1b38b-9693-49cc-a93f-d83c2162abea</string>
              <string>0d1732eb-79c8-47b1-a829-58be289cee1f</string>
              <string>f4c513ef-f1ab-470a-bff5-d505363dd0cb</string>
              <string>049fa85e-9f9b-4f3a-8ccf-f970405e2ff5</string>
              <string>698319a5-6a40-439f-a2fc-77968f8fd8b0</string>
              <string>cbd38b8f-9f4f-45d0-842b-f7953d49a9e9</string>
              <string>a34ca889-a825-42c2-b8d2-eade79050a7b</string>
              <string>e28b6034-657f-44fe-bdfb-2eb08f6b8b9d</string>
              <string>8bf57726-afe4-4bf2-ab11-a811a2a90173</string>
              <string>7f99cb7e-9df9-4f60-9035-692e83174470</string>
              <string>342b2c7f-9e89-4e32-bcd5-2b3df76c5368</string>
              <string>57123153-b415-4444-899e-5fb7f5fbe722</string>
              <string>1ef6c048-d7a7-4702-a9fa-88c3929f28d7</string>
              <string>83e1c3c5-b377-47cf-89d5-71d6251deee4</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.9.1">
                <id>5aca6564-b2be-480e-8f40-9f99e811ad34</id>
                <name>DateFHIRToHl7</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597480587</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
// HL7 formate yyyy/MM/ddTHH:mm:ss
function DateFHIRToHl7(dateInFhir) {

	channelMap.put(&apos;dateInFhir&apos;,dateInFhir);
	channelMap.put(&apos;year&apos;,dateInFhir.substring(0,4));
	channelMap.put(&apos;MM&apos;,dateInFhir.substring(5,7));
	channelMap.put(&apos;dd&apos;,dateInFhir.substring(8,10));
	channelMap.put(&apos;HH&apos;,dateInFhir.substring(11,13));
	channelMap.put(&apos;mm&apos;,dateInFhir.substring(14,16));
	channelMap.put(&apos;ss&apos;,dateInFhir.substring(17,19));
	
	
	var HL7date =new Date(dateInFhir.substring(0,4),
	dateInFhir.substring(5,7),
	dateInFhir.substring(8,10),
	dateInFhir.substring(11,13),
	dateInFhir.substring(14,16),
	dateInFhir.substring(17,19)).getTime();
    

    return HL7date;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.9.1">
                <id>606eef4c-b703-4a5b-8cc0-aa68be7294c0</id>
                <name>DateHL7ToFHIR</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597479605</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
// HL7 formate yyyyMMddHHmmss
function DateHL7ToFHIR(DateHL7) {
	
	var FHIRdate = &apos;&apos;;
    FHIRdate += DateHL7.substring(0,4) + &apos;/&apos;;
    FHIRdate += DateHL7.substring(4,6) + &apos;/&apos;;
   FHIRdate += DateHL7.substring(6,8) + &apos;T&apos;;
   
   if(DateHL7.substring(8,10)){
   FHIRdate += DateHL7.substring(8,10) + &apos;:&apos;;
   }else {FHIRdate +=&apos;00:&apos;;}

     if(DateHL7.substring(10,12)){
   FHIRdate += DateHL7.substring(8,10) + &apos;:&apos;;
   }else {FHIRdate +=&apos;00:&apos;;}

   
     if(DateHL7.substring(12,14)){
   FHIRdate += DateHL7.substring(8,10) + &apos;:&apos;;
   }else {FHIRdate +=&apos;00&apos;;}
   

   
    FHIRdate += &apos;+GMT&apos;;
    return FHIRdate;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.9.1">
            <id>f77712da-d430-4a36-88e2-815d59b91885</id>
            <name>HL7_Limbach_DEV</name>
            <revision>1</revision>
            <lastModified>
              <time>1682597479366</time>
              <timezone>America/Bogota</timezone>
            </lastModified>
            <description>HL7</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>0c4728b1-b0fa-4d99-9d0b-640e73a77e22</string>
              <string>0ee1b38b-9693-49cc-a93f-d83c2162abea</string>
              <string>f4c513ef-f1ab-470a-bff5-d505363dd0cb</string>
              <string>698319a5-6a40-439f-a2fc-77968f8fd8b0</string>
              <string>747034d1-3b67-4648-b61d-97569079ec4f</string>
              <string>a34ca889-a825-42c2-b8d2-eade79050a7b</string>
              <string>e28b6034-657f-44fe-bdfb-2eb08f6b8b9d</string>
              <string>8bf57726-afe4-4bf2-ab11-a811a2a90173</string>
              <string>8744071f-c37e-4836-91e5-09c33fc3fc6c</string>
              <string>03226d36-9fd4-49ce-a918-28b4fb9517b3</string>
              <string>278077bd-06c4-4367-8e98-793b88f53108</string>
              <string>dd2306fc-2fd7-4a27-a082-5f8c481ec5c6</string>
              <string>1ef6c048-d7a7-4702-a9fa-88c3929f28d7</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.9.1">
                <id>8c993702-d5a3-47d5-ad5d-3a24f76fc080</id>
                <name>Update Response from RD to FireBird DB</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597481968</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function processRDResponse(senderRefReceived){
	var endingPosOfHeadId = senderRefReceived.indexOf(&quot;episodeId:&quot;);
	var headIdForSenderReference = senderRefReceived.substring(7, endingPosOfHeadId);
	var endingPosOfEpisodeId = senderRefReceived.indexOf(&quot;originalMessage:&quot;);
	var episodeIdForSenderReference = senderRefReceived.substring(endingPosOfHeadId+10, endingPosOfEpisodeId);
	var senderReferenceOrg = senderRefReceived.substring(endingPosOfEpisodeId+16);
	logger.debug(&quot;Channel 6 and Poll : Episode ID:  &quot;+episodeIdForSenderReference);	
	var text = getTEXTFromBEFUND_TEXTE(headIdForSenderReference, episodeIdForSenderReference, &quot;KB&quot;);
	if(!(input.report == &quot;&quot; || input.report == null)){
		text = text +&quot;\n&quot;+ input.report;
		logger.debug(&quot;Channel 6_D text from BEFUND_TEXTE: &quot;+text);
		updateTEXTInBEFUND_TEXTE(headIdForSenderReference, episodeIdForSenderReference, text, &quot;KB&quot;); //Shoudl be KB
		updateDetailsBEFUND_KOPF(headIdForSenderReference, episodeIdForSenderReference, &quot;CM&quot;);		
	}
	
}


/*
	The function updateDetailsBEFUND_KOPF updates the table BEFUND_KOPF
*/
function updateDetailsBEFUND_KOPF(headId, episodeId, befundStatus){
	logger.debug(&quot;Channel 6 and Poll : function updateDetailsBEFUND_KOPF headId:&quot;+headId+&quot; episodeId:&quot;+episodeId+&quot; befundStatus:&quot;+befundStatus);
	var DBCONToUpdateTEXT = getFireBirdConnection();
	try{
		var DBCONToUpdateTEXT = getFireBirdConnection();
		var SQLToUpdateTEXT = &quot;Update BEFUND_KOPF set STATUS_DRUCK=&apos;&apos;, STATUS_DATEI=&apos;N&apos; where LABOR_NUMMER=&quot;+episodeId+&quot; and ID=&quot;+headId+&quot; and BEFUND_STATUS=&apos;&quot;+befundStatus+&quot;&apos;;&quot;;
		logger.debug(&quot;Channel 6 and Poll : Query executed to update the BEFUND_KOPF: &quot;+SQLToUpdateTEXT);
		var res_TEXT_List = DBCONToUpdateTEXT.executeUpdate(SQLToUpdateTEXT);
		DBCONToUpdateTEXT.close();
	}catch(ex){
		logger.error(&quot;Error in executing the update statement:&quot;+SQLToUpdateTEXT);
		DBCONToUpdateTEXT.close();
		throw ex;
	}
}

/*
	The function updateTEXTInBEFUND_TEXTE updates the table BEFUND_TEXTE or insert&apos;s a new row to it.
*/
function updateTEXTInBEFUND_TEXTE(headId, episodeId, text, text_art){
	var DBCONToUpdateTEXT = getFireBirdConnection();
	try{
		var DBCONToUpdateTEXT = getFireBirdConnection();
		var SQLToUpdateTEXT = &quot;update BEFUND_TEXTE set TEXT = &apos;&quot;+text+&quot;&apos; where LABOR_NUMMER=&quot;+episodeId+&quot; and BEFKOPFID=&quot;+headId+&quot; and TEXT_ART=&apos;&quot;+text_art+&quot;&apos;;&quot;;
		logger.debug(&quot;Channel 6 and Poll : Query executed to update the updateTEXTInBEFUND_TEXTE: &quot;+SQLToUpdateTEXT);
		var resOfUpdateTEXT = DBCONToUpdateTEXT.executeUpdate(SQLToUpdateTEXT);
		logger.debug(&quot;Channel 6 and Poll : Value of the result s&quot;+resOfUpdateTEXT);
		DBCONToUpdateTEXT.close();	
		DBCONToUpdateTEXT = getFireBirdConnection();
		if(resOfUpdateTEXT == 0){ 
			var SQLToInsertTEXT = &quot;INSERT INTO BEFUND_TEXTE (BEFKOPFID, LABOR_NUMMER, LFDNR_AUFTRAG, PROBE_ID, TEXT_ART, TEXT) VALUES (&quot;+headId+&quot;,&quot;+episodeId+&quot;, Null , Null, &apos;KB&apos;, &apos;&quot;+text+&quot;&apos;);&quot;;
			logger.debug(&quot;Channel 6 and Poll : Query executed to update the Insert into BEFUND_TEXTE: &quot;+SQLToInsertTEXT);
			var resOfInserteTEXT = DBCONToUpdateTEXT.executeUpdate(SQLToInsertTEXT);
			logger.debug(&quot;Channel 6 and Poll : Value of the result s&quot;+resOfInserteTEXT);	
		}
		DBCONToUpdateTEXT.close();	
		
	}catch(ex){
		logger.error(&quot; Error in executing the update statement:&quot;+SQLToUpdateTEXT);
		DBCONToUpdateTEXT.close();
		throw ex;
	}
}

/*
	Generic function to get a new FireBird Connection. 
*/
function getFireBirdConnection(){
	var FbDriver =  configurationMap.get(&quot;FbDriver&quot;);
	var FbUrl  = configurationMap.get(&quot;FbUrl&quot;);
	var FbUsername = configurationMap.get(&quot;FbUsername&quot;);
	var FbPw  = configurationMap.get(&quot;FbPw&quot;);

	var DBCON = DatabaseConnectionFactory.createDatabaseConnection(FbDriver,FbUrl,FbUsername,FbPw); 
	return DBCON;
}

/*
	The function getTEXTFromBEFUND_TEXTE gets the value of TEXT from the table BEFUND_TEXTE.
*/
function getTEXTFromBEFUND_TEXTE(headId, episodeId, text_art){
	var text = &quot;&quot;;
	var DBCONToGetTEXT = getFireBirdConnection();
	try{
		var SQLToGetTEXT = &quot;select TEXT from BEFUND_TEXTE where LABOR_NUMMER=&quot;+episodeId+&quot; and BEFKOPFID=&quot;+headId+&quot; and TEXT_ART=&apos;&quot;+text_art+&quot;&apos;;&quot;;
		logger.debug(&quot;Channel 6 and Poll : Query executed to get the TEXT: &quot;+SQLToGetTEXT);
		var res_TEXT_List = DBCONToGetTEXT.executeCachedQuery(SQLToGetTEXT);
		var size_TEXT_List = res_TEXT_List.size();
		if (size_TEXT_List &gt;0){
			for(var i = 0;i&lt;size_TEXT_List;i++){
				res_TEXT_List.next();
				text = res_TEXT_List.getString(&quot;TEXT&quot;);
			}
		}
		DBCONToGetTEXT.close();	
	}catch(ex){
		logger.error(&quot;Error in executing the get TEXT statement:&quot;+SQLToGetTEXT);
		DBCONToGetTEXT.close();	
		throw ex;
	}
	return text;	
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.9.1">
            <id>833c5444-6415-4d62-a76b-caa39589c2fa</id>
            <name>Mirth</name>
            <revision>1</revision>
            <lastModified>
              <time>1682597479347</time>
              <timezone>America/Bogota</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>0c4728b1-b0fa-4d99-9d0b-640e73a77e22</string>
              <string>0ee1b38b-9693-49cc-a93f-d83c2162abea</string>
              <string>f4c513ef-f1ab-470a-bff5-d505363dd0cb</string>
              <string>698319a5-6a40-439f-a2fc-77968f8fd8b0</string>
              <string>747034d1-3b67-4648-b61d-97569079ec4f</string>
              <string>a34ca889-a825-42c2-b8d2-eade79050a7b</string>
              <string>e28b6034-657f-44fe-bdfb-2eb08f6b8b9d</string>
              <string>8bf57726-afe4-4bf2-ab11-a811a2a90173</string>
              <string>8744071f-c37e-4836-91e5-09c33fc3fc6c</string>
              <string>03226d36-9fd4-49ce-a918-28b4fb9517b3</string>
              <string>278077bd-06c4-4367-8e98-793b88f53108</string>
              <string>dd2306fc-2fd7-4a27-a082-5f8c481ec5c6</string>
              <string>1ef6c048-d7a7-4702-a9fa-88c3929f28d7</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.9.1">
                <id>b9eceb1d-8abb-4931-8247-209d70519f99</id>
                <name>Fix HL7v2 Node Order</name>
                <revision>1</revision>
                <lastModified>
                  <time>1682597479881</time>
                  <timezone>America/Bogota</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*

	See issue: http://www.mirthcorp.com/community/issues/browse/MIRTH-625

	Author: Nick Rupley
	Date Modified: 4/18/2012

	fixHL7NodeOrder: Returns a new E4X node where the order of all siblings and descendants have been fixed as per the Mirth HL7 dot notation convention.

	Arguments
	---------
		Required
		--------
		node: The node to be fixed. 
*/
function fixHL7NodeOrder(node) {
	// Create output node
	var newNode = new XML();
	// In case the node is an XMLList of multiple siblings, loop through each sibling
	for each (sibling in node) {
		// Create new sibling node
		var newSibling = new XML(&apos;&lt;&apos;+sibling.name().toString()+&apos;/&gt;&apos;);
		// Iterate through each child node
		for each (child in sibling.children())
			// If the child has its own children, then recursively fix the node order of the child
			if (child.hasComplexContent())
				newSibling.appendChild(fixHL7NodeOrder(child));
			// If the child doesn&apos;t have its own children, then just add the child to the new sibling node
			else
				newSibling.appendChild(child);
		// After recursively fixing all of the child nodes, now we&apos;ll fix the current node
		newNode += sortHL7Node(newSibling);
	}
	// Return the fixed node
	return newNode;
}

function sortHL7Node(node) {
	// If the node has no children, then there&apos;s nothing to sort
	if (node.hasSimpleContent())
		return node;
	// Create new output node
	var newNode = new XML(&apos;&lt;&apos;+node.name().toString()+&apos;/&gt;&apos;);
	// Iterate through each child in the node
	for each (child in node.children()) {
		// If the child has a QName, then we can sort on it
		if (child.name()) {
			// Get the current &quot;index&quot; of the child. Id est, if the QName is PID.3.1, then the index is 1
			curChildIndex = parseInt(child.name().toString().substring(child.name().toString().lastIndexOf(&apos;.&apos;)+1),10);
			// Boolean placeholder
			var inserted = false;
			// Iterate through each child currently in the NEW node
			for (var i = 0; i &lt;= newNode.children().length()-1; i++) {
				// Get the index of the child of the new node
				loopChildIndex = parseInt(newNode.child(i).name().toString().substring(newNode.child(i).name().toString().lastIndexOf(&apos;.&apos;)+1),10);
				// If the child we want to insert has a lower index then the current child of the new node, then we&apos;re going to insert the child 
				// right before the current newNode child
				if (curChildIndex &lt; loopChildIndex) {
					// Insert the child
					newNode.insertChildBefore(newNode.children()[i],child);
					// Set our flag, indicating that an insertion was made
					inserted = true;
					// No need to continue iteration
					break;
				}
			}
			// If no insertion was made, then the index of the child we want to insert is greater than or equal to all of the
			// indices of the children that have already been inserted in newNode. So, we&apos;ll just append the child to the end.
			if (!inserted)
				newNode.appendChild(child);
		}
	}
	// Return the sorted HL7 node
	return newNode;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
      </exportData>
    </channel>
  </channels>
</channelGroup>